<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xpandables.Net</name>
    </assembly>
    <members>
        <member name="T:Xpandables.Net.Commands.CommandHandlerBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Commands.CommandHandlerBuilder`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Commands.CommandHandlerBuilder`1"/> class with the delegate to be used
            as <see cref="M:Xpandables.Net.Commands.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Commands.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Commands.CommandHandlerBuilder`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command using the delegate from the constructor.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Commands.ICommand">
            <summary>
            This interface is used as a marker for commands when using the command pattern.
            Class implementation is used with the <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/> where
            "TCommand" is <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation.
            This can also be enhanced with some useful decorators.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Commands.ICommandHandler`1">
            <summary>
            Allows an application author to define a handler for a specific type command.
            The command must implement <see cref="T:Xpandables.Net.Commands.ICommand"/> interface.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TCommand">Type of the command to be handled.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Commands.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.CommandQueryOptions">
            <summary>
            Defines options to configure command/query handlers.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UseValidatorBehavior">
            <summary>
            Enables validation behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.ValidatorRules.IBehaviorValidation"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UseVisitorBehavior">
            <summary>
            Enables visitor behavior to commands and queries that implement the <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UsePersistenceBehavior">
            <summary>
            Enables persistence behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorPersistence"/> .
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UseCorrelationBehavior">
            <summary>
            Enables correlation behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UseRetryBehavior">
            <summary>
            Enables retry behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Retry.IBehaviorRetry"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UseTransactionBehavior">
            <summary>
            Enables transaction behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Transactions.IBehaviorTransaction"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.CommandQueryOptions.UseIdentityBehavior">
            <summary>
            Enables identity data behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions">
            <summary>
            Provides method to register commands queries.
            </summary>
            <summary>
            Provides method to register correlation collection.
            </summary>
            <summary>
            Provides method to register correlation collection.
            </summary>
            <summary>
            Provides method to register correlation collection.
            </summary>
            <summary>
            Service collection registration methods for <see cref="T:Xpandables.Net.Data.IDataBase"/>
            </summary>
            <summary>
            Provides method to register dispatcher.
            </summary>
            <summary>
             Provides method to register data context.
            </summary>
            <summary>
            Provides method to register HTTP rest client.
            </summary>
            <summary>
            Provides method to register services.
            </summary>
            <summary>
            Provides method to register services.
            </summary>
            <summary>
            Provides method to register interception.
            </summary>
            <summary>
            Provides method to register exports.
            </summary>
            <summary>
            Provides method to register qr code services.
            </summary>
            <summary>
            Provides method to register query handler.
            </summary>
            <summary>
            Provides method to register retry rules.
            </summary>
            <summary>
            Provides with methods to add decorator to classes.
            </summary>
            <summary>
            Provides method to register services.
            </summary>
            <summary>
            Provides method to register validation rules.
            </summary>
            <summary>
            Provides method to register visitor rules.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXCommandHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXCommandQueriesHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Xpandables.Net.DependencyInjection.CommandQueryOptions},System.Reflection.Assembly[])">
            <summary>
            Adds and configures the <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/> and <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> behaviors.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="configureOptions">A delegate to configure the <see cref="T:Xpandables.Net.DependencyInjection.CommandQueryOptions"/>.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>///
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXCorrelationCollection(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Correlation.CorrelationCollection`2"/> to the services with scoped life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXCorrelationContext(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> to the services with scoped life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXCorrelationBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds correlation behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> to the services
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXInstanceCreator(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the default <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/> implementation to the services with singleton life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXInstanceCreator``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <typeparamref name="TInstanceCreator"/> type to the services with singleton life time.
            </summary>
            <typeparam name="TInstanceCreator">The type of instance creator.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXStringGeneratorCryptography(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Cryptography.IStringCryptography"/> and <see cref="T:Xpandables.Net.Cryptography.IStringGenerator"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXStringGenerator(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Cryptography.IStringGenerator"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXStringGenerator``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <typeparamref name="TStringGenerator"/> type to the services with transient life time.
            </summary>
            <typeparam name="TStringGenerator">The string generator type.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXStringCryptography(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Cryptography.IStringCryptography"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXStringCryptography``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <typeparamref name="TStringCryptography"/> type to the services with transient life time.
            </summary>
            <typeparam name="TStringCryptography">The string cryptography type.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDataBase``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds all default services for <see cref="T:Xpandables.Net.Data.DataBase"/> use.
            </summary>
            <typeparam name="TDataConnectionProvider">The data connection provider type.</typeparam>
            <param name="services">the collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDispatcher(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the default <see cref="T:Xpandables.Net.Dispatchers.IDispatcher"/> implementation to the services with scoped life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDispatcher``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <typeparamref name="TDispatcher"/> type to the services with scoped life time.
            </summary>
            <typeparam name="TDispatcher">The dispatcher type implementation.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDataContext``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> accessor to the services with scoped life time.
            </summary>
            <typeparam name="TDataContextProvider">The type of data context accessor
            that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/>.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDataContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> accessor to the services with scoped life time.
            </summary>
            <param name="dataContextProviderType">The data context provider type.</param>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContextProviderType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDataContextProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/> to the services with scope life time.
            </summary>
            <typeparam name="TDataContextProvider">The type of the implementation.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDataContextProvider(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/> to the services with scope life time.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="dataContextProviderType">The data context provider type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContextProviderType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="dataContextProviderType"/> must implement the <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/> interface.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXDataContext(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Action{Xpandables.Net.EntityFramework.DataContextOptions})">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> accessor to the services with scoped life time using options.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="dataContextProviderType">The data context provider type.</param>
            <param name="configureOptions">A delegate to configure the <see cref="T:Xpandables.Net.EntityFramework.DataContextOptions"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContextProviderType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="dataContextProviderType"/> must implement <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configureOptions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXPersistenceBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds persistence behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorPersistence"/> to the services
            with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXSeedBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/> to the services with scoped life time that will be used
            to seed every data context that it's decorated with the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/> interface.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="dataContextSeederType">The type that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/>.</param>
            <param name="dataContextType">The type of data context.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXSeedBehavior``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/> to the services with scoped life time that will be used
            to seed every data context that it's decorated with the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/> interface.
            </summary>
            <typeparam name="TDataContextSeeder">The type that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/>.</typeparam>
            <typeparam name="TDataContext">The type of data context.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpRestClientIPLocationHandler(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientIPLocationHandler"/> to retrieve the IPAddress.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpRestClientGeoLocationHandler(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds an <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientGeoLocationHandler"/> to retrieve the user location.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpHeaderAccessorExtended(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the default HTTP request header values accessor that implements the <see cref="T:Xpandables.Net.Http.IHttpHeaderAccessor"/> from assembly.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.ConfigureXPrimaryAuthorizationTokenHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder)">
            <summary>
            Adds a delegate that will be used to provide the authorization token before request execution
            using an implementation of <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>. You can register the default implementation using
            the <see cref="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpTokenAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>.
            </summary>
            <param name="builder">The Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="builder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.ConfigureXPrimaryAuthorizationTokenHandler(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Func{System.String,System.String})">
            <summary>
            Adds a delegate that will be used to provide the authorization token before request execution
            using the token provider function.
            </summary>
            <param name="builder">The Microsoft.Extensions.DependencyInjection.IHttpClientBuilder.</param>
            <param name="tokenProvider">The delegate token provider to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="builder"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpTokenContainer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Http.HttpTokenContainer"/> that contains <see cref="T:Xpandables.Net.Http.IHttpHeaderAccessor"/>, <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>
            and <see cref="T:Xpandables.Net.Http.IHttpTokenEngine"/> to the service in scope life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpHeaderAccessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the specified HTTP request header values accessor that implements the <see cref="T:Xpandables.Net.Http.IHttpHeaderAccessor"/>.
            </summary>
            <typeparam name="THttpHeaderAccessor">The type of HTTP request header.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpTokenAccessor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the default HTTP request token accessor that implements the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpTokenAccessor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the specified HTTP request token accessor.
            The type should implement the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>.
            </summary>
            <typeparam name="THttpTokenAccessor">The type of HTTP request token.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpTokenEngine``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the specified token engine to the services collection.
            </summary>
            <typeparam name="THttpTokenEngine">The token engine type.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXHttpTokenEngine(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            Adds the specified token engine to the services collection with scoped life time.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="tokenEngineType">The type that implements <see cref="T:Xpandables.Net.Http.IHttpTokenEngine"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenEngineType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXIdentityProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the identity data type to the services.
            </summary>
            <typeparam name="TIdentityProvider">The identity type provider.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXIdentityBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds identity data behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> to the services
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXInterceptor``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Ensures that the supplied interceptor is returned, wrapping the original registered <typeparamref name="TInstance"/>.
            </summary>
            <typeparam name="TInstance">The service type that will be wrapped by the given <typeparamref name="TInterceptor"/>.</typeparam>
            <typeparam name="TInterceptor">The interceptor type that will be used to wrap the original service type.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXInterceptor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Ensures that the supplied interceptor is returned, wrapping the original registered <paramref name="serviceType"/>.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="serviceType">The service type that will be wrapped by the given <paramref name="interceptorType"/>.</param>
            <param name="interceptorType">The interceptor type that will be used to wrap the original service type
            and should implement <see cref="T:Xpandables.Net.Interception.IInterceptor"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptorType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="interceptorType"/> must implement <see cref="T:Xpandables.Net.Interception.IInterceptor"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXInterceptor``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Ensures that the supplied interceptor is returned, wrapping all original registered
            type implementing <see cref="T:Xpandables.Net.Interception.IBehaviorInterceptor"/> found in the specified collection of assemblies and match the predicate.
            </summary>
            <typeparam name="TInterceptor">The type of interceptor.</typeparam>
            <param name="services">The collection of services.</param>
            <param name="bindToInterface">Determines whether to use the first interface implementation from the class as source type.</param>
            <param name="predicate">A filter for the target type.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXInterceptor(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Boolean,System.Predicate{System.Type},System.Reflection.Assembly[])">
            <summary>
            Ensures that the supplied interceptor is returned, wrapping all original registered
            type implementing <see cref="T:Xpandables.Net.Interception.IBehaviorInterceptor"/> found in the specified collection of assemblies and match the predicate.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="interceptorType">The interceptor type that will be used to wrap the original service type
            and should implement <see cref="T:Xpandables.Net.Interception.IInterceptor"/>.</param>
            <param name="bindToInterface">Determines whether to use the first interface implementation from the class as source type.</param>
            <param name="predicate">A filter for the target type.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXServiceExport(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds and configures registration of services using the <see cref="T:Xpandables.Net.ManagedExtensibility.IAddServiceExport"/> implementations found in the current application path.
            This method is used with MEF : Managed Extensibility Framework.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="configuration">The application configuration.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXServiceExport(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Xpandables.Net.ManagedExtensibility.ExportServiceOptions})">
            <summary>
            Adds and configures registration of services using the<see cref="T:Xpandables.Net.ManagedExtensibility.IAddServiceExport"/> implementations found in the path.
            This method is used with MEF : Managed Extensibility Framework.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="configuration">The application configuration.</param>
            <param name="configureOptions">A delegate to configure the <see cref="T:Xpandables.Net.ManagedExtensibility.ExportServiceOptions"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="configureOptions"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddServiceExport(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,Xpandables.Net.ManagedExtensibility.ExportServiceOptions)">
            <summary>
            Adds exports services matching the specified options.
            </summary>
            <param name="services">The service collection.</param>
            <param name="configuration">The application configuration.</param>
            <param name="options">The export options.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXQrCode(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the <see cref="T:Xpandables.Net.QrCodes.IQrCodeEngine"/> to the collection of services.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXQrCode(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Xpandables.Net.QrCodes.QrCodeOptions})">
            <summary>
            Adds and configures the <see cref="T:Xpandables.Net.QrCodes.IQrCodeEngine"/> to the collection of services.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="configureOptions">A delegate to configure the <see cref="T:Xpandables.Net.QrCodes.QrCodeOptions"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXQueryHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXQueryHandlerWrapper(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the query handler wrapper necessary to resolve handlers using type inference.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXRetryBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds retry behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Retry.IBehaviorRetry"/> to the services
            with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXLazyTransient(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Ensures that any <see cref="T:System.Lazy`1"/> requested service will return <see cref="T:Xpandables.Net.DependencyInjection.LazyResolved`1"/> wrapping the original registered type.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.HasRegistration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            Determines whether or not the collection of services already contain the specified service type.
            </summary>
            <param name="services">The collection of services to act on.</param>
            <param name="serviceType">The service type to check the registration.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.HasRegistration``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Determines whether or not the collection of services already contain the specified service type.
            </summary>
            <param name="services">The collection of services to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XRegister(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Xpandables.Net.DependencyInjection.Registrations.Interfaces.ITypeSourceSelector})">
            <summary>
            Adds registrations to the <paramref name="services"/> collection using
            conventions specified using the <paramref name="action"/>.
            </summary>
            <param name="services">The services to add to.</param>
            <param name="action">The configuration action.</param>
            <exception cref="T:System.ArgumentNullException">If either the <paramref name="services"/>
            or <paramref name="action"/> arguments are <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XTryDecorate``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Ensures that the supplied <typeparamref name="TDecorator"/> decorator is returned, wrapping the
            original registered <typeparamref name="TService"/>, by injecting that service type into the
            constructor of the supplied <typeparamref name="TDecorator"/>. Multiple decorators may be applied
            to the same <typeparamref name="TService"/>. By default, a new <typeparamref name="TDecorator"/>
            instance will be returned on each request (according the
            <see langword="Transient">Transient</see> lifestyle), independently of the lifestyle of the
            wrapped service.
            <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
            </summary>
            <typeparam name="TService">The service type that will be wrapped by the given
            <typeparamref name="TDecorator"/>.</typeparam>
            <typeparam name="TDecorator">The decorator type that will be used to wrap the original service type.
            </typeparam>
            <param name="services">The collection of services to act on.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="services"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XTryDecorate``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{``0,System.IServiceProvider,``0})">
            <summary>
            Ensures that the supplied <paramref name="decorator"/> function decorator is returned, wrapping the
            original registered <typeparamref name="TService"/>, by injecting that service type into the
            constructor of the supplied <paramref name="decorator"/> function. Multiple decorators may be applied
            to the same <typeparamref name="TService"/>. By default, a new <paramref name="decorator"/> function
            instance will be returned on each request (according the
            <see langword="Transient">Transient</see> lifestyle), independently of the lifestyle of the
            wrapped service.
            <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
            </summary>
            <typeparam name="TService">The service type that will be wrapped by the given
            <paramref name="decorator"/>.</typeparam>
            <param name="services">The collection of services to act on.</param>
            <param name="decorator">The decorator function type that will be used to wrap the original service type.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="services"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="decorator"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XTryDecorate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.Object,System.IServiceProvider,System.Object})">
            <summary>
            Ensures that the supplied <paramref name="decorator"/> function decorator is returned, wrapping the
            original registered <paramref name="serviceType"/>, by injecting that service type into the
            constructor of the supplied <paramref name="decorator"/> function. Multiple decorators may be applied
            to the same <paramref name="serviceType"/>. By default, a new <paramref name="decorator"/> function
            instance will be returned on each request (according the
            <see langword="Transient">Transient</see> lifestyle), independently of the lifestyle of the
            wrapped service.
            <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
            </summary>
            <param name="services">The collection of services to act on.</param>
            <param name="serviceType">The service type that will be wrapped by the given
            <paramref name="decorator"/>.</param>
            <param name="decorator">The decorator function type that will be used to wrap the original service type.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="services"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="serviceType"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="decorator"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XTryDecorate``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{``0,``0})">
            <summary>
            Ensures that the supplied <paramref name="decorator"/> function decorator is returned, wrapping the
            original registered <typeparamref name="TService"/>, by injecting that service type into the
            constructor of the supplied <paramref name="decorator"/> function. Multiple decorators may be applied
            to the same <typeparamref name="TService"/>. By default, a new <paramref name="decorator"/> function
            instance will be returned on each request (according the
            <see langword="Transient">Transient</see> lifestyle), independently of the lifestyle of the
            wrapped service.
            <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
            </summary>
            <typeparam name="TService">The service type that will be wrapped by the given
            <paramref name="decorator"/>.</typeparam>
            <param name="services">The collection of services to act on.</param>
            <param name="decorator">The decorator function type that will be used to wrap the original service type.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="services"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="decorator"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XTryDecorate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            Ensures that the supplied <paramref name="decorator"/> function decorator is returned, wrapping the
            original registered <paramref name="serviceType"/>, by injecting that service type into the
            constructor of the supplied <paramref name="decorator"/> function. Multiple decorators may be applied
            to the same <paramref name="serviceType"/>. By default, a new <paramref name="decorator"/> function
            instance will be returned on each request (according the
            <see langword="Transient">Transient</see> lifestyle), independently of the lifestyle of the
            wrapped service.
            <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
            </summary>
            <param name="services">The collection of services to act on.</param>
            <param name="serviceType">The service type that will be wrapped by the given
            <paramref name="decorator"/>.</param>
            <param name="decorator">The decorator function type that will be used to wrap the original service type.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="services"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="serviceType"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="decorator"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.XTryDecorate(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Type)">
            <summary>
            Ensures that the supplied <paramref name="decoratorType"/> decorator is returned, wrapping the
            original registered <paramref name="serviceType"/>, by injecting that service type into the
            constructor of the supplied <paramref name="decoratorType"/>. Multiple decorators may be applied
            to the same <paramref name="serviceType"/>. By default, a new <paramref name="decoratorType"/>
            instance will be returned on each request (according the
            <see langword="Transient">Transient</see> lifestyle), independently of the lifestyle of the
            wrapped service.
            <para>
            Multiple decorators can be applied to the same service type. The order in which they are registered
            is the order they get applied in. This means that the decorator that gets registered first, gets
            applied first, which means that the next registered decorator, will wrap the first decorator, which
            wraps the original service type.
            </para>
            </summary>
            <param name="services">The collection of services to act on.</param>
            <param name="serviceType">The service type that will be wrapped by the given decorator.</param>
            <param name="decoratorType">The decorator type that will be used to wrap the original service type.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="services"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="serviceType"/> argument is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="decoratorType"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXTransactionScopeProvider``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the transaction type provider to the services.
            </summary>
            <typeparam name="TTransactionScopeProvider">The type transaction scope provider.</typeparam>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXTransactionBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds transaction scope behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.Transactions.IBehaviorTransaction"/>
            to the services
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXValidatorRuleBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds validation behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.ValidatorRules.IBehaviorValidation"/> to the services
            with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXValidatorRules(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds the <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXVisitorBehavior(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds visitor behavior to commands and queries that are decorated with the <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> to the services
            with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.ServiceCollectionExtensions.AddXVisitorRules(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            Adds the <see cref="T:Xpandables.Net.VisitorRules.IVisitorRule`1"/> to the services with transient life time.
            </summary>
            <param name="services">The collection of services.</param>
            <param name="assemblies">The assemblies to scan for implemented types.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector">
            <summary>
            Provides with methods to scan assemblies.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromCallingAssembly">
            <summary>
            Will scan for types from the calling assembly.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromExecutingAssembly">
            <summary>
            Will scan for types from the currently executing assembly.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromEntryAssembly">
            <summary>
            Will scan for types from the entry assembly.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromApplicationDependencies">
            <summary>
            Will load and scan all runtime libraries referenced by the currently executing application.
            Calling this method is equivalent to calling <see cref="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromDependencyContext(Microsoft.Extensions.DependencyModel.DependencyContext)"/> and passing in <see cref="P:Microsoft.Extensions.DependencyModel.DependencyContext.Default"/>.
            </summary>
            <remarks>
            If loading <see cref="P:Microsoft.Extensions.DependencyModel.DependencyContext.Default"/> fails, this method will fall back to calling <see cref="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssemblyDependencies(System.Reflection.Assembly)"/>,
            using the entry assembly.
            </remarks>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromApplicationDependencies(System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Will load and scan all runtime libraries referenced by the currently executing application.
            Calling this method is equivalent to calling <see cref="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromDependencyContext(Microsoft.Extensions.DependencyModel.DependencyContext,System.Func{System.Reflection.Assembly,System.Boolean})"/> and passing in <see cref="P:Microsoft.Extensions.DependencyModel.DependencyContext.Default"/>.
            </summary>
            <remarks>
            If loading <see cref="P:Microsoft.Extensions.DependencyModel.DependencyContext.Default"/> fails, this method will fall back to calling <see cref="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssemblyDependencies(System.Reflection.Assembly)"/>,
            using the entry assembly.
            </remarks>
            <param name="predicate">The predicate to match assemblies.</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssemblyDependencies(System.Reflection.Assembly)">
            <summary>
            Will load and scan all runtime libraries referenced by the currently specified <paramref name="assembly"/>.
            </summary>
            <param name="assembly">The assembly whose dependencies should be scanned.</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromDependencyContext(Microsoft.Extensions.DependencyModel.DependencyContext)">
            <summary>
            Will load and scan all runtime libraries in the given <paramref name="context"/>.
            </summary>
            <param name="context">The dependency context.</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromDependencyContext(Microsoft.Extensions.DependencyModel.DependencyContext,System.Func{System.Reflection.Assembly,System.Boolean})">
            <summary>
            Will load and scan all runtime libraries in the given <paramref name="context"/>.
            </summary>
            <param name="context">The dependency context.</param>
            <param name="predicate">The predicate to match assemblies.</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssemblyOf``1">
            <summary>
            Will scan for types from the assembly of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type in which assembly that should be scanned.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssembliesOf(System.Type[])">
            <summary>
            Will scan for types from the assemblies of each <see cref="T:System.Type"/> in <paramref name="types"/>.
            </summary>
            <param name="types">The types in which assemblies that should be scanned.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssembliesOf(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Will scan for types from the assemblies of each <see cref="T:System.Type"/> in <paramref name="types"/>.
            </summary>
            <param name="types">The types in which assemblies that should be scanned.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssemblies(System.Reflection.Assembly[])">
            <summary>
            Will scan for types in each <see cref="T:System.Reflection.Assembly"/> in <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">The assemblies to should be scanned.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="assemblies"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IAssemblySelector.FromAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Will scan for types in each <see cref="T:System.Reflection.Assembly"/> in <paramref name="assemblies"/>.
            </summary>
            <param name="assemblies">The assemblies to should be scanned.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="assemblies"/> argument is <c>null</c>.</exception>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter">
            <summary>
            Provides with methods to apply filters.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.AssignableTo``1">
            <summary>
            Will match all types that are assignable to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type that should be assignable from the matching types.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.AssignableTo(System.Type)">
            <summary>
            Will match all types that are assignable to the specified <paramref name="type" />.
            </summary>
            <param name="type">The type that should be assignable from the matching types.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="type"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.AssignableToAny(System.Type[])">
            <summary>
            Will match all types that are assignable to any of the specified <paramref name="types" />.
            </summary>
            <param name="types">The types that should be assignable from the matching types.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.AssignableToAny(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Will match all types that are assignable to any of the specified <paramref name="types" />.
            </summary>
            <param name="types">The types that should be assignable from the matching types.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.WithAttribute``1">
            <summary>
            Will match all types that has an attribute of type <typeparamref name="T"/> defined.
            </summary>
            <typeparam name="T">The type of attribute that needs to be defined.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.WithAttribute(System.Type)">
            <summary>
            Will match all types that has an attribute of <paramref name="attributeType" /> defined.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="attributeType"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.WithAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Will match all types that has an attribute of type <typeparamref name="T"/> defined,
            and where the attribute itself matches the <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of attribute that needs to be defined.</typeparam>
            <param name="predicate">The predicate to match the attribute.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="predicate"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.WithoutAttribute``1">
            <summary>
            Will match all types that doesn't have an attribute of type <typeparamref name="T"/> defined.
            </summary>
            <typeparam name="T">The type of attribute that needs to be defined.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.WithoutAttribute(System.Type)">
            <summary>
            Will match all types that doesn't have an attribute of <paramref name="attributeType" /> defined.
            </summary>
            <param name="attributeType">Type of the attribute.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="attributeType"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.WithoutAttribute``1(System.Func{``0,System.Boolean})">
            <summary>
            Will match all types that doesn't have an attribute of type <typeparamref name="T"/> defined,
            and where the attribute itself matches the <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of attribute that needs to be defined.</typeparam>
            <param name="predicate">The predicate to match the attribute.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="predicate"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InNamespaceOf``1">
            <summary>
            Will match all types in the same namespace as the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">A type inside the namespace to include.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InNamespaceOf(System.Type[])">
            <summary>
            Will match all types in any of the namespaces of the <paramref name="types" /> specified.
            </summary>
            <param name="types">The types in the namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InNamespaces(System.String[])">
            <summary>
            Will match all types in any of the <paramref name="namespaces"/> specified.
            </summary>
            <param name="namespaces">The namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="namespaces"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InExactNamespaceOf``1">
            <summary>
            Will match all types in the exact same namespace as the type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type in the namespace to include</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InExactNamespaceOf(System.Type[])">
            <summary>
            Will match all types in the exact same namespace as the type <paramref name="types"/>
            </summary>
            <param name="types">The types in the namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InExactNamespaces(System.String[])">
            <summary>
            Will match all types in the exact same namespace as the type <paramref name="namespaces"/>
            </summary>
            <param name="namespaces">The namespace to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="namespaces"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.InNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Will match all types in any of the <paramref name="namespaces"/> specified.
            </summary>
            <param name="namespaces">The namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="namespaces"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.NotInNamespaceOf``1">
            <summary>
            Will match all types outside of the same namespace as the type <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.NotInNamespaceOf(System.Type[])">
            <summary>
            Will match all types outside of all of the namespaces of the <paramref name="types" /> specified.
            </summary>
            <param name="types">The types in the namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.NotInNamespaces(System.String[])">
            <summary>
            Will match all types outside of all of the <paramref name="namespaces"/> specified.
            </summary>
            <param name="namespaces">The namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="namespaces"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.NotInNamespaces(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Will match all types outside of all of the <paramref name="namespaces"/> specified.
            </summary>
            <param name="namespaces">The namespaces to include.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="namespaces"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter.Where(System.Func{System.Type,System.Boolean})">
            <summary>
            Will match types based on the specified <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The predicate to match types.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="predicate" /> argument is <c>null</c>.</exception>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeSelector">
            <summary>
            Provides with methods to add registrations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeSelector.AddClasses">
            <summary>
            Adds all public, non-abstract classes from the selected assemblies to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeSelector.AddClasses(System.Boolean)">
            <summary>
            Adds all non-abstract classes from the selected assemblies to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="publicOnly">Specifies whether too add public types only.</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeSelector.AddClasses(System.Action{Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter})">
            <summary>
            Adds all public, non-abstract classes from the selected assemblies that
            matches the requirements specified in the <paramref name="action"/>
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="action">The filtering action.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="action"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeSelector.AddClasses(System.Action{Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter},System.Boolean)">
            <summary>
            Adds all non-abstract classes from the selected assemblies that
            matches the requirements specified in the <paramref name="action"/>
            to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="action">The filtering action.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="action"/> argument is <c>null</c>.</exception>
            <param name="publicOnly">Specifies whether too add public types only.</param>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ILifetimeSelector">
            <summary>
            Provides with methods to select life times.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ILifetimeSelector.WithSingletonLifetime">
            <summary>
            Registers each matching concrete type with <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton"/> lifetime.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ILifetimeSelector.WithScopedLifetime">
            <summary>
            Registers each matching concrete type with <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped"/> lifetime.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ILifetimeSelector.WithTransientLifetime">
            <summary>
            Registers each matching concrete type with <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient"/> lifetime.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ILifetimeSelector.WithLifetime(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Registers each matching concrete type with the specified <paramref name="lifetime"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ISelector">
            <summary>
            Provides with a method to populate the collection of services.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ISelector.Populate(Microsoft.Extensions.DependencyInjection.IServiceCollection,Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy)">
            <summary>
            Populates the collection of services according to the registration strategy.
            </summary>
            <param name="services">The collection of services to act on.</param>
            <param name="options">The registration strategy to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="services"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector">
            <summary>
            Provides with methods selector.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.AsSelf">
            <summary>
            Registers each matching concrete type as itself.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.As``1">
            <summary>
            Registers each matching concrete type as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to register as.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.As(System.Type[])">
            <summary>
            Registers each matching concrete type as each of the specified <paramref name="types" />.
            </summary>
            <param name="types">The types to register as.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.As(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Registers each matching concrete type as each of the specified <paramref name="types" />.
            </summary>
            <param name="types">The types to register as.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.AsImplementedInterfaces">
            <summary>
            Registers each matching concrete type as all of its implemented interfaces.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.AsSelfWithInterfaces">
            <summary>
            Registers each matching concrete type as all of its implemented interfaces, by returning an instance of the main type
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.AsMatchingInterface">
            <summary>
            Registers the type with the first found matching interface name.  (e.g. ClassName is matched to IClassName)
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.AsMatchingInterface(System.Action{System.Reflection.TypeInfo,Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter})">
            <summary>
            Registers the type with the first found matching interface name.  (e.g. ClassName is matched to IClassName)
            </summary>
            <param name="action">Filter for matching the Type to an implementing interface</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.As(System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Registers each matching concrete type as each of the types returned
            from the <paramref name="selector"/> function.
            </summary>
            <param name="selector">A function to select service types based on implementation types.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="selector"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.UsingAttributes">
            <summary>
            Registers each matching concrete type according to their <see cref="T:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.IServiceTypeSelector.UsingRegistrationStrategy(Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy)">
            <summary>
            Applies the specified registration strategy.
            </summary>
            <param name="registrationStrategy">The strategy to be applied.</param>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ITypeSelector">
            <summary>
            Type selector interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ITypeSelector.AddTypes(System.Type[])">
            <summary>
            Will scan the types <see cref="T:System.Type"/> in <paramref name="types"/>.
            </summary>
            <param name="types">The types in which assemblies that should be scanned.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ITypeSelector.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Will scan the types <see cref="T:System.Type"/> in <paramref name="types"/>.
            </summary>
            <param name="types">The types in which assemblies that should be scanned.</param>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="types"/> argument is <c>null</c>.</exception>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ITypeSourceSelector">
            <summary>
            Type source selector interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.Internals.Helpers.FindMatchingInterface(System.Reflection.TypeInfo,System.Action{System.Reflection.TypeInfo,Xpandables.Net.DependencyInjection.Registrations.Interfaces.IImplementationTypeFilter})">
            <summary>
            Find matching interface by name C# interface name convention.  Optionally use a filter.
            </summary>
            <param name="typeInfo"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy">
            <summary>
            Provides with the base class for registration strategies.
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy.Skip">
            <summary>
            Skips registrations for services that already exists.
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy.Append">
            <summary>
            Appends a new registration for existing services.
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy.Throw">
            <summary>
            Throws when trying to register an existing service.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy.Replace">
            <summary>
            Replaces existing service registrations using <see cref="F:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior.Default"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy.Replace(Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior)">
            <summary>
            Replaces existing service registrations based on the specified <see cref="T:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior"/>.
            </summary>
            <param name="behavior">The behavior to use when replacing services.</param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.RegistrationStrategy.Apply(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceDescriptor)">
            <summary>
            Applies the <see cref="T:Microsoft.Extensions.DependencyInjection.ServiceDescriptor"/> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </summary>
            <param name="services">The service collection.</param>
            <param name="descriptor">The descriptor to apply.</param>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior">
            <summary>
            Determines how the service will be replaced.
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior.Default">
            <summary>
            Replace existing services by service type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior.ServiceType">
            <summary>
            Replace existing services by service type (default).
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior.ImplementationType">
            <summary>
            Replace existing services by implementation type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.DependencyInjection.Registrations.ReplacementBehavior.All">
            <summary>
            Replace existing services by either service- or implementation type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute">
            <summary>
            Provides with an attributes that contains information about the decorated descriptor.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute"/> with a service type.
            </summary>
            <param name="serviceType"></param>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute.#ctor(System.Type,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute"/> with a service type and a life time.
            </summary>
            <param name="serviceType">The service type.</param>
            <param name="lifetime">The default life time.</param>
        </member>
        <member name="P:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute.ServiceType">
            <summary>
            Gets the service type if defined.
            </summary>
        </member>
        <member name="P:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute.Lifetime">
            <summary>
            Gets the current life time.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.ServiceDescriptorAttribute.GetServiceTypes(System.Type)">
            <summary>
            returns a collection of service types from the type.
            </summary>
            <param name="fallbackType">The type to act on.</param>
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.Registrations.TypeSourceSelector">
            <summary>
            <see cref="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ITypeSourceSelector"/> and <see cref="T:Xpandables.Net.DependencyInjection.Registrations.Interfaces.ISelector"/> implementation.
            </summary>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.Registrations.TypeSourceSelector.FromAssemblyOf``1">
            <inheritdoc />
        </member>
        <member name="T:Xpandables.Net.DependencyInjection.LazyResolved`1">
            <summary>
            Provides with lazy instance resolution.
            </summary>
            <typeparam name="T">The type to be resolved.</typeparam>
        </member>
        <member name="M:Xpandables.Net.DependencyInjection.LazyResolved`1.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.DependencyInjection.LazyResolved`1" /> class that uses a preinitialized specified value from the service provider.
            </summary>
            <param name="serviceProvider">The service provider used for preinitialized value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Correlation.CommandCorrelationBehavior`1">
            <summary>
            This class allows the application author to add post/rollback event support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target command handler class implementation should reference the
            <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TCommand">Type of the command to be handled.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.CommandCorrelationBehavior`1.#ctor(Xpandables.Net.Correlation.CorrelationContext,Xpandables.Net.Commands.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.CommandCorrelationBehavior`1"/> class with the correlation context and the command handler to be decorated.
            </summary>
            <param name="correlationContext">The correlation context.</param>
            <param name="decoratee">The command handler to be decorated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.CommandCorrelationBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command adding post/rollback event to the decorated handler.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationCollection`2">
            <summary>
            Provides a collection of objects that need to be shared across asynchronous control flows.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.Correlation.CorrelationCollection`2"/>
            class that is empty, has the default concurrency level, has the default initial
            capacity, and uses the default comparer for the key type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationContext">
            <summary>
            Default implementation of <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/>. This class depends on <see cref="T:System.IServiceProvider"/>.
            This class must be used through a behavior and must be registered as follow :
            <code>
                services.AddScoped{CorrelationContext};
                services.AddScoped{ICorrelationContext}(provider=>provider.GetRequiredService{CorrelationContext}());
            </code>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.CorrelationContext"/> with the service provider.
            </summary>
            <param name="provider">The service provider to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="provider"/> is null.</exception>
        </member>
        <member name="E:Xpandables.Net.Correlation.CorrelationContext.PostEvent">
            <summary>
            The event that will be raised after the main one in the same control flow only if there is no exception.
            The event will received the control flow return value for non-void method.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.CorrelationContext.RollbackEvent">
            <summary>
            The event that will be raised after the main one when exception. The event will received the control flow handled exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.System#IServiceProvider#GetService(System.Type)">
            <summary>
             Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType or null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.OnPostEventAsync(System.Object)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Correlation.CorrelationContext.PostEvent"/> event.
            </summary>
            <param name="returnValue">The control flow return value only for non-void method.</param>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.OnRollbackEventAsync(System.Exception)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Correlation.CorrelationContext.RollbackEvent"/> event.
            </summary>
            <param name="exception">The control flow handled exception.</param>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.Reset(System.String)">
            <summary>
            Clears the event.
            </summary>
            <param name="event">The event to reset.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.IBehaviorCorrelation">
            <summary>
            A marker interface that allows the command/query class to add correlation context event after control flow.
            In the class handling the query or command, you should reference
            the <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> and set the <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/> and/or
            <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>.
            <para></para>
            Note that <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/> will be raised at the end of the control only if there is no exception,
            giving you access to all data still alive on the control flow and the <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>
            will only be raised when exception. The exception in that case in accessible through the
            <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>.
            <para></para>
            You need to register the expected behavior using the appropriate extension method.
            <para></para>
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Correlation.QueryCorrelationBehavior`2"/>.
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Correlation.CommandCorrelationBehavior`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationPostEvent">
            <summary>
            Defines a method signature to be used to handle post event in correlation context.
            </summary>
            <param name="provider">The service provider.</param>
            <param name="returnValue">The control flow return value only for non-void method.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationRollbackEvent">
            <summary>
            Defines a method signature to be used to handler rollback event in correlation context.
            </summary>
            <param name="provider">The service provider.</param>
            <param name="exception">The control flow handled exception.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.ICorrelationContext">
            <summary>
            Defines two tasks that can be used to follow process after a control flow with <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/>
            and on exception during the control flow with <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>.
            In order to be activated, the target class should implement
            the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> interface,
            the target handling class should reference the current interface (to set the action) and you should
            register the behavior with the expected extension
            method <see langword="AddXCorrelationBehavior"/>.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent">
            <summary>
            The event that will be raised after the main one in the same control flow only if there is no exception.
            The event will contain the control flow "return value" for non-void method.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent">
            <summary>
            The event that will be raised after the main one when exception. The event will contain the control flow handled exception.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.QueryCorrelationBehavior`2">
            <summary>
            This class allows the application author to add post/rollback event support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target query handler class should reference the
            <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.QueryCorrelationBehavior`2.#ctor(Xpandables.Net.Correlation.CorrelationContext,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.QueryCorrelationBehavior`2"/> class.
            </summary>
            <param name="correlationContext">the event register.</param>
            <param name="decoratee">The decorated query handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.QueryCorrelationBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Creators.IInstanceCreator">
            <summary>
            Provides with methods to create instance of specific type at runtime using delegate and cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.IInstanceCreator.Cache">
            <summary>
            Contains the instance cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.IInstanceCreator.OnException">
            <summary>
            Define an action that will be called in case of handled exception during a create method execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <param name="type">The type to be created.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam">The type of the parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param">The parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam1">The type of the first parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam2">The type of the second parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param1">The first parameter to pass to the constructor.</param>
            <param name="param2">The first parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param1"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param2"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam1">The type of the first parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam2">The type of the second parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam3">The type of the third parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param1">The first parameter to pass to the constructor.</param>
            <param name="param2">The first parameter to pass to the constructor.</param>
            <param name="param3">The first parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param1"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param2"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param3"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.ClearCache">
            <summary>
            Clear the constructor cache.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Creators.InstanceCreator">
            <summary>
            Default implementation for <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/>.
            You can customize the behavior providing your own implementing of <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/> interface.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.InstanceCreator.OnException">
            <summary>
            Define an action that will be called in case of handled exception during a create method execution.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.InstanceCreator.Cache">
            <summary>
            Contains the instance cache.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Creators.InstanceCreator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Creators.InstanceCreator"/> with the string generator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Cryptography.IStringCryptography">
            <summary>
            Provides with methods to encrypt and decrypt string values.
            Contains a default implementation using the <see cref="T:Xpandables.Net.Cryptography.IStringGenerator"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.IStringCryptography.StringGenerator">
            <summary>
            Gets the string generator the cryptography.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Encrypt(System.String,System.UInt16)">
            <summary>
            Returns an encrypted string from the value using a randomize key.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="keySize">The size of the string key to be used to encrypt the string value.</param>
            <returns>An encrypted object that contains the encrypted value and its key.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="keySize"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Encrypt(System.String,System.String,System.String)">
            <summary>
            Returns an encrypted string from the value string using the specified key and the salt value.
            If <paramref name="key"/> or <paramref name="salt"/> is not provided, a default value will be used.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="key">The optional key value to be used for encryption.</param>
            <param name="salt">The optional salt base64 string value to be used for encryption.</param>
            <returns>An encrypted object that contains the encrypted value, its key and its salt.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Decrypt(System.String,System.String,System.String)">
            <summary>
            Returns an decrypted string from the encrypted value.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="key">The key value to be used for decryption.</param>
            <param name="value">The base64 encrypted value to be decrypted.</param>
            <param name="salt">The salt base64 string value to be used for decryption.</param>
            <returns>A decrypted string from the encrypted values.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="salt"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Decrypt(Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Returns an decrypted string from the encrypted object.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="encrypted">The object that contains encrypted information.</param>
            <returns>A decrypted string from the encrypted object.</returns>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.AreEqual(Xpandables.Net.Cryptography.ValueEncrypted,System.String)">
            <summary>
            Compares the encrypted object with the plain text one.
            Returns <see langword="true"/> if equality otherwise <see langword="false"/>.
            </summary>
            <param name="encrypted">The encrypted object.</param>
            <param name="value">The value to compare with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The comparison failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.StringCryptography">
            <summary>
            String cryptography engine.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.StringCryptography.StringGenerator">
            <summary>
            Gets the string generator the cryptography.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.StringCryptography.#ctor(Xpandables.Net.Cryptography.IStringGenerator)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Cryptography.StringCryptography"/> class.
            </summary>
            <param name="stringGenerator">The string generator.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stringGenerator"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.IStringGenerator">
            <summary>
            Provides with methods to generate strings, encrypt and decrypt string values.
            Contains a default implementation.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Cryptography.IStringGenerator.LookupCharacters">
            <summary>
            The lookup characters used to generate random string.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringGenerator.Generate(System.UInt16,System.String)">
            <summary>
            Generates a string of the specified length that contains random characters from the lookup characters.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <param name="lookupCharacters">The string to be used to pick characters from or default one.</param>
            <returns>A new string of the specified length with random characters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="lookupCharacters"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringGenerator.GenerateSalt(System.UInt16)">
            <summary>
            Generates a salt base64 string of the specified byte length.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <returns>A new base64 string from the salt bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Generating the salt failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringGenerator.Generate(System.UInt16)">
            <summary>
            Generates a string of the specified length that contains random characters.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <returns>A new string of the specified length with random characters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.StringGenerator">
            <summary>
            Provides with <see cref="T:Xpandables.Net.Cryptography.IStringGenerator"/> implementation.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Cryptography.ValueEncrypted">
            <summary>
            Defines a representation of an encrypted value, its key and its salt.
            This class uses the <see cref="T:Xpandables.Net.Cryptography.ValueEncryptedConverter"/> type converter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.#ctor(System.String,System.String,System.String)">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> with the key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The encrypted value.</param>
            <param name="salt">The salt value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="salt"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.Deconstruct(System.String@,System.String@,System.String@)">
            <summary>
            Provides with deconstruction for <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/>.
            </summary>
            <param name="key">The output key.</param>
            <param name="value">The output value.</param>
            <param name="salt">the output salt value.</param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.IsEqualTo(System.String,Xpandables.Net.Cryptography.IStringCryptography)">
            <summary>
            Compares the encrypted value with the specified one.
            Returns <see langword="true"/> if equality otherwise <see langword="false"/>.
            </summary>
            <param name="value">The value to compare with.</param>
            <param name="stringCryptography">The cryptography instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stringCryptography"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Cryptography.ValueEncrypted.Key">
            <summary>
            Contains the encryption key.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.ValueEncrypted.Value">
            <summary>
            Contains the base64 encrypted value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.ValueEncrypted.Salt">
            <summary>
            Contains the base64 salt value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> with other object.
            </summary>
            <param name="obj">Object to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.op_Equality(Xpandables.Net.Cryptography.ValueEncrypted,Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Applies equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.op_Inequality(Xpandables.Net.Cryptography.ValueEncrypted,Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Applies non equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.Equals(Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Compares <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> with the value.
            </summary>
            <param name="other">Option to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.GetHashCode">
            <summary>
            Computes the hash-code for the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.ToString">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> using the specified format and provider.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.ValueEncryptedConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type
            to a range value object using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a encrypted value object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataConverterAttribute">
            <summary>
            Specifies what type to use as a converter for the property this attribute is bound to.
            <para>The specified type must match the <see cref="T:Xpandables.Net.Data.Elements.DataPropertyConverter"/> delegate signature.</para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataConverterAttribute.#ctor(System.Type,System.String)">
             <summary>
             Initializes a new instance of <see cref="T:Xpandables.Net.Data.Attributes.DataConverterAttribute"/> with the type converter to be used
             for the decorated property.
             </summary>
             <example>
             <list type="bullet">
             <item>
             <description>The example of decorating a property.</description>
             <code>
             The mapper will use the specified type to provide a custom converter from the data row value
             to the target type.
            
             public class Foo
             {
                 [DataConverter(typeof(DecimalPropertyConverter), nameof(DecimalPropertyConverter.Convert))]
                 public decimal Amount {get; set;}
             }
             </code>
             </item>
             </list>
             </example>
             <param name="ownerType">The type that contains the converter method.</param>
             <param name="methodName">The name of the method to be used. The method should be static.</param>
             <exception cref="T:System.ArgumentNullException">The <paramref name="ownerType"/> is null.</exception>
             <exception cref="T:System.ArgumentNullException">The <paramref name="methodName"/> is null.</exception>
             <exception cref="T:System.InvalidOperationException">Unable to get the delegate converter. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataConverterAttribute.Converter">
            <summary>
            Gets the fully delegate to use as a converter for the object this attribute is bound to.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataKeysAttribute">
            <summary>
            Denotes one or more properties that uniquely identify the decorated class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataKeysAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Attributes.DataKeysAttribute"/> with the collection of keys.
            </summary>
            <param name="keys">List of keys to be used to uniquely identify the decorated class.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="keys"/> is null or empty.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataKeysAttribute.Keys">
            <summary>
            Gets the collection of keys used to uniquely identify the decorated class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataNameAttribute">
            <summary>
            Defines the name of the property/field on the target data source.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataNameAttribute.#ctor(System.String)">
            <summary>
            Defines the name of the property/field to be used on a data source.
            </summary>
            <param name="name">The name value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataNameAttribute.Name">
            <summary>
            Gets the value of the name string used to map the data source column with.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute">
            <summary>
            Defines that the decorated property should not be mapped with the target data source.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataPrefixAttribute">
            <summary>
            Defines the prefix of the property/field on the target data source.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataPrefixAttribute.#ctor(System.String)">
            <summary>
            Defines the prefix of the property/field to be used on a data source.
            </summary>
            <param name="prefix">The prefix value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="prefix"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataPrefixAttribute.Prefix">
            <summary>
            Gets the value of the prefix string used to map the data source column with.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.DataBase">
            <summary>
            Provides with a default implementation of <see cref="T:Xpandables.Net.Data.IDataBase"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.#ctor(Xpandables.Net.Data.IDataFactoryProvider,Xpandables.Net.Data.IDataConnectionProvider)">
            <summary>
            
            </summary>
            <param name="dataFactoryProvider"></param>
            <param name="connectionProvider"></param>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.ExecuteAsync``2(Xpandables.Net.Data.DataOptions,System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a command/query with the specified executable <typeparamref name="TExecutable" /> type
            and returns a result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TExecutable" /> type must implement <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1" /> interface.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TExecutable">The type of the executable. The class must implement <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1" /> interface.</typeparam>
            <param name="options">The database options.</param>
            <param name="commandText">The query or store procedure name.</param>
            <param name="commandType">The command type.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.ExecuteAsync``1(Xpandables.Net.Data.Executables.IDataExecutable{``0},Xpandables.Net.Data.DataOptions,System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Provides with resources for executable and runs that instance.
            </summary>
            <typeparam name="TResult">The type of the result of executable.</typeparam>
            <param name="executable">The executable instance.</param>
            <param name="options">The execution options.</param>
            <param name="commandText">The query or command to apply.</param>
            <param name="commandType">The command type.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executable"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.BuildConnection(System.Data.Common.DbProviderFactory,System.String)">
            <summary>
            Provides with a database connection using the provider and the connection string.
            </summary>
            <param name="dbProviderFactory">The database provider factory.</param>
            <param name="connectionString">The connection string to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dbProviderFactory"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.SpeedSqlServerResult(System.Data.Common.DbConnection)">
            <summary>
            Speeds the connection result for SQL server only.
            </summary>
            <param name="connection">the connection to speed.</param>
        </member>
        <member name="T:Xpandables.Net.Data.DataBaseHelpers">
            <summary>
            Provides with helper methods for data base.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteAsync``2(Xpandables.Net.Data.IDataBase,System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a command/query with the specified executable <typeparamref name="TExecutable" /> type
            and returns a result of <typeparamref name="TResult" /> type using default execution options.
            The <typeparamref name="TExecutable" /> type must implement <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" /> interface.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TExecutable">The type of the executable. The class must implement <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" /> interface.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query or store procedure name.</param>
            <param name="commandType">The command type.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteTransactionAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specified query as transactional query using the parameters and options and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteTransactionAsync(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specified query as transactional query using the parameters and default option
            and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteQueryTableAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specified command to the database using parameters and options and returns a data table.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The command to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteQueryTableAsync(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specified query to the database using parameters and default options
            and returns a data table.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteProcedureTableAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specified stored procedure to the database using parameters and options and returns a data table.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The stored procedure to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteProcedureTableAsync(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specified stored procedure to the database using parameters and default options
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The stored procedure to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteQueryAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specify query to the database using options and returns a result of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteQueryAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specify query to the database using default options
            and returns a result of the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteQueriesAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specify query to the database using options and returns a collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteQueriesAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the specify query to the database using default options
            and returns a collection of results of the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteProcedureAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the stored procedure by its name using options and returns the number of affected rows.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteProcedureAsync(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the stored procedure by its name using default options
            and returns the number of affected rows.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteProceduresAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the stored procedure by its name using default options
            and returns a collection of results of the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteProceduresAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes the stored procedure by its name using options and returns a collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteSingleAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.DataOptions,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a query that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="options">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ExecuteSingleAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a query that returns a single value of specific type using default options.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.Contains(System.Data.IDataRecord,System.String)">
            <summary>
            Determines whether or not the target data record contains the specified column name.
            </summary>
            <param name="dataRecord">The data record to act on.</param>
            <param name="columnName">The column name to find.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataRecord"/>  is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="columnName"/>  is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.IsSqlConnection(System.Data.IDbConnection)">
            <summary>
            Determines whether or not the connection is an SQL Connection.
            </summary>
            <param name="connection">The connection to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseHelpers.ParseSql(System.String)">
            <summary>
            Parses query that uses old format.
            </summary>
            <param name="query">The query to be formatted.</param>
            <returns>A parsed query.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.DataConnection">
            <summary>
            Contains data base connection information. Use <see cref="T:Xpandables.Net.Data.DataConnectionBuilder"/> to build connection.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnection.#ctor">
            <summary>
            Initializes a default instance of <see cref="T:Xpandables.Net.Data.DataConnection"/> class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataConnection.ConnectionStringSource">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataConnection.PoolName">
            <summary>
            Gets or sets the pool name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataConnection.ProviderName">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataConnection.UserId">
            <summary>
            Gets or sets the connection string user identifier.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataConnection.UserPassword">
            <summary>
            Gets or sets the connection string user password.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataConnection.UseIntegratedSecurity">
            <summary>
            Determines whether or not to use integrated security.
            If <see langword="false"/>, you should provide <see cref="P:Xpandables.Net.Data.DataConnection.UserId"/> and <see cref="P:Xpandables.Net.Data.DataConnection.UserPassword"/> information.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnection.GetConnectionString">
            <summary>
            Returns the built connection string value.
            </summary>
            <exception cref="T:System.ArgumentException">The instance is invalid.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnection.GetProviderType">
            <summary>
            Returns the built data provider type from the provider name found in the current settings.
            </summary>
            <exception cref="T:System.ArgumentException">The instance is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <see cref="P:Xpandables.Net.Data.DataConnection.ProviderName"/> is not found in the collection of providers.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnection.IsValid(System.Exception@)">
            <summary>
            Determines whether or not the instance contains valid information.
            If so, returns <see langword="true"/> otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnection.GetEqualityComponents">
            <summary>
            When implemented in derived class, this method will provide the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.DataConnectionBuilder">
            <summary>
            Allows application author to build <see cref="T:Xpandables.Net.Data.DataConnection"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.Build">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Data.DataConnection"/> using registered information.
            </summary>
            <exception cref="T:System.InvalidOperationException">Building the <see cref="T:Xpandables.Net.Data.DataConnection"/> failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.AddConnectionString(System.String)">
            <summary>
            Adds the connection string source (without security information).
            </summary>
            <param name="connectionStringSource">The connection string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionStringSource"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="connectionStringSource"/> contains security information.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.AddPoolName(System.String)">
            <summary>
            Adds the pool name to be used.
            </summary>
            <param name="poolName">The pool name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="poolName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.AddProviderName(System.String)">
            <summary>
            Adds the known provider name.
            </summary>
            <param name="providerName">The provider name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.AddProviderName(Xpandables.Net.Data.DataProviderType)">
            <summary>
            Adds the known provider name from the provider type.
            </summary>
            <param name="providerType">The provider type to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.AddUserId(System.String)">
            <summary>
            Adds the specified user identifier.
            </summary>
            <param name="userId">The user identifier.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="userId"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.AddUserPassword(System.String)">
            <summary>
            Adds the user password.
            </summary>
            <param name="userPassword">The user password.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="userPassword"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataConnectionBuilder.EnableIntegratedSecurity">
            <summary>
            Defines the use of integrated security. The connection string must contains the "Integrated Security=true" expression.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.DataFactoryProvider">
            <summary>
            The default implementation to return data provider factory from provider type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataFactoryProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.DataFactoryProvider"/>.
            </summary>
            <param name="serviceProvider">The service provider to use.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataFactoryProvider.GetProviderFactory(Xpandables.Net.Data.DataProviderType)">
            <summary>
            Returns an instance of the data provider factory matching the specified provider type.
            </summary>
            <param name="providerType">The provider type to find factory.</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbProviderFactory" /> if found, otherwise an empty or exception.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerType" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataFactoryProvider.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType. -or- null if there is no service object of type serviceType.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.ReaderOption">
            <summary>
            Determines the way to retrieve data from the database.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Data.ReaderOption.DataAdapter">
            <summary>
            Reads data using the data adapter type. This is the default value.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Data.ReaderOption.DataReader">
            <summary>
            Reads data using the data reader type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.ThreadOption">
            <summary>
            Determines the algorithm to be applied.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Data.ThreadOption.Normal">
            <summary>
            A normal for each...
            </summary>
        </member>
        <member name="F:Xpandables.Net.Data.ThreadOption.SpeedUp">
            <summary>
            Use of partitioner with parallel execution. Not available when used with <see cref="F:Xpandables.Net.Data.ReaderOption.DataReader"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Data.ThreadOption.Expensive">
            <summary>
            Use of parallel. Not available when used with <see cref="F:Xpandables.Net.Data.ReaderOption.DataReader"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.DataOptions">
            <summary>
            Contains execution behaviors. Use <see cref="T:Xpandables.Net.Data.DataOptionsBuilder"/> to build options.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.IsTransactionEnabled">
            <summary>
            Determines whether or not to use transaction. The default value is <see langword="false"/>.
            if so, contains <see langword="true"/>, otherwise contains <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.IsolationLevel">
            <summary>
            Determines the isolation level for transaction. Only used if <see cref="P:Xpandables.Net.Data.DataOptions.IsTransactionEnabled"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.ConditionalMapping">
            <summary>
            Defines the delegate that determines whether or not a property should be mapped.
            Its default behavior return <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.IsConditionalMappingEnabled">
            <summary>
            Determines whether or not the conditional mapping has been defined. The default value is <see langword="false"/>.
            if so, contains <see langword="true"/>, otherwise contains <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.MappedNames">
            <summary>
            Contains a collection of manual names mapping.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.NotMappedNames">
            <summary>
            Contains a collection of manual names from types that should not to be mapped.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.Converters">
            <summary>
            Contains a collection of converters.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.ThreadOptions">
            <summary>
            Defines the thread execution options. The default value is <see cref="F:Xpandables.Net.Data.ThreadOption.Normal"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.ReaderOptions">
            <summary>
            Defines the data type option to use to retrieve data from database. The default value is <see cref="F:Xpandables.Net.Data.ReaderOption.DataAdapter"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.CancellationToken">
            <summary>
            Contains the cancellation token to be used.
            The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.ContainsNotMappedNames">
            <summary>
            Determines whether or not the filtered delegate has been defined. The default value is <see langword="false"/>
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.IdentityBuilder">
            <summary>
            Contains the entity identity builder delegate.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataOptions.IsIdentityRetrieved">
            <summary>
            Determines whether or not to retrieve the newly created identity from SQL command.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.DataOptionsBuilder">
            <summary>
            Allows application author to build <see cref="T:Xpandables.Net.Data.DataOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.DataOptionsBuilder"/> class
            used to build a <see cref="T:Xpandables.Net.Data.DataOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.Build">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Data.DataOptions"/> using registered information.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.BuildDefault">
            <summary>
            Returns a the default instance of <see cref="T:Xpandables.Net.Data.DataOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddTransaction(System.Data.IsolationLevel)">
            <summary>
            Enables use of transaction. The transaction will be closed just after the current execution.
            </summary>
            <param name="isolationLevel">The isolation level to be used. The default value used by the server is <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> </param>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddMappable(System.Func{Xpandables.Net.Data.Elements.IDataProperty,System.Boolean})">
            <summary>
            This is the highest level of mapping.
            Adds a delegate that determines whether or not a property should be mapped.
            The delegate will received an instance of the processing property and should return <see langword="true"/> if the property should be
            mapped, otherwise <see langword="false"/>. This action should be used for complex mapping and be aware of the performance impact.
            <para>The definition here takes priority over all attributes <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/>
            and other <see cref="M:Xpandables.Net.Data.DataOptionsBuilder.AddNotMappedName``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})"/>.</para>
            </summary>
            <param name="mappable">The delegate that determine if a property is used or not.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="mappable"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddDataName``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
            <summary>
            Bounds the specified model property name to the column data row specific name.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNameAttribute"/> attribute but takes priority over this attribute
            and <see cref="T:Xpandables.Net.Data.Attributes.DataPrefixAttribute"/> attribute.
            Does not works for nested type, you have to provide mapper name for nested properties.
            You can add many mappers for various properties.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertySelector">The model property selector. We advise use of <see langword="nameof(model.PropertyName)"/>
            The property name must match a real property name.</param>
            <param name="sourceColumnName">The name of the column in the data row.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertySelector"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceColumnName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The property can no be bound to the data row property.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddNotMappedName``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Specifies that selected property of the model must not be bound to the result.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/> attribute but takes priority over this attribute.
            You can add many mappers for various properties.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertySelector">The model property selector. We advise use of <see langword="nameof(model.PropertyName)"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertySelector"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The property can no be found in the target type.</exception>
            <exception cref="T:System.ArgumentException">The property already exist in the filter of target type.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddNotMappedNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">
            <summary>
            Specifies that selected properties of the model must not be bound to the result.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/> attribute but takes priority over this attribute.
            Does not works for nested type, you have to provide not mapped for nested types.
            You can add many mappers for various types.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertySelectors">The collection of model properties selector. We advise use of <see langword="nameof(model.PropertyName)"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertySelectors"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The property already exist in the filter of target type.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddNotMappedNames``1(System.String[])">
            <summary>
            Specifies that collection of property names of the model must not be bound to the result.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/> attribute but takes priority over this attribute.
            Does not works for nested type, you have to provide not mapped for nested types.
            You can add many mappers for various types.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertyNames">A collection of string property names that shouldn't be bound to the result.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="propertyNames"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The model does not contains the specified property.</exception>
            <exception cref="T:System.ArgumentException">The property already exist in the filter of target type.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddIdentityBuilder(Xpandables.Net.Data.Elements.DataIdentityBuilder)">
            <summary>
            Adds a delegate to be used to build entity identity.
            The value is used to uniquely identify an entity instance.
            The delegate will received an instance of the target entity.
            The definition here takes priority over the <see cref="T:Xpandables.Net.Data.Attributes.DataKeysAttribute"/> attributes.
            </summary>
            <param name="identityBuilder">The delegate to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityBuilder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddConverter``1(Xpandables.Net.Data.Elements.DataPropertyConverter)">
            <summary>
            Adds a delegate to be used for converting data row value to the target type.
            The delegate will receive an instance of the target property and the value from the data row.
            You can add many converters for various type.
            <para>The <typeparamref name="TType"/> should be a primitive type, <see cref="T:System.DateTime"/> or a <see cref="T:System.String"/> type.</para>
            The definition here takes priority over the <see cref="T:Xpandables.Net.Data.Attributes.DataConverterAttribute"/> attribute.
            </summary>
            <typeparam name="TType">The type of the property the converter should be applied to its value.</typeparam>
            <param name="converter">The delegate to be used to convert a data row value for the target <typeparamref name="TType"/> type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddThreadOptions(Xpandables.Net.Data.ThreadOption)">
            <summary>
            Defines the execution thread options.
            </summary>
            <param name="threadOptions">the thread options to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddReaderOptions(Xpandables.Net.Data.ReaderOption)">
            <summary>
            Defines the data type option to retrieve data from database.
            Only for 'select' methods.
            </summary>
            <param name="readerOptions">the thread options to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.AddCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Defines the cancellation token for the execution.
            The default used value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
            <param name="cancellationToken">The cancellation token to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.UseRetrievedIdentity">
            <summary>
            Defines that the current execution should retrieve the last identity from the query.
            Be aware of the fact that the query must be an insertion, otherwise you will face an exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataOptionsBuilder.GetMemberNameFromExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="T">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.DataParameterBuilder">
            <summary>
            Defines a method to add parameters to a command.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataParameterBuilder.Build(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Adds the specified parameters to the current command instance.
            </summary>
            <param name="command">The command to act on.</param>
            <param name="parameters">The parameters to be added.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="parameters"/> can not be a mix of DbParameters and values.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.DataParameterBuilderExtensions">
            <summary>
            Helper for builder.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataParameterBuilderExtensions.RemoveExtraChars(System.String)">
            <summary>
            Remove extra characters from the specified string.
            </summary>
            <param name="source">The string to act on.</param>
        </member>
        <member name="T:Xpandables.Net.Data.DataProviderType">
            <summary>
            Defines the properties for data base access provider and derives from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            Its contains information about the <see cref="P:Xpandables.Net.Data.DataProviderType.ProviderFactoryTypeName"/> used to build the target provider and
            the <see cref="P:Xpandables.Net.Data.DataProviderType.DisplayName"/> that matches the assembly name of the target provider.
            <para>
            Provides with a list of data providers. You can derive from this class in order to extend the type.
            </para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataProviderType.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Construct a new data provider type with an index and the invariant name.
            </summary>
            <param name="index">The index for the date provider.</param>
            <param name="assemblyName">The invariant assembly name to be used.</param>
            <param name="providerFactoryTypeName">The provider factory type name.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="assemblyName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerFactoryTypeName"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.DisplayName">
            <summary>
            Gets the invariant (assembly) name that can be used pro grammatically to refer to the data provider type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.ProviderFactoryTypeName">
            <summary>
            Gets the provider factory type name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.IsInstance">
            <summary>
            Determines whether or not the provider type refers to an instance factory.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.MSSQL">
            <summary>
            Provides data access for Microsoft SQL Server.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.ORACLE">
            <summary>
            For Oracle data sources version 8.1.7 and later.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.OLEDB">
            <summary>
            For data sources exposed by using OLE DB.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.ODBC">
            <summary>
            For data sources exposed by using ODBC.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.ENTITY">
            <summary>
            Provides data access for Entity Data Model (EDM) applications.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.SQLITE">
            <summary>
             Provides data access for Microsoft SQL Lite.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.MYSQL">
            <summary>
            Provides data access for MySQL.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.DataProviderType.NPGSQL">
            <summary>
            Provides data access for PostgreSQL.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataIdentityBuilder">
            <summary>
            Defines a delegate to be used to build entity identity.
            </summary>
            <param name="entity">The target entity to act on.</param>
            <returns>A string that uniquely identifies the specified entity.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataPropertyConverter">
            <summary>
            Defines a delegate to be used for converting data row value to a specific type.
            </summary>
            <param name="property">The data property descriptor.</param>
            <param name="rowValue">The data row value.</param>
            <returns>A converted value from the data row value.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataElement">
            <summary>
            Base implementation of a mapping with a class element.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataElement"/> class with the target element type.
            </summary>
            <param name="type">The type of the data element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.Type">
            <summary>
            Gets the type of the target element.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.IsPrimitive">
            <summary>
            Determine whether the element is a value type|string or reference type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.IsNullable">
            <summary>
            Determine whether the target element is nullable.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.IsEnumerable">
            <summary>
            Determine whether the target element is a collection.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataEntity">
            <summary>
            Implementation of a mapping associated with a class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.#ctor(System.Type,System.Collections.Generic.IEnumerable{Xpandables.Net.Data.Elements.IDataProperty})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> that contains a type and a collection of properties.
            </summary>
            <param name="type">the type of the entity.</param>
            <param name="properties">The collection of properties.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="properties"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.SetParent(System.Object,Xpandables.Net.Data.Elements.IDataProperty)">
            <summary>
            Sets the parent property of the current entity.
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="parentProperty">The property parent.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentProperty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.BuildIdentity">
            <summary>
            Builds the identity using the current entity instance.
            The entity must be already assigned.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target entity with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.Entity">
            <summary>
            Gets the entity instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.ParentProperty">
            <summary>
            Gets the property on parent entity if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.ParentEntity">
            <summary>
            Gets the parent entity if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.Properties">
            <summary>
            Gets the collection of properties from the type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.Identity">
            <summary>
            Gets the identity that is unique for the entity.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataProperty">
            <summary>
            Provides with custom information for a mapping associated with a property.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.#ctor(System.Type,System.String,System.String,System.String,System.Boolean,System.Delegate,System.Delegate,Xpandables.Net.Data.Elements.DataPropertyConverter)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/> with all arguments using cache.
            </summary>
            <param name="type">The property type.</param>
            <param name="propertyName">The property name.</param>
            <param name="dataName">The data name from the source.</param>
            <param name="dataPrefix">The data prefix from the source.</param>
            <param name="isIdentity">Whether the property is an identity key or not.</param>
            <param name="getter">The property getter delegate.</param>
            <param name="setter">The property setter delegate.</param>
            <param name="converter">The property converter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataPrefix"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="getter"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="setter"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.PropertyName">
            <summary>
            Gets the target property name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.DataName">
            <summary>
            Gets the name of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.DataPrefix">
            <summary>
            Gets the prefix of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.DataFullName">
            <summary>
            Gets the full name of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.IsIdentity">
            <summary>
            Determine whether the property is used for uniquely identify the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.Setter">
            <summary>
            Gets the setter delegate for the property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.Getter">
            <summary>
            Gets the getter delegate for the property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.Converter">
            <summary>
            Gets the delegate used to convert the data row value to the expected type of property.
            The default behavior just returns the value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.SetData(System.Data.IDataRecord,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the data reader to the property.
            </summary>
            <param name="dataRecord">The data reader to act on.</param>
            <param name="target">the entity to save to.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRecord"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.SetData(System.Data.DataRow,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the data row to the property.
            </summary>
            <param name="dataRow">The data row to act on.</param>
            <param name="target">the entity to save to.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRow"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataPropertySource">
            <summary>
            Provides with information to build a property.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataPropertySource.#ctor(System.Reflection.PropertyInfo,Xpandables.Net.Data.DataOptions,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataPropertySource"/>.
            </summary>
            <param name="propertyInfo"></param>
            <param name="options"></param>
            <param name="identyProperties"></param>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataPropertySource.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataPropertySource.Options">
            <summary>
            Gets the current execution options.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataPropertySource.IdentyProperties">
            <summary>
            Gets a collection of properties defined as identifiers.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataElement">
            <summary>
            The base element interface.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataElement.Type">
            <summary>
            Gets the type of the target element.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataElement.IsPrimitive">
            <summary>
            Determine whether the element is a value type|string or reference type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataElement.IsNullable">
            <summary>
            Determine whether the target element is nullable.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataElement.IsEnumerable">
            <summary>
            Determine whether the target element is a collection.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElement.GetElementType">
            <summary>
            Returns the element type.
            <para>If the element type is nullable, returns <see langword="Nullable.GetUnderlyingType(Type)"/>.</para>
            If the element type is a collection, returns <see langword="Type.GetGenericArguments()[0]"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElement.GetElementStronglyType">
            <summary>
            Returns the element type without looking for enumerable concern.
            If the element is a collection, returns <see langword="Type.GetGenericArguments()[0]"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElement.CreateElement(Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Creates an instance of the <see cref="P:Xpandables.Net.Data.Elements.IDataElement.Type"/>. The type must contains a parameterless constructor.
            </summary>
            <param name="instanceCreator">The instance creator to be used.</param>
            <returns>A new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create an instance. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElement.CreateStronglyElement(Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Creates an instance of the exactly value to <see cref="P:Xpandables.Net.Data.Elements.IDataElement.Type"/>.
            </summary>
            <param name="instanceCreator">The instance creator to be used.</param>
            <returns>An new instance of <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create an instance. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElement.CreateElementInstance(System.Type,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Creates an instance of the specified type using the instance creator.
            </summary>
            <param name="targetType">The type to be instantiated</param>
            <param name="instanceCreator">The instance creator.</param>
            <returns>A new instance of the target type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create an instance. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElement.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataElementSetter">
            <summary>
            Allows an application author to set an element with a data reader / data row value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElementSetter.SetData(System.Data.IDataRecord,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the data record value.
            </summary>
            <param name="dataRecord">The data record row to be used.</param>
            <param name="target">The target instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRecord"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElementSetter.SetData(System.Data.DataRow,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets an target element with the data row value.
            </summary>
            <param name="dataRow">The data row to be used.</param>
            <param name="target">The target instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRow"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataElementSetter.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataEntity">
            <summary>
            Definition of a mapping associated with a class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.Entity">
            <summary>
            Gets the entity instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.ParentProperty">
            <summary>
            Gets the property on parent entity if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.ParentEntity">
            <summary>
            Gets the parent entity if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.IsNestedEntity">
            <summary>
            Determines whether the current entity is a nested entity.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.Properties">
            <summary>
            Gets the collection of properties from the type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.Identity">
            <summary>
            Gets the identity that is unique for the entity.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntity.IsIdentified">
            <summary>
            Determine whether or not the underlying object is already signed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntity.BuildIdentity">
            <summary>
            Builds the identity using the current entity instance.
            The entity must be already assigned.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntity.SetParent(System.Object,Xpandables.Net.Data.Elements.IDataProperty)">
            <summary>
            Sets the parent property of the current entity.
            </summary>
            <param name="entity">The parent entity.</param>
            <param name="parentProperty">The property parent.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentProperty"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataEntityBuilder">
            <summary>
            Defines a method to build instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.Build(System.Type,Xpandables.Net.Data.DataOptions)">
            <summary>
            Builds an implementation of <see cref="T:Xpandables.Net.Data.Elements.IDataEntity"/>.
            </summary>
            <param name="type">The type of the class.</param>
            <param name="options"></param>
            <returns>An instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to build an instance. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntityBuilder.Cache">
            <summary>
            Gets the builder cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntityBuilder.PropertyBuilder">
            <summary>
            Gets the property builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntityBuilder.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.BuildKey(System.Type)">
            <summary>
            Builds the key used for caching delegate.
            </summary>
            <param name="type">The type of the entity.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetEntityBuilder(System.Type,Xpandables.Net.Data.DataOptions)">
            <summary>
            Builds the <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> from the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="options"></param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetEntityBuilderDelegate``1(System.Type)">
            <summary>
            Provides with the <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> builder delegate from type.
            </summary>
            <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
            <param name="type">The type of the entity.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.BuildEntityDelegate``1">
            <summary>
            Constructs the delegate for an entity type.
            </summary>
            <typeparam name="TDelegate">The type of delegate.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.Builder(System.Type,Xpandables.Net.Data.DataOptions,Xpandables.Net.Data.Elements.IDataPropertyBuilder,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Builds the <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> with provided arguments.
            </summary>
            <param name="source">The type of entity.</param>
            <param name="options">The execute options.</param>
            <param name="propertyBuilder">the property builder.</param>
            <param name="instanceCreator">The instance creator.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetEntityType(System.Type)">
            <summary>
            Gets the entity from the specified type.
            </summary>
            <param name="source">The type to act on.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetIdentityProperties(System.Type)">
            <summary>
            Gets the identities properties from the specified type.
            </summary>
            <param name="type">The type to act on.</param>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataEntityBuilder">
            <summary>
            Provides with a method to build implementations of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntityBuilder.#ctor(Xpandables.Net.Data.Elements.IDataPropertyBuilder,Xpandables.Net.Creators.IInstanceCreator,Xpandables.Net.Correlation.CorrelationCollection{System.String,System.Lazy{System.Delegate}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntityBuilder"/> class.
            </summary>
            <param name="propertyBuilder">The property builder.</param>
            <param name="instanceCreator">The instance creator.</param>
            <param name="cache">the dedicated cache.</param>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntityBuilder.Cache">
            <summary>
            Gets the builder cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntityBuilder.PropertyBuilder">
            <summary>
            Gets the property builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntityBuilder.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataProperty">
            <summary>
            Defines an entity property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.PropertyName">
            <summary>
            Gets the target property name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.DataName">
            <summary>
            Gets the name of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.DataPrefix">
            <summary>
            Gets the prefix of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.DataFullName">
            <summary>
            Gets the full name of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.IsIdentity">
            <summary>
            Determine whether the property is used for uniquely identify the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.Setter">
            <summary>
            Gets the setter delegate for the property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.Getter">
            <summary>
            Gets the getter delegate for the property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataProperty.Converter">
            <summary>
            Gets the delegate used to convert the data row value to the expected type of property.
            The default behavior just returns the value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataProperty.SetData(System.Data.IDataRecord,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the data record value.
            </summary>
            <param name="dataRecord">The data record row to be used.</param>
            <param name="target">The target instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRecord"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataProperty.SetData(System.Data.DataRow,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets an target element with the data row value.
            </summary>
            <param name="dataRow">The data row to be used.</param>
            <param name="target">The target instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRow"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataProperty.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataPropertyBuilder">
            <summary>
            Defines a method to build instances of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataPropertyBuilder.Build(Xpandables.Net.Data.Elements.DataPropertySource)">
            <summary>
            Builds an instance of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.
            </summary>
            <param name="source">The property info source.</param>
            <returns>An implementation of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.</returns>
            <exception cref="T:System.ArgumentNullException">the <paramref name="source"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataPropertyBuilder">
            <summary>
            Provides with a method to build instances of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.IDataExecutable`1">
            <summary>
            Allows an application author to defines an executable process for <see cref="T:Xpandables.Net.Data.IDataBase"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.IDataExecutable`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutable`1">
            <summary>
            Defines the abstract implementation of <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1"/> class.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutable`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableBuilder`1.#ctor(System.Func{Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken,System.Threading.Tasks.Task{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1"/> implementation.
            </summary>
            <param name="executable">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executable"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableBuilder`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableContext">
            <summary>
            Defines the context of an executable.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.#ctor(Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument,Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableContext"/> class with the argument and component.
            </summary>
            <param name="argument">The context argument.</param>
            <param name="component">The component argument.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="component"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.Argument">
            <summary>
            Gets the argument for the executable.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.Component">
            <summary>
            Gets the component needed by the executable.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument">
            <summary>
            Contains the argument execution for <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument.#ctor(Xpandables.Net.Data.DataOptions,System.String,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument"/>.
            </summary>
            <param name="options">The execution options.</param>
            <param name="commandText">The string command to act with.</param>
            <param name="parameters">The parameters for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument.Options">
            <summary>
            Get the execution options.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument.CommandText">
            <summary>
            Gets the string command : can be stored procedure name, query or other command.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.DataArgument.Parameters">
            <summary>
            Gets the parameters to be used with the <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent">
            <summary>
            Contains component execution for <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent.#ctor(System.Data.Common.DbCommand,System.Data.Common.DbDataAdapter)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent"/>.
            </summary>
            <param name="command">The database command instance.</param>
            <param name="adapter">The database adapter to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="adapter"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent.Command">
            <summary>
            Get the Database command instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent.Adapter">
            <summary>
            Gets the database adapter instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.DataComponent.GetEqualityComponents">
            <summary>
            When implemented in derived class, this method will provide the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1">
            <summary>
             Executes a stored procedure or query and return the result on a collection of specific type.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapper`1.#ctor(Xpandables.Net.Data.Mappers.IDataMapper)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1"/>.
            </summary>
            <param name="dataMapper">the mapper to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapper`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableProcedure">
            <summary>
            Executes a stored procedure and return number or records affected.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableProcedure.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableQuery`1">
            <summary>
            Executes a query and return one record of specific type.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableQuery`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableSingle`1">
            <summary>
             Executes a stored procedure or query and return a single result.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableSingle`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableTable">
            <summary>
             Executes a stored procedure or query and return a data table.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableTable.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableTransaction">
            <summary>
            Executes a transaction and return number or records affected.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableTransaction.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.CancellationToken)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.IDataBase">
            <summary>
            Provides with a method to execute command to a database using an implementation of <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1"/> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``2(Xpandables.Net.Data.DataOptions,System.String,System.Data.CommandType,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Executes a command/query with the specified executable <typeparamref name="TExecutable" /> type
            and returns a result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TExecutable" /> type must implement <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1" /> interface.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TExecutable">The type of the executable. The class must implement <see cref="T:Xpandables.Net.Data.Executables.IDataExecutable`1" /> interface.</typeparam>
            <param name="options">The database options.</param>
            <param name="commandText">The query or store procedure name.</param>
            <param name="commandType">The command type.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.IDataConnectionProvider">
            <summary>
            Allows an application author to return a <see cref="T:Xpandables.Net.Data.DataConnection"/> to be used with <see cref="T:Xpandables.Net.Data.DataBase"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.IDataConnectionProvider.GetDataConnection">
            <summary>
            Returns the expected <see cref="T:Xpandables.Net.Data.DataConnection"/> for the current control flow.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.IDataConverter">
            <summary>
            Allows an application author to return a data mapper property converter.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.IDataConverter.PropertyConverter">
            <summary>
            Gets the data mapper property converter instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.IDataFactoryProvider">
            <summary>
            Allows an application author to return a data provider factory from the specified provider type.
            The default implementation is <see cref="T:Xpandables.Net.Data.DataFactoryProvider"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.IDataFactoryProvider.GetProviderFactory(Xpandables.Net.Data.DataProviderType)">
            <summary>
            Returns an instance of the data provider factory matching the specified provider type.
            </summary>
            <param name="providerType">The provider type to find factory.</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbProviderFactory"/> if found, otherwise an empty or exception.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerType"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.IDataMapper">
            <summary>
            Provides with a method to map a source to entities.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.IDataMapper.Map``1(System.Object,Xpandables.Net.Data.DataOptions)">
            <summary>
            Maps the data source to the specified type.
            </summary>
            <typeparam name="TData">The type of expected result.</typeparam>
            <param name="source">The data source to act on.</param>
            <param name="options">Defines the execution options.</param>
            <returns>An enumerable that contains the result of mapping.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapper.DataMapperRow">
            <summary>
            Gets the data mapper row.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapper.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.DataMapper">
            <summary>
            Implementation of <see cref="T:Xpandables.Net.Data.Mappers.IDataMapper"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.DataMapper.#ctor(Xpandables.Net.Data.Mappers.IDataMapperRow,Xpandables.Net.Correlation.CorrelationCollection{System.String,Xpandables.Net.Data.Elements.IDataEntity})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Mappers.DataMapper"/> class.
            </summary>
            <param name="dataMapperRow">The data mapper for row.</param>
            <param name="entities">The shared entities collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataMapperRow"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapper.DataMapperRow">
            <summary>
            Gets the data mapper row.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapper.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.IDataMapperRow">
            <summary>
            Provides with methods to map a data row or record to an entity.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.IDataMapperRow.Map(System.Object,System.Type,Xpandables.Net.Data.DataOptions)">
            <summary>
            Maps an entity property with the data row or record value.
            </summary>
            <param name="data">The data row or record to be used.</param>
            <param name="targetType">The entity type to act on.</param>
            <param name="options">The execution options to act with.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="data"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapperRow.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapperRow.EntityBuilder">
            <summary>
            Gets the entity builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapperRow.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.DataMapperRow">
            <summary>
            Default implementation of <see cref="T:Xpandables.Net.Data.Mappers.IDataMapperRow"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.DataMapperRow.#ctor(Xpandables.Net.Creators.IInstanceCreator,Xpandables.Net.Data.Elements.IDataEntityBuilder,Xpandables.Net.Correlation.CorrelationCollection{System.String,Xpandables.Net.Data.Elements.IDataEntity})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Mappers.DataMapperRow"/>.
            </summary>
            <param name="instanceCreator"></param>
            <param name="entityBuilder"></param>
            <param name="entities"></param>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapperRow.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapperRow.EntityBuilder">
            <summary>
            Gets the entity builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapperRow.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.Dispatcher">
            <summary>
            The default implementation for <see cref="T:Xpandables.Net.Dispatchers.IDispatcher"/>.
            Implements methods to execute the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> and
            <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/> process dynamically.
            This class can not be inherited.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Dispatchers.Dispatcher"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.HandleCommandAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="command">The command to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.HandleQueryResultAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.HandleQueryAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.IDispatcher">
            <summary>
            Defines a set of methods to automatically handle <see cref="T:Xpandables.Net.Commands.ICommand"/> and <see cref="T:Xpandables.Net.Queries.IQuery`1"/>
            when targeting <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> or/and <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/>.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.HandleQueryResultAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.HandleQueryAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.HandleCommandAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="command">The command to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Disposable">
            <summary>
            The default implementation for <see cref="T:System.IDisposable"/> and <see cref="T:System.IAsyncDisposable"/> interfaces.
            Every derived class should override the <see cref="M:Xpandables.Net.Disposable.Dispose(System.Boolean)"/> or <see cref="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)"/> to match its requirement.
            This is an <see langword="abstract"/> and serializable class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Disposable.Disposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
             <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Default initialization for a <see cref="T:System.Boolean"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.Dispose">
            <summary>
            Public Implementation of Dispose according to .NET Framework Design Guidelines
            callable by consumers.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
            <remarks>
            <para>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
            and prevent finalization code for this object from executing a second time.
            </para>
            <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.DisposeAsync">
            <summary>
            Public Implementation of DisposeAsync according to .NET Framework Design Guidelines
            callable by consumers.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
            <remarks>
            <para>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
            and prevent finalization code for this object from executing a second time.
            </para>
            <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            When overridden in derived classes, this method get called when the instance will be disposed.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)"/> executes in two distinct scenarios.
            <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            When overridden in derived classes, this method get called when the instance will be disposed.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.Disposable.Dispose(System.Boolean)"/> executes in two distinct scenarios.
            <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="T:Xpandables.Net.Entities.Address">
            <summary>
            Defines an <see cref="T:Xpandables.Net.Entities.Address"/> class that holds basic properties.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Address.Street">
            <summary>
            Gets the street name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Address.City">
            <summary>
            Gets the city name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Address.StreetNumber">
            <summary>
            Gets the street number.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Address.Country">
            <summary>
            Gets the country name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Address.ZipCode">
            <summary>
            Gets the zip code.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the string <see cref="T:Xpandables.Net.Entities.Address"/> using the specified format and provider.
            The format will received address properties in the following order : <see cref="P:Xpandables.Net.Entities.Address.Street"/>, <see cref="P:Xpandables.Net.Entities.Address.StreetNumber"/>, <see cref="P:Xpandables.Net.Entities.Address.City"/>, <see cref="P:Xpandables.Net.Entities.Address.ZipCode"/>
            and <see cref="P:Xpandables.Net.Entities.Address.Country"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Entities.Address"/> with specified values.
            </summary>
            <param name="street">The street address.</param>
            <param name="city">The city address.</param>
            <param name="streetNumber">The street number address.</param>
            <param name="country">The country address.</param>
            <param name="zipCode">The zip address.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="street"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="city"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="country"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="zipCode"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.Default">
            <summary>
            Creates a default <see cref="T:Xpandables.Net.Entities.Address"/> instance with NO Value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.EditStreet(System.String)">
            <summary>
            Updates the street name and return the current instance.
            </summary>
            <param name="street">The new street name.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.EditCity(System.String)">
            <summary>
            Updates the city name and return the current instance.        
            </summary>
            <param name="city">The new city name.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.EditStreetNumber(System.String)">
            <summary>
            Updates the street number and return the current instance.
            </summary>
            <param name="streetNumber">The street number.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.EditCountry(System.String)">
            <summary>
            Updates the country name and return the current instance.
            </summary>
            <param name="country">The new country name.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.EditZipCode(System.String)">
            <summary>
            Updates the zip code name and return the current instance.
            </summary>
            <param name="zipCode">The new zip code</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Entities.Address"/> class.
            </summary>
            <param name="street">The street address.</param>
            <param name="city">The city address.</param>
            <param name="streetNumber">The street number address.</param>
            <param name="country">The country address.</param>
            <param name="zipCode">The zip address.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="street"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="city"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="country"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="zipCode"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Address.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Entities.Entity">
            <summary>
            The domain object base implementation that provides an identifier and a key generator for derived class.
            This is an <see langword="abstract"/>class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.#ctor">
            <summary>
            Initializes the Id key.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Entity.Id">
            <summary>
            Gets the domain object identity.
            The value comes from <see cref="M:Xpandables.Net.Entities.Entity.KeyGenerator"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.IsNew">
            <summary>
            Determines whether or not the underlying instance is new.
            The default implementation just compare the <see cref="P:Xpandables.Net.Entities.Entity.Id"/> value to its default one.
            You must override this property in order to match your request.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Entity.IsDeleted">
            <summary>
            Determines whether or not the underlying instance is deleted.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Entity.IsActive">
            <summary>
            Determines whether or not the underlying instance is active.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Entity.CreatedOn">
            <summary>
            Gets the creation date of the underlying instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Entity.UpdatedOn">
            <summary>
            Gets the last update date of the underlying instance if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Entity.DeletedOn">
            <summary>
            Gets the deleted date of the underlying instance if exist.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.Deactivate">
            <summary>
            Deactivates the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.Delete">
            <summary>
            Deletes the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.Activate">
            <summary>
            Activates the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.SetCreationDate(System.DateTime)">
            <summary>
            Sets the creation date time for underlying instance.
            </summary>
            <param name="dateTime">the creation date.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.SetUpdateDate(System.DateTime)">
            <summary>
            Sets the last update date time for underlying instance.
            </summary>
            <param name="dateTime">the last updated date.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.SetDeleteDate(System.DateTime)">
            <summary>
            Sets the deletion date time for underlying instance.
            </summary>
            <param name="dateTime">the deletion date.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.KeyGenerator">
            <summary>
            Returns the unique signature of string type for an instance.
            This signature value will be used as identifier for the underlying instance.
            <para>When overridden in the derived class, it will set or get the concrete identity for the domain object.</para>
            </summary>
            <returns>A string value as identifier.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.op_Equality(Xpandables.Net.Entities.Entity,Xpandables.Net.Entities.Entity)">
            <summary>
            Applies equal operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.op_Inequality(Xpandables.Net.Entities.Entity,Xpandables.Net.Entities.Entity)">
            <summary>
            Applies non equal operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Entity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current entity.</returns>
        </member>
        <member name="T:Xpandables.Net.Entities.Gender">
            <summary>
            Enumeration of gender.  This class can be extended.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Gender.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Entities.Gender"/> class.
            </summary>
            <param name="value">The value of the gender.</param>
            <param name="displayName">The name of the gender.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Gender.IsMan">
            <summary>
            Determines whether the current instance is a <see cref="P:Xpandables.Net.Entities.Gender.Man"/>.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Gender.IsWoman">
            <summary>
            Determines whether the current instance is a <see cref="P:Xpandables.Net.Entities.Gender.Woman"/>.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Gender.IsUndefinied">
            <summary>
            Determines whether the current instance is a <see cref="P:Xpandables.Net.Entities.Gender.Undefined"/>.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="P:Xpandables.Net.Entities.Gender.Undefined">
            <summary>
            The undefined gender.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Gender.Man">
            <summary>
            The Man gender.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Gender.Woman">
            <summary>
            The Woman gender.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Entities.MultiFactorType">
            <summary>
            Enumeration of multi factor authentication. This class can be extended.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.MultiFactorType.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Entities.MultiFactorType"/> class.
            </summary>
            <param name="value">The value of the person type.</param>
            <param name="displayName">The name of the person type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Entities.MultiFactorType.MFA_SMS">
            <summary>
            MultiFactor authentication using SMS.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.MultiFactorType.MFA_TOTP">
            <summary>
            MultiFactor authentication using a Time-based One-time Password Algorithm.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Entities.Name">
            <summary>
            Defines the <see cref="T:Xpandables.Net.Entities.Name"/> class that holds a <see cref="P:Xpandables.Net.Entities.Name.FirstName"/> and a <see cref="P:Xpandables.Net.Entities.Name.LastName"/> properties.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Name.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Entities.Name"/> with values.
            </summary>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="firstName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="lastName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Name.Create(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Entities.Name"/> with values provided.
            </summary>
            <param name="firstName">The first name.</param>
            <param name="lastName">The last name.</param>
            <returns>An instance of <see cref="T:Xpandables.Net.Entities.Name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="firstName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="lastName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Name.Default">
            <summary>
            Creates a default instance of <see cref="T:Xpandables.Net.Entities.Name"/> with NO value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Name.Deconstruct(System.String@,System.String@)">
            <summary>
            Provides with deconstruction for <see cref="T:Xpandables.Net.Entities.Name"/>.
            </summary>
            <param name="firstName">The output first name.</param>
            <param name="lastName">The output last name.</param>
        </member>
        <member name="P:Xpandables.Net.Entities.Name.LastName">
            <summary>
            Gets the last name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Name.FirstName">
            <summary>
            Gets the first name.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Name.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Name.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Entities.PatternRequiredAttribute">
            <summary>
            <see cref="T:Xpandables.Net.Entities.PatternRequiredAttribute"/> base class for validating value against pattern using regular expression.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.PatternRequiredAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current pattern validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.</returns>
            <exception cref="T:System.InvalidOperationException">The current attribute is malformed.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.PatternRequiredAttribute.GetRegexPattern">
            <summary>
            Returns the Regex pattern the value must match.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Entities.PersonType">
            <summary>
            Enumeration of person type. This class can be extended.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.PersonType.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Entities.PersonType"/> class.
            </summary>
            <param name="value">The value of the person type.</param>
            <param name="displayName">The name of the person type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.PersonType.IsNatural">
            <summary>
            Determines whether the current instance is a <see cref="P:Xpandables.Net.Entities.PersonType.Natural"/>.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Entities.PersonType.IsLegal">
            <summary>
            Determines whether the current instance is a <see cref="P:Xpandables.Net.Entities.PersonType.Legal"/>.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="P:Xpandables.Net.Entities.PersonType.Natural">
            <summary>
            The natural person type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.PersonType.Legal">
            <summary>
            The legal person type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Entities.Picture">
            <summary>
            Defines the <see cref="T:Xpandables.Net.Entities.Picture"/> class that holds properties for an image.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Picture.#ctor(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance <see cref="T:Xpandables.Net.Entities.Picture"/> with all properties.
            </summary>
            <param name="title">The picture title.</param>
            <param name="content">The picture content.</param>
            <param name="height">The picture height.</param>
            <param name="width">The picture width.</param>
            <param name="extension">The picture extension.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="title"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="content"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="height"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="width"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="extension"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Picture.Default">
            <summary>
            Creates a <see cref="T:Xpandables.Net.Entities.Picture"/> with the default image content.
            </summary>
            <returns>A new instance of <see cref="T:Xpandables.Net.Entities.Picture"/> with default image content.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Picture.Create(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new picture with values.
            </summary>
            <param name="title">The picture title.</param>
            <param name="content">The picture content.</param>
            <param name="height">The picture height.</param>
            <param name="width">The picture width.</param>
            <param name="extension">The picture extension.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="title"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="content"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="height"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="width"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="extension"/> is null.</exception>
            <returns>A new instance of <see cref="T:Xpandables.Net.Entities.Picture"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Picture.Clear">
            <summary>
            Clears the content of the picture.
            </summary>
            <returns>The current instance without content.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Picture.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.Entities.Picture.ToString">
            <summary>
            Returns the UTF8 encoded string of the image.
            </summary>
            <returns>An UTF8 string.</returns>
        </member>
        <member name="P:Xpandables.Net.Entities.Picture.Title">
            <summary>
            Gets the picture title.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Picture.Content">
            <summary>
            Gets the picture byte content.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Picture.Height">
            <summary>
            Gets the height, in pixels, of this picture.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Picture.Width">
            <summary>
            Gets the width, in pixels, of this picture.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Picture.Extension">
            <summary>
            Gets the file format of this picture.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Entities.RefreshToken">
            <summary>
            Contains information for refreshing a token.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.RefreshToken.Value">
            <summary>
            Gets the refresh token value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.RefreshToken.ExpiresOn">
            <summary>
            Gets the expiry date.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.RefreshToken.IsExpired(System.DateTime)">
            <summary>
            Determines whether the current instance is expired in comparison (greater than) to the specified one.
            </summary>
            <param name="compare">The date time to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.RefreshToken.IsMatch(System.String)">
            <summary>
            Determines whether the current instance matches the specified one.
            </summary>
            <param name="compare">The value to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Entities.RefreshToken.Create(System.String,System.DateTime)">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Entities.RefreshToken"/> with specified values.
            </summary>
            <param name="value">The refresh token value.</param>
            <param name="expiresOn">The expiry date.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.RefreshToken.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Entities.Token">
            <summary>
            Contains a token value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entities.Token.Value">
            <summary>
            Gets the token value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entities.Token.Create(System.String)">
            <summary>
            Creates an instance of <see cref="T:Xpandables.Net.Entities.Token"/> with the specified value.
            </summary>
            <param name="value">The token value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Entities.Token.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1">
            <summary>
            This class allows the application author to add persistence support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorPersistence"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and executes the
            the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> after the main one in the same control flow only
            if there is no exception. You can set the <see cref="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler"/> with the
            <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> command, in order to manage
            the exception.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1.#ctor(Xpandables.Net.EntityFramework.IDataContext,Xpandables.Net.Commands.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1"/> class.
            </summary>
            <param name="dataContext">The data context to act on.</param>
            <param name="decoratee">The decorated command handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContext">
            <summary>
            This is the <see langword="abstract"/> db context class that inherits from <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>
            and implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.SetOf``1">
            <summary>
            Provides with a query-able instance for <typeparamref name="T" />.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1" />.</returns>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.SetOf``1(Xpandables.Net.Expressions.IQueryExpression{``0})">
            <summary>
            Provides with a query-able instance for <typeparamref name="T"/> from an expression.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="queryExpression">The expression to act with.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="queryExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.GetEntityByIdAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the entity matching the specified identifier or <see langword="null"/> if not found.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="identifier">the entity identifier to search for.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>An entity of type <typeparamref name="T"/> if found otherwise <see langword="null"/>  .</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identifier"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.AddEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Adds a domain object to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.DataContext.Persist"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entity">The domain object to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entity"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.AddEntityRangeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Adds a collection of domain objects to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist" /> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entities">The domain objects collection to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities" /> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.DeleteEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the domain object matching the specified entity that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.DataContext.Persist"/>
            is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="deletedEntity">The entity to be deleted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="deletedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.DeleteEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes the domain objects matching the predicate that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist" />
            is called. You can use a third party library with <see langword="IDataContext.SetOf{T}" /> for performance.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.UpdateEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Updates the domain object matching the specify entity.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="updatedEntity">the updated entity.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.UpdateEntityRangeAsync``2(System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the collection of entities.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="updatedEntities">Contains the collection of updated values.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntities" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.UpdateEntityAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the predicate by using the updater.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="updater">The delegate to be used for updating domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updater" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.Persist">
            <summary>
            Persists all pending domain objects to the data storage.
            </summary>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.PersistAsync(System.Threading.CancellationToken)">
            <summary>
            Persists all pending domain objects to the data storage.
            </summary>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous persist all operation.</returns>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContext.PersistenceExceptionHandler">
            <summary>
            May contain a delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null value.
            If there's not delegate, the handled exception will be re-thrown normally.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})">
            <summary>
            Allows the application author to set or unset the delegate that get called on persistence exception.
            To disable the delegate, just set the handler to <see langword="null" />.
            </summary>
            <param name="persistenceExceptionHandler">The optional delegate instance.</param>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.EnumerationConverter``1">
            <summary>
            Returns a generic <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2"/> for <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            To be used with
            <see cref="M:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1.HasConversion(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)"/>.
            </summary>
            <typeparam name="T">Type of enumeration.</typeparam>
            <returns>A value converter matching for <typeparamref name="T"/> type.</returns>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.EntityFramework.DataContext"/> class
            using the specified options. The <see langword="DataContext.OnConfiguring(DbContextOptionsBuilder)"/>
            method will still be called to allow further configuration of the options.
            </summary>
            <param name="contextOptions">The options for this context.</param>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextDesignTimeFactory`3">
            <summary>
            The <see cref="T:Xpandables.Net.EntityFramework.DataContextDesignTimeFactory`3"/> helper class.
            </summary>
            <typeparam name="TDataContext">The type of data context to build.</typeparam>
            <typeparam name="TDataContextSettings">The type of data context settings to be used.</typeparam>
            <typeparam name="TDataContextProvider">The data context provider.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextDesignTimeFactory`3.CreateDbContext(System.String[])">
            <summary>
            Creates a new instance of a derived context.
            </summary>
            <param name="args"> Arguments provided by the design-time service.</param>
            <returns>An instance of TContext.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextHelpers">
            <summary>
             Provides with methods used to extend <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextHelpers.UseEnumerationValueConverterForType``1(Microsoft.EntityFrameworkCore.ModelBuilder,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter{``0,System.String})">
            <summary>
            Specifies the converter to be used for the generic property type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The generic target <typeparamref name="T"/> to act on.</typeparam>
            <param name="modelBuilder">The current model builder instance.</param>
            <param name="valueConverter">The converter to be applied.</param>
            <returns>The model builder with converter application.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="modelBuilder"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueConverter"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextHelpers.UseEnumerationValueConverterForType(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
            Specifies the converter to be used for the property type (<see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>).
            </summary>
            <param name="modelBuilder">The current model builder instance.</param>
            <param name="type">The target type to act on.</param>
            <param name="valueConverter">The converter to be applied.</param>
            <returns>The model builder with converter application.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="modelBuilder"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="valueConverter"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextOptions">
            <summary>
            Defines options to configure data context.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextOptions.UseSeederBehavior``2">
            <summary>
            Enables seeder for the data context that is decorated with <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/>.
            </summary>
            <typeparam name="TDataContextSeeder">The type that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/>.</typeparam>
            <typeparam name="TDataContext">The type of data context.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextOptions.UsePersistenceExceptionHandler(System.Func{System.Exception,System.Exception})">
            <summary>
            Enables the delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null.
            </summary>
            <param name="persistenceExceptionHandler">The persistence exception handler delegate instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="persistenceExceptionHandler"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextProvider`2">
            <summary>
            The <see cref="T:Xpandables.Net.EntityFramework.DataContextProvider`2"/> helper class.
            </summary>
            <typeparam name="TDataContext">The type of data context to build.</typeparam>
            <typeparam name="TDataContextSettings">The type of data context settings to be used.</typeparam>
        </member>
        <member name="F:Xpandables.Net.EntityFramework.DataContextProvider`2.DataContextSettings">
            <summary>
            Contains the <see cref="F:Xpandables.Net.EntityFramework.DataContextProvider`2.DataContextSettings"/> instance.
            </summary>
        </member>
        <member name="F:Xpandables.Net.EntityFramework.DataContextProvider`2.InstanceCreator">
            <summary>
            Contains the <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextProvider`2.#ctor(Microsoft.Extensions.Options.IOptions{`1},Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextProvider`2"/>.
            </summary>
            <param name="dataContextSettings">The data context settings.</param>
            <param name="instanceCreator">The instance creator.</param>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextProvider`2.GetDataContext">
            <summary>
            Returns an instance that contains the ambient data context according to the environment.
            </summary>
            <returns>An instance of <see cref="T:Xpandables.Net.EntityFramework.IDataContext" />.</returns>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextProvider`2.GetDataContextOptions">
            <summary>
            When implemented in derived class, provides with the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> for the target context.
            </summary>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1"/> for the target context.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextProviderBuilder">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/>
            interface without dedicated class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextProviderBuilder.#ctor(System.Func{Xpandables.Net.EntityFramework.IDataContext})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextProviderBuilder"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/> implementation.
            </summary>
            <param name="provider">The delegate to be used when the method will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextProviderBuilder.GetDataContext">
            <summary>
            Returns an instance that contains the ambient data context according to the environment.
            </summary>
            <returns>An instance of context that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext" />.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1">
            <summary>
            This class allows the application author to add seed support to data context.
            The target command should implement the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/> interface in order to activate the behavior.
            The class decorates the target <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/> with an implementation of
            <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/> that will be called before the data context is returned.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1.#ctor(Xpandables.Net.EntityFramework.IDataContextProvider,Xpandables.Net.EntityFramework.IDataContextSeeder{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1"/>.
            </summary>
            <param name="datacontextProvider">The decorated data context provider.</param>
            <param name="dataContextSeeder">The data context seeder.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="datacontextProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContextSeeder"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextSettings">
            <summary>
            Provides with the base option class for <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> settings.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextSettings.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextSettings"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextSettings"/> with properties.
            </summary>
            <param name="ensuredDeletedBefore">Determine whether or not the database for the context will be deleted before applying migration.</param>
            <param name="useInMemory">Determine whether or not the database is uses in memory</param>
            <param name="addSamplesData">Determine whether or not the database will be filled with samples data.</param>
            <param name="applyMigrations">Determine whether or not the database the migrations must be applied.</param>
            <param name="connectionString">The database connection string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.EnsuredDeletedBefore">
            <summary>
            Ensures that the database for the context will be deleted before applying migration.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.ApplyMigrations">
            <summary>
            Ensures that migrations will be applied to the database for the generated context.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.UseInMemory">
            <summary>
            Ensures that the database is uses in memory.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.AddSamplesData">
            <summary>
            Allows the database to be filled with samples data.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.ConnectionString">
            <summary>
            The database connection string.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IBehaviorPersistence">
            <summary>
            A marker interface that allows the handler class implementation to use persistence data across the control flow.
            The behavior makes use of an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> in the handler class implementation
            to persist data at the end of the control flow only if there is no exception.
            In order to control the behavior, you can add the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> to the command/query class and reference
            the <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> in the handler class implementation, to defines actions to be applied after the control flow with
            <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/> on success and <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/> on exception.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method,
            register the data context using and extension method.
            <para></para>
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2"/>.
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IBehaviorSeed">
            <summary>
            A marker interface that allows the class that implements the <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> to be seeded before use.
            You need to register the expected behavior using the appropriate extension method
            and provide an implementation for <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/>.
            <para></para>
            The class implementation will be decorated with the <see cref="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContext">
            <summary>
            Allows an application author to manage domain objects using EntityFrameworkCore.
            When argument is null, an <see cref="T:System.ArgumentNullException"/> will be thrown.
            When a value is not found, a default value of the expected type should be returned.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.SetOf``1">
            <summary>
            Provides with a query-able instance for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.SetOf``1(Xpandables.Net.Expressions.IQueryExpression{``0})">
            <summary>
            Provides with a query-able instance for <typeparamref name="T"/> from an expression.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="queryExpression">The expression to act with.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="queryExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.GetEntityByIdAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the entity matching the specified identifier or <see langword="null"/> if not found.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="identifier">the entity identifier to search for.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>An entity of type <typeparamref name="T"/> if found otherwise <see langword="null"/>  .</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identifier"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.AddEntityRangeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Adds a collection of domain objects to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entities">The domain objects collection to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.AddEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Adds a domain object to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entity">The domain object to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entity"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.DeleteEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the domain object matching the specified entity that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/>
            is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="deletedEntity">The entity to be deleted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="deletedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.DeleteEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes the domain objects matching the predicate that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/>
            is called. You can use a third party library with <see langword="SetOf{T}"/> for performance.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Updates the domain object matching the specify entity.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="updatedEntity">the updated entity.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityRangeAsync``2(System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the collection of entities.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="updatedEntities">Contains the collection of updated values.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntities"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the predicate by using the updater.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="updater">The delegate to be used for updating domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updater"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.Persist">
            <summary>
            Persists all pending domain objects to the data storage.
            You can use the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> to manage exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)">
            <summary>
            Persists all pending domain objects to the data storage.
            You can use the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> to manage exception.
            </summary>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous persist all operation.</returns>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler">
            <summary>
            May contain a delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null exception.
            If there's not delegate, the handled exception will be re-thrown normally.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})">
            <summary>
            Allows the application author to set or unset the delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null.
            To disable the delegate, just set the handler to <see langword="null"/>.
            </summary>
            <param name="persistenceExceptionHandler">The optional delegate instance.</param>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContextProvider">
            <summary>
            Provides with a method to return the ambient data context instance.
            You need to register the class implementation to the services collection using and extension method.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContextProvider.GetDataContext">
            <summary>
            Returns an instance that contains the ambient data context according to the environment.
            </summary>
            <returns>An instance of context that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext" />.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1">
            <summary>
            Allows an application author to dynamically seed a data context before it's retrieved.
            This is useful when you need a data context not to be empty.
            The target data context should be decorated with the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/> interface and
            the class seeder implementation should be
            registered to services collections with the extension method <see langword="AddXDataContext{TDataContextAccessor}"/>
            using options.
            </summary>
            <typeparam name="TDataContext">The type of the data context that
            implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/>.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContextSeeder`1.Seed(`0)">
            <summary>
            Seeds the specified data context as you wish.
            Warning : Do not throw exception from this method unless it's absolutely necessary.
            This method get called by the <see cref="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1"/>.
            </summary>
            <param name="dataContext">The data context instance to act on.</param>
            <returns>A seeded data context.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2">
            <summary>
            This class allows the application author to add persistence support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorPersistence"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and executes the
            the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> after the main one in the same control flow only
            if there is no exception. You can set the <see cref="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler"/> with the
            <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> query, in order to manage
            the exception.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2.#ctor(Xpandables.Net.EntityFramework.IDataContext,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2"/>.
            </summary>
            <param name="dataContext">The data context instance.</param>
            <param name="decoratee">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContext"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Enumerations.EnumerationType">
            <summary>
            Helper class used to implement enumeration. You can use the <see cref="T:Xpandables.Net.Enumerations.EnumerationTypeConverter"/> for conversion.
            This is an <see langword="abstract"/> and serializable class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Enumerations.EnumerationType.Value">
            <summary>
            Gets the value of the enumeration.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Enumerations.EnumerationType.DisplayName">
            <summary>
            Gets the name of the enumeration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetAll``1">
            <summary>
            Gets the list of all enumeration found in the current instance.
            If you want to return all enumerations from base classes, use the non-generic method.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <returns>List of enumerations.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetAll(System.Type)">
            <summary>
            Gets the list of all enumeration found in the instance of the specified type and base classes.
            The type must derived from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            </summary>
            <param name="enumerationType">Type of enumeration.</param>
            <returns>List of enumerations.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerationType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="enumerationType"/> must derive from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            </exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromDisplayName``1(System.String)">
            <summary>
            Gets the enumeration matching the specified display name.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <param name="displayName">The display name to find.</param>
            <returns>An instance of <typeparamref name="TEnumeration"/> type or default value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromDisplayName(System.Type,System.String)">
            <summary>
            Gets the enumeration matching the specified type and display name.
            </summary>
            <param name="enumerationType">Type of derived class enumeration.</param>
            <param name="displayName">The display name to find.</param>
            <returns>An instance of <paramref name="enumerationType"/> type or default value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerationType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromValue``1(System.Int32)">
            <summary>
            Gets the enumeration matching the specified value.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <param name="value">Value to find.</param>
            <returns>An instance of <typeparamref name="TEnumeration"/> type or default value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string representation of a enumeration to its <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> equivalent. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnumeration">The target enumeration type to convert to.</typeparam>
            <param name="displayName">A string containing a enumeration to convert.</param>
            <param name="enumeration">When this method returns, contains the <typeparamref name="TEnumeration"/> value equivalent
            of the string contained in <paramref name="displayName"/>, if the conversion succeeded.</param>
            <returns><see langword="true"/> if <paramref name="displayName"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.TryParse``1(System.Int32,``0@)">
            <summary>
            Converts the integer representation of a enumeration to its <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> equivalent. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnumeration">The target enumeration type to convert to.</typeparam>
            <param name="value">An integer of an enumeration to convert.</param>
            <param name="enumeration">When this method returns, contains the <typeparamref name="TEnumeration"/> value equivalent
            of the integer contained in <paramref name="value"/>, if the conversion succeeded.</param>
            <returns><see langword="true"/> if <paramref name="value"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromValue(System.Type,System.Int32)">
            <summary>
            Gets the enumeration matching the specified type and value.
            </summary>
            <param name="enumerationType">Type of derived class enumeration.</param>
            <param name="value">Value to find.</param>
            <returns>An instance of <paramref name="enumerationType"/> type or default value.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="value"/> does not exist.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.AbsoluteDifference(Xpandables.Net.Enumerations.EnumerationType,Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the absolute difference of both enumerations.
            </summary>
            <param name="first">The first instance to act on.</param>
            <param name="second">The second instance to act on.</param>
            <returns>An integer that represents an absolute comparison value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="first"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetDescriptionAttributeValue">
            <summary>
            Returns the description string attribute of the current enumeration.
            if not found, returns the enumeration as string.
            </summary>
            <returns>The description string. If not found, returns the enumeration as string.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.CompareTo(Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="other">The other object for comparison.</param>
            <returns>An integer value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.Equals(Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="other">The other object for comparison..</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetHashCode">
            <summary>
            Returns the hash-code of the current type.
            </summary>
            <returns>hash-code.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.Equals(System.Object)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="obj">The other object for comparison.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> value matching the <see cref="P:Xpandables.Net.Enumerations.EnumerationType.DisplayName"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Enumerations.EnumerationTypeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EnumConverter"></see> class for the given type.</summary>
            <param name="type">A <see cref="T:System.Type"></see> that represents the type of enumeration to associate
            with this enumeration converter.</param>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object in the given source type
            to an enumeration object using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified value object to an enumeration object.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified destination type.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionComparer">
            <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionHelpers">
            <summary>
            Provides with extension methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionHelpers.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="TSource">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionHelpers.CreateAccessorFor``2(System.String)">
            <summary>
            Returns a property or field access-or expression for the specified name that matches a property or a field in the model.
            </summary>
            <typeparam name="TSource">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyOrFieldName">The name of the property or field.</param>
            <returns>An expression tree.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyOrFieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No property or field named propertyOrFieldName is
            defined in expression.Type or its base types.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.IQueryExpression`1">
            <summary>
            Defines a methods that returns an <see cref="T:System.Linq.Expressions.Expression`1"/> that can be used to query
            the <typeparamref name="TSource"/> instance.
            This can significantly improve the use of the command/query pattern, allowing class conversion to an expression tree.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Expressions.IQueryExpression`2">
            <summary>
            Defines a methods that returns an <see cref="T:System.Linq.Expressions.Expression`1"/> that can be used to query
            the <typeparamref name="TSource"/> instance.
            This can significantly improve the use of the command/query pattern, allowing class conversion to an expression tree.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.IQueryExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpression`2">
            <summary>
            
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.GetHashCode">
            <summary>
            Returns the unique hash code for the current instance.
            </summary>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.Equals(System.Object)">
            <summary>
            Determines whether the current instance equals the specified one.
            </summary>
            <param name="obj">The object to be compared to.</param>
            <returns><see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpression`1">
            <summary>
            This class is a helper that provides a default implementation for <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/>.
            You must override the <see cref="M:Xpandables.Net.Expressions.QueryExpression`1.BuildExpression"/> method in order to provide a custom behavior.
            </summary>
            <typeparam name="TSource">The data source type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`1.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionAnd`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "And" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionAnd`2"/> class with the expressions for composition.
            </summary>
            <param name="left">The executable validator for the left side.</param>
            <param name="right">The executable validator for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionBuilder`2">
            <summary>
            Provides the generic class to build <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> instance.
            </summary>
            <typeparam name="TSource">the target instance type.</typeparam>
            <typeparam name="TResult">The property type to be used for result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionBuilder`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Returns  new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionBuilder`2"/> class with the specified expression.
            </summary>
            <param name="expression">The expression to be used by the instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> can not be null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionBuilder`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionFactory`1">
            <summary>
            Provides the query expression factory that contains methods to create generic query expressions.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Create``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> with the specified expression.
            </summary>
            <typeparam name="TSource">The data type source.</typeparam>
            <param name="expression">The expression to be used by the instance.</param>
            <returns>an new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.And``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the And form of two expressions.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="left">The expression value  for left side.</param>
            <param name="right">The expression value for right side.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Or``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the Or form of two expressions.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="left">The expression value  for left side.</param>
            <param name="right">The expression value for right side.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Not``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the Not form of an expression.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="expression">The expression value.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/>is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionHelpers">
            <summary>
            Provides extensions methods for <see cref="T:Xpandables.Net.Expressions.IQueryExpression`2"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.And``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the AND operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Or``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the OR operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Not``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the NOT operator to the query expression and returns a new one.
            </summary>
            <param name="queryExpression">The expression left side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionNot`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "Not" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionNot`2"/> class with the expression.
            </summary>
            <param name="expression">The executable validator for the left side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionOr`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "Or" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionOr`2"/> class with the expressions for composition.
            </summary>
            <param name="left">The executable validator for the left side.</param>
            <param name="right">The executable validator for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Helpers.AsynchronousHelpers">
            <summary>
            Provides with methods used to execute asynchronous operation synchronously.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Helpers.AsynchronousHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="func">The asynchronous function to execute synchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.AsynchronousHelpers.RunSync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="task">The asynchronous function to execute synchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.AsynchronousHelpers.RunSync(System.Threading.Tasks.Task)">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <param name="task">The operation to be synchronously executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Helpers.EnumerableHelpers">
            <summary>
            Provides with extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.SingleToEnumerable``1(``0)">
            <summary>
            Converts a single object to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">An instance of the type.</param>
            <returns>An enumerable of the current instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="source"/> is an enumerable.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a read only collection.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">An instance of the collection to be converted.</param>
            <returns>A new <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the value from the producer in a singleton
            collection if the sequence is empty.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="sourceProducer">The delegate that produces the value.</param>
            <returns>A collection object that contains the default value for the TSource type if source is empty;
            otherwise, sourceProducer value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceProducer"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates the collection source and performs the specified action on each element.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="action">Action to invoke for each element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates the collection source and performs the specified action on each element.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="action">Action to invoke for each element.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of the specified sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <returns>The first element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <returns>The first element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.LastOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last elements of a sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <returns>The last element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.LastOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <returns>The last element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.EnumerableHelpers.ElementAtOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at the specified index in a sequence or an empty optional if the index is out of range
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Helpers.StringHelpers">
            <summary>
            Provides with methods to extend use of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.StringFormat(System.String,System.Object[])">
            <summary>
            Replaces the argument object into the current text equivalent <see cref="T:System.String"/>
            using the default <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The format string.</param>
            <param name="args">The object to be formatted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null or <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The format is invalid.</exception>
            <returns>value <see cref="T:System.String"/> filled with <paramref name="args"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.StringFormat(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Replaces the argument object into the current text equivalent <see cref="T:System.String"/> using the specified culture.
            </summary>
            <param name="value">The format string.</param>
            <param name="cultureInfo">CultureInfo to be used.</param>
            <param name="args">The object to be formatted.</param>
            <returns>value <see cref="T:System.String"/> filled with <paramref name="args"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cultureInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The format is invalid.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates all the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified string separator between each element.
            </summary>
            <typeparam name="TSource">The generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="separator">The string to use as a separator.
            Separator is included in the returned string only if value has more than one element.</param>
            <returns>A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns String.Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Concatenates all the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified char separator between each element.
            </summary>
            <typeparam name="TSource">The generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="separator">The string to use as a separator.
            Separator is included in the returned string only if value has more than one element.</param>
            <returns>A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns String.Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.TryToValueType``1(System.String,``0@,System.Exception@)">
            <summary>
            Tries to convert a string to the specified value type.
            </summary>
            <typeparam name="TResult">Type source.</typeparam>
            <param name="value">The string value.</param>
            <param name="result">The string value converted to the specified value type.</param>
            <param name="valueTypeException">The handled exception during conversion.</param>
            <returns>Returns <see langword="true"/> if conversion OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.TryToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@,System.Exception@,System.String[])">
            <summary>
            Converts string date to <see cref="T:System.DateTime"/> type.
            If error, returns an exception.
            </summary>
            <param name="source">A string containing a date and time to convert.</param>
            <param name="provider">An object that supplies culture-specific format information about string.</param>
            <param name="styles"> A bitwise combination of enumeration values that indicates the permitted format
            of string. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="result">An object that is equivalent to the date and time contained in <paramref name="source"/> as specified
            by formats, provider, and style.</param>
            <param name="dateTimeException">The handled exception during conversion.</param>
            <param name="formats">An array of allowable formats of strings.</param>
            <returns>Returns <see langword="true"/> if conversion OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="provider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.StringHelpers.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Appends the given query keys and values to the Uri.
            </summary>
            <param name="path">The base Uri.</param>
            <param name="queryString">A collection of name value query pairs to append.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="queryString"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Helpers.TypeHelpers">
            <summary>
            Provides with methods to extend use of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.GetDescription``1(``0)">
            <summary>
            Returns the description string attribute of the current <see cref="T:System.Enum"/> value type.
            if not found, returns the value as string.
            </summary>
            <typeparam name="TEnum">Type of enumeration.</typeparam>
            <param name="value">Enumeration field value to act on.</param>
            <returns>The description string. If not found, returns the value as string.</returns>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsOverridden(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is overridden in its current implementation.
            The method info should come from the <see cref="M:System.Object.GetType"/>.
            </summary>
            <param name="methodInfo">The method info to act on.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsAwaitable(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="methodInfo">The method info to act on.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsNullable(System.Type)">
            <summary>
            Determines whether the current type is a null-able type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsEnumerable(System.Type)">
            <summary>
            Determines whether the current type implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.GetNameWithoutGenericArity(System.Type)">
            <summary>
            Returns the name of the type without the generic arity '`'.
            Useful for generic types.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>The name of the type without the generic arity '`'.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryLoadAssembly(System.Reflection.AssemblyName,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tries to load assembly from its assembly name.
            </summary>
            <param name="assemblyName">The assembly name to act with.</param>
            <param name="loadedAssembly">The loaded assembly if succeeded.</param>
            <param name="assemblyException">The handled exception during assembly loading if fails.</param>
            <returns>Returns <see langword="true"/> if loading OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryTypeInvokeMember(System.Type,System.Object@,System.Exception@,System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Tries to invoke the specified member, using the specified binding constraints and matching
            the specified argument list.
            </summary>
            <param name="type"></param>
            <param name="result">An object representing the return value of the invoked member
            or an empty result with handled exception.</param>
            <param name="invokeException">The handled invoke exception.</param>
            <param name="memberName">The string containing the name of the constructor, method, property, or field
            member to invoke. /// -or- /// An empty string (&quot;&quot;) to invoke the default
            member. /// -or- /// For IDispatch members, a string representing the DispID,
            for example &quot;[DispID=3]&quot;.</param>
            <param name="invokeAttr">A bit-mask comprised of one or more System.Reflection.BindingFlags that specify
            how the search is conducted. The access can be one of the BindingFlags such as
            Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup
            need not be specified. If the type of lookup is omitted, BindingFlags.Public
            | BindingFlags.Instance | BindingFlags.Static are used.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve
            selection of an overloaded method, coercion of argument types, and invocation
            of a member through reflection. /// -or- /// A null reference (Nothing in Visual
            Basic), to use the System.Type.DefaultBinder. Note that explicitly defining a
            System.Reflection.Binder object may be required for successfully invoking method
            overloads with variable arguments.</param>
            <param name="target">The object on which to invoke the specified member.</param>
            <param name="args">An array containing the arguments to pass to the member to invoke.</param>
            <returns>Returns <see langword="true"/> if invoke OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryMakeGenericType(System.Type,System.Type@,System.Exception@,System.Type[])">
            <summary>
            Tries to substitute the elements of an array of types for the type parameters of the
            current generic type definition and returns a System.Type object representing
            the resulting constructed type. If error, return false with exception.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="genericType">The generic type result.</param>
            <param name="typeException">The handled type exception.</param>
            <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic
            type.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryGetConstructorDelegate``1(System.Type,``0@,System.Exception@,System.Type[])">
            <summary>
            Tries to get the specified delegate type associated to the constructor.
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="type">The type to act on.</param>
            <param name="constructorDelegate">The built constructor delegate.</param>
            <param name="constructorException">The handled exception.</param>
            <param name="parameterTypes">The collection of parameter types.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterTypes"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryGetTypeFromTypeName(System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get the type specified by its name from the loaded assemblies.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="type">The type result if found.</param>
            <param name="typeException">The handled execution exception.</param>
            <returns>Returns <see langword="true"/> if get OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryGetConstructorExpression(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression@,System.Exception@,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Tries to get an Expression representing the constructor call, passing in the constructor parameters.
            </summary>
            <param name="constructorInfo">The constructor info to act on.</param>
            <param name="constructorExpression">The built constructor expression.</param>
            <param name="constructorException">The handled constructor exception.</param>
            <param name="parameterExpressions">A collection of parameter expressions.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="constructorInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterExpressions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryGetConstructorInfo(System.Type,System.Reflection.ConstructorInfo@,System.Exception@,System.Type[])">
            <summary>
            Tries to get the constructor from the type that matches the specified arguments type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="constructorInfo">The found constructor.</param>
            <param name="constructorException">The handled constructor exception.</param>
            <param name="parameterTypes">The optional parameters types.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryLoadAssembly(System.String,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tries to load assembly from its name.
            </summary>
            <param name="assemblyName">The full assembly name.</param>
            <param name="loadedAssembly">The loaded assembly if succeeded.</param>
            <param name="assemblyException">The handled exception during assembly loading.</param>
            <returns>Returns <see langword="true"/> if loading OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryGetType(System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get type from its string name.
            </summary>
            <param name="typeName">The name of the type to find.</param>
            <param name="foundType">The found type.</param>
            <param name="typeException">The handled type exception.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.TryGetType(System.String,System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get the type from string, if not found, try to load from the assembly.
            </summary>
            <param name="typeName">The name of the type to find.</param>
            <param name="assemblyName">The assembly to act on.</param>
            <param name="foundType">The found type.</param>
            <param name="typeException">The handled type exception.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.GetParameterExpression(System.Type[])">
            <summary>
            Gets a set of Expressions representing the parameters which will be passed to the constructor.
            </summary>
            <param name="parameterTypes">A collection of type to be used to build parameter expressions</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterTypes"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.GetBaseTypes(System.Type)">
            <summary>
            Return a collection of base types found in the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether or not the underlying type is assignable to the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="targetType">The type to check.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.ToFriendlyName(System.Type)">
            <summary>
            Returns the friendly name of the type.
            </summary>
            <param name="type">The type to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.HasAttribute(System.Type,System.Type)">
            <summary>
            Determines whether or not the type contains the specified type attribute.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="attributeType">The type of the attribute.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.HasAttribute``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Determines whether or not the type contains the specified type attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type to act on.</param>
            <param name="predicate">The predicate to use.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsInNamespace(System.Type,System.String)">
            <summary>
            Determines whether or not the type is in the name space.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="namespace">The name space.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="namespace"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsInExactNamespace(System.Type,System.String)">
            <summary>
            Determines whether or not the type is in the specified namespace.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="namespace">The name space.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="namespace"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.IsNonAbstractClass(System.Type,System.Boolean)">
            <summary>
            Determines whether or not the type is an abstract type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="publicOnly">if check public.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.HasMatchingGenericArity(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Determines whether an interface type and a type have matching arity.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="typeInfo">The target type.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeHelpers.GetRegistrationType(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Returns the registration type from an interface.
            </summary>
            <param name="interfaceType">the interface type to act on.</param>
            <param name="typeInfo">The type info.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Helpers.TypeNameHelpers">
            <summary>
            Provides with method to access type name.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Helpers.TypeNameHelpers.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
            <param name="includeGenericParameterNames"><c>true</c> to include generic parameter names.</param>
            <returns>The pretty printed type name.</returns>
        </member>
        <member name="T:Xpandables.Net.Helpers.WithHelpers">
            <summary>
            Provides with extension method similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Helpers.WithHelpers.With``1(``0,System.Action{``0})">
            <summary>
            Sets properties via lambda expression scope.
            This is similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source item to act on.</param>
            <param name="action">The action to be applied.</param>
            <returns>The same object after applying the action on it.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Helpers.WithHelpers.With``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Object)">
            <summary>
            Sets properties via lambda expression. This is useful when dealing with <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source instance to act on.</param>
            <param name="nameOfExpression">The expression delegate for the property.
            Just use <see langword="nameof"/> as expression for the delegate.</param>
            <param name="value">The value for the property.</param>
            <returns>The current instance with modified property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nameOfExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="nameOfExpression"/> is not valid.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.GeoLocationRequest">
            <summary>
            The IPAddress Geo-location request.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.GeoLocationRequest.#ctor(System.String,System.String,System.Int32,System.Int32,Xpandables.Net.HttpRestClient.GeoLocationOutput,Xpandables.Net.HttpRestClient.GeoLocationLanguage)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.GeoLocationRequest"/> class.
            </summary>
            <param name="ipAddress">The target IP address.</param>
            <param name="accessKey">The security access key.</param>
            <param name="enableSecurity">Enable the security mode = 1 for professional subscription.</param>
            <param name="enableHostName">Enable host-name = 1</param>
            <param name="output">The output format, the default is <see cref="P:Xpandables.Net.HttpRestClient.GeoLocationOutput.Json"/>.</param>
            <param name="language">The output language, the default is <see cref="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.EnglishUS"/></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ipAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="accessKey"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationRequest.IpAddress">
            <summary>
            Gets the IPAddress to search for location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationRequest.AccessKey">
            <summary>
            Gets the access key to be used.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationRequest.EnableSecurity">
            <summary>
            Gets the security value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationRequest.EnableHostName">
            <summary>
            Determine whether or not to use host-name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationRequest.Output">
            <summary>
            Gets the request output format.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationRequest.Language">
            <summary>
            Gets the request language.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.GeoLocationRequest.GetHttpRestClientAttribute">
            <summary>
            Returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute" /> to be applied on the current instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.GeoLocationRequest.GetQueryString">
            <summary>
            Returns the keys and values for the Uri.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.GeoLocationOutput">
            <summary>
            The location output format.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.GeoLocationOutput.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.GeoLocationOutput" /> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName" /> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationOutput.Xml">
            <summary>
            The XML output.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationOutput.Json">
            <summary>
            The JSON output.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.GeoLocationLanguage">
            <summary>
            The location language.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.GeoLocationLanguage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.GeoLocationLanguage" /> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="language">The language name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName" /> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.Language">
            <summary>
            Gets the language name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.EnglishUS">
            <summary>
            The English language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.Germain">
            <summary>
            The Germain language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.Spanish">
            <summary>
            The Spanish language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.French">
            <summary>
            The French language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.Japanese">
            <summary>
            The Japanese language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.PortugeseBrazil">
            <summary>
            The Portuguese Brazil language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.Russian">
            <summary>
            The Russian language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationLanguage.Chinese">
            <summary>
            The Chinese language.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.GeoLocationResponse">
            <summary>
            Defines the IP Geo-location response.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Ip">
            <summary>
            Returns the requested IP address.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.HostName">
            <summary>
            Returns the host-name the requested IP resolves to, only returned if Host-name Lookup is enabled.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.IPType">
            <summary>
            Returns the IP address type IPv4 or IPv6.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.ContinentCode">
            <summary>
            Returns the 2-letter continent code associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.ContinentName">
            <summary>
            Returns the name of the continent associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.CountryCode">
            <summary>
            Returns the 2-letter country code associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.CountryName">
            <summary>
            Returns the name of the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.RegionCode">
            <summary>
            Returns the region code of the region associated with the IP (e.g. CA for California).
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.RegionName">
            <summary>
            Returns the name of the region associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.City">
            <summary>
            Returns the name of the city associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.ZipCode">
            <summary>
            Returns the ZIP code associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Latitude">
            <summary>
            Returns the latitude value associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Longitude">
            <summary>
            Returns the longitude value associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Location">
            <summary>
             Returns multiple location-related objects
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.TimeZone">
            <summary>
            Returns an object containing timezone-related data.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Currency">
            <summary>
            Returns an object containing currency-related data.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Connection">
            <summary>
            Returns an object containing connection-related data.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.GeoLocationResponse.Security">
            <summary>
            Returns an object containing security-related data.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPLocation">
            <summary>
            The location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.GeoNameID">
            <summary>
            Returns the unique geoname identifier in accordance with the Geonames Registry.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.Capital">
            <summary>
            Returns the capital city of the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.Languages">
            <summary>
            Returns an object containing one or multiple sub-objects per language spoken in the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.CountryFlagUrl">
            <summary>
            Returns an HTTP URL leading to an SVG-flag icon for the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.CountryFlagEmoji">
            <summary>
            Returns the emoji icon for the flag of the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.CountryFlagEmojiUnicode">
            <summary>
            Returns the unicode value of the emoji icon for the flag of the country associated with the IP. (e.g. U+1F1F5 U+1F1F9 for the Portuguese flag)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.CallingCode">
            <summary>
            Returns the calling/dial code of the country associated with the IP. (e.g. 351) for Portugal.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLocation.IsEU">
            <summary>
            Returns true or false depending on whether or not the county associated with the IP is in the European Union.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPLanguage">
            <summary>
            The location language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLanguage.Code">
            <summary>
            Returns the 2-letter language code for the given language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLanguage.Name">
            <summary>
            Returns the name (in the API request's main language) of the given language. (e.g. Portuguese)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPLanguage.Native">
            <summary>
            Returns the native name of the given language. (e.g. Português)
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPTimeZone">
            <summary>
            The time zone location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPTimeZone.ID">
            <summary>
            Returns the ID of the time zone associated with the IP. (e.g. America/Los_Angeles for PST)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPTimeZone.CurrentTime">
            <summary>
            Returns the current date and time in the location associated with the IP. (e.g. 2018-03-29T22:31:27-07:00)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPTimeZone.GMTOffset">
            <summary>
            Returns the GMT offset of the given time zone in seconds. (e.g. -25200 for PST's -7h GMT offset)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPTimeZone.Code">
            <summary>
            Returns the universal code of the given time zone.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPTimeZone.IsDaylightSaving">
            <summary>
            Returns true or false depending on whether or not the given time zone is considered daylight saving time.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPCurrency">
            <summary>
            The currency location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPCurrency.Code">
            <summary>
            Returns the 3-letter code of the main currency associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPCurrency.Name">
            <summary>
            Returns the name of the given currency.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPCurrency.Plural">
            <summary>
            Returns the plural name of the given currency.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPCurrency.Symbol">
            <summary>
            Returns the symbol letter of the given currency.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPCurrency.SymbolNative">
            <summary>
            Returns the native symbol letter of the given currency.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPConnection">
            <summary>
            The connexion location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPConnection.ASN">
            <summary>
            Returns the Autonomous System Number associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPConnection.ISP">
            <summary>
            Returns the name of the ISP associated with the IP.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPSecurity">
            <summary>
            The security location
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.IsProxy">
            <summary>
            Returns true or false depending on whether or not the given IP is associated with a proxy.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.ProxyType">
            <summary>
            Returns the type of proxy the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.IsCrawler">
            <summary>
            Returns true or false depending on whether or not the given IP is associated with a crawler.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.CrawlerName">
            <summary>
            Returns the name of the crawler the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.CrawlerType">
            <summary>
            Returns the type of crawler the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.IsTor">
            <summary>
            Returns true or false depending on whether or not the given IP is associated with the anonymous Tor system.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.ThreatLevel">
            <summary>
            Returns the type of threat level the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IPSecurity.ThreatTypes">
            <summary>
            Returns an object containing all threat types associated with the IP.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute">
            <summary>
            Describes the parameters for a request used with <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/>.
            The attribute should decorate implementations of <see cref="T:Xpandables.Net.Queries.IQuery`1"/> or <see cref="T:Xpandables.Net.Commands.ICommand"/>
            in order to be used with <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/>.
            Your class can implement the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> to dynamically return a <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Path">
            <summary>
            Gets or sets the Uri path.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Method">
            <summary>
            Gets or sets the method name.
            The default value is <see langword="HttpMethod.Post.Method"/>
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.DataFormat">
            <summary>
            Gets or sets the format of the data.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.DataFormat.Json"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.BodyFormat">
            <summary>
            Gets or sets the body format for data.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.String"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.ContentType">
            <summary>
            Gets or sets the content type.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.ContentType.Json"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Accept">
            <summary>
            Gets or sets the accept content.
            The default value is 'application/json'.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.IsSecured">
            <summary>
            Determines whether or not the request needs authorization.
            The default value is <see langword="true"/>.
            In this case, an <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue"/> with the <see cref="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Scheme"/> value will be initialized and filled
            using one of the <see langword="ConfigureXPrimaryAuthorizationTokenHandler(IHttpClientBuilder)"/> methods extension.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.IsNullable">
            <summary>
            Determines whether or not the query/command should be added to the request content.
            If <see langword="true"/> the query/command will not be added.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Scheme">
            <summary>
            Gets or sets the authorization scheme.
            The default value is "Bearer".
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.BodyFormat">
            <summary>
            Determines the body format of the request.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.String">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.StringContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IStringRequest"/>, otherwise the hole class will be serialized.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.ByteArray">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.ByteArrayContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IByteArrayRequest"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.Multipart">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.MultipartFormDataContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IMultipartRequest"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.Stream">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.StreamContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IStreamRequest"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.FormUrlEncoded">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.FormUrlEncodedContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.ContentType">
            <summary>
            Provides with the content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Json">
            <summary>
            Returns the application json content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Xml">
            <summary>
            Returns the application XML content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Pdf">
            <summary>
            Returns the application pdf content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Jpeg">
            <summary>
            Returns the image jpeg content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Png">
            <summary>
            Returns the image png content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Multipart">
            <summary>
            Returns the multi part form data content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Text">
            <summary>
            Returns the text plain content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.FromDataFormat">
            <summary>
            Collections of content type from data format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.JsonAccept">
            <summary>
            Returns the json accept header.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.XmlAccept">
            <summary>
            Returns the XML accept header.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.DataFormat">
            <summary>
            Determines the format of the target data.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Json">
            <summary>
            Uses for the JSON format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Xml">
            <summary>
            uses for XML format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Pdf">
            <summary>
            uses for Pdf format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Jpeg">
            <summary>
            uses for Jpeg format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Png">
            <summary>
            uses for Png format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Text">
            <summary>
            uses for Text format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Multipart">
            <summary>
            uses for Multi part format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.None">
            <summary>
            No specified format.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientAttributeDescriptionProvider`1">
            <summary>
            A generic custom type descriptor that returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1"/>
            for the specified type request.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeDescriptionProvider`1.#ctor(System.ComponentModel.TypeDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class using a parent type description provider.
            </summary>
            <param name="parent">The parent type description provider.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeDescriptionProvider`1.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
            <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide meta-data for the type.</returns>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1">
            <summary>
            A custom descriptor which attaches a <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> to an instance of a request type
            which implements <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/>
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> class using a parent custom type descriptor.
            </summary>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1.GetAttributes">
            <summary>
            Returns a collection of custom attributes for the type represented by this type descriptor.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for the type. The default is <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientException">
            <summary>
            Represents an HTTP Rest API exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientException.#ctor">
            <summary>
            Initializes the default instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientException"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException"> The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientHandler">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/> interface.
            You must derive from this class in order to customize its behaviors.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientHandler.HttpClientInstance">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpClient"/> current instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientHandler.Xpandables#Net#HttpRestClient#IHttpRestClientHandler#HttpClient">
            <summary>
            Contains the <see cref="T:System.Net.Http.HttpContent"/> instance for the current handler.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientHandler"/> class with the HTTP typed client.
            </summary>
            <param name="httpClient">The HTTP client type to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpClient"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the HTTP client instance.
            </summary>
            <param name="disposing">Determine whether the dispose has already been called.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientHelpers">
            <summary>
            Helpers for <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHelpers.GetHttpRequestMessage``1(Xpandables.Net.HttpRestClient.HttpRestClientAttribute,``0)">
            <summary>
            Returns the <see cref="T:System.Net.Http.HttpRequestMessage"/> from the attribute.
            </summary>
            <typeparam name="TSource">the type of the source.</typeparam>
            <param name="attribute">The <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> attribute.</param>
            <param name="source">The source of data.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHelpers.TryDeserializeObject``1(System.String,``0@,System.Exception@,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Tries to deserialize the JSON string to the specified type.
            </summary>
            <typeparam name="TSource"> The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="obj">The deserialized object from the JSON string.</param>
            <param name="exception">The handled exception.</param>
            <param name="options">The JSON converter options.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHelpers.DeserializeJsonFromStream``1(System.IO.Stream)">
            <summary>
            De-serializes a JSON string from a stream.
            </summary>
            <typeparam name="T">The type of the deserialized object.</typeparam>
            <param name="stream">The stream to act on.</param>
            <returns>A object of type <typeparamref name="T"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="stream"/> does not support reading.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHelpers.StreamToStringAsync(System.IO.Stream)">
            <summary>
            Reads a stream to string.
            </summary>
            <param name="stream">The stream to act on.</param>
            <returns>A string from the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="stream"/> does not support reading.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHelpers.ContentIsHttpRestClientValidation(Xpandables.Net.HttpRestClient.HttpRestClientException)">
            <summary>
            Determines whether the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientException"/> is <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>.
            </summary>
            <param name="exception">The target exception.</param>
            <returns>An <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> if true, otherwise null.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse">
            <summary>
            Represents an HTTP Rest client response.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Success(System.Net.HttpStatusCode)">
            <summary>
            Returns a success HTTP status response.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Failure(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Returns a failure HTTP status response.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with the status code.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.#ctor(Xpandables.Net.HttpRestClient.HttpRestClientException,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.#ctor(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Exception">
            <summary>
            Gets the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientException"/> that holds the handled exception.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Version">
            <summary>
            Gets the HTTP response version.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.ReasonPhrase">
            <summary>
            Gets  the reason phrase which typically is sent by servers together with the status code.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Headers">
            <summary>
            Gets all headers of the HTTP response.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.StatusCode">
            <summary>
            Gets the response status code.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.IsValid">
            <summary>
            Determines whether or not the response status is valid.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.AddReasonPhrase(System.String)">
            <summary>
            Adds the reason phrase.
            </summary>
            <param name="reason">the reason phrase to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.AddHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the response headers.
            </summary>
            <param name="headers">the headers to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.AddVersion(System.Version)">
            <summary>
            Adds the version.
            </summary>
            <param name="version">the version to be used.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1">
            <summary>
             Represents an HTTP Rest client response of a specific type result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Success(`0,System.Net.HttpStatusCode)">
            <summary>
             Returns a success HTTP status response.
            </summary>
            <param name="result">The result instance.</param>
            <param name="statusCode">The status response code.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Success(System.Net.HttpStatusCode)">
            <summary>
             Returns a success HTTP status response.
            </summary>
            <param name="statusCode">The status response code.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Failure(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Returns a failure HTTP status response.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Failure(Xpandables.Net.HttpRestClient.HttpRestClientException,System.Net.HttpStatusCode)">
            <summary>
             Returns a failure HTTP status response.
            </summary>
            <param name="exception">The handled exception.</param>
            <param name="statusCode">The status response code.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/> class with the status code.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(Xpandables.Net.HttpRestClient.HttpRestClientException,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(`0,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with the status code.
            </summary>
            <param name="result">The result instance.</param>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Result">
            <summary>
            Gets the HTTP response content.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.AddReasonPhrase(System.String)">
            <summary>
            Adds the reason phrase.
            </summary>
            <param name="reason">the reason phrase to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.AddHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the response headers.
            </summary>
            <param name="headers">the headers to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.AddVersion(System.Version)">
            <summary>
            Adds the version.
            </summary>
            <param name="version">the version to be used.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation">
            <summary>
            Contains HTTP Rest API validation model result that contains member name with its list of error messages.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified member name and list of error messages to the dictionary.
            </summary>
            <param name="memberName">The member name of the list to add.</param>
            <param name="errorMessages">The list of the error messages to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">the <paramref name="errorMessages"/> is null.</exception>
            <exception cref="T:System.ArgumentException">A member with the same name already exists in the dictionary.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientValidation.Item(System.String)">
            <summary>
            Gets or sets the list of error messages associated with the specified member name.
            </summary>
            <param name="memberName">The member name of the list of error messages to get or set.</param>
            <returns>The list of messages associated with the specified member. If the specified member name is not found,
            a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and
            a set operation creates a new list of error messages with the specified member name.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key does not exist in the collection.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> class
            that is empty, has the default initial capacity, and uses the default equality
            comparer for the member name.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.Dictionary`2"/>
            and uses the default equality comparer for the member name type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/> whose elements are copied to the
            new <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and uses the default equality comparer for the member name type.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider">
            <summary>
            An interface representing an <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> to be dynamically applied on the implementing class.
            This interface takes priority over the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> declaration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider.GetHttpRestClientAttribute">
            <summary>
            Returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> to be applied on the current instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientGeoLocationHandler">
            <summary>
            Provides with methods to handle HTTP Rest client Geo-location using a typed client HTTP Client.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientGeoLocationHandler.GetGeoLocationAsync(Xpandables.Net.HttpRestClient.GeoLocationRequest)">
            <summary>
            Asynchronously gets the IPAddress Geo-location of the specified IPAddress request using http://api.ipstack.com.
            </summary>
            <param name="request">The request to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientGeoLocationHandler">
            <summary>
            Default implementation for <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientGeoLocationHandler"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientGeoLocationHandler.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientGeoLocationHandler"/> class with the client to be used.
            </summary>
            <param name="httpClient">The HTTP client to be used to request Geo location.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpClient"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientGeoLocationHandler.GetGeoLocationAsync(Xpandables.Net.HttpRestClient.GeoLocationRequest)">
            <summary>
            Asynchronously gets the IPAddress Geo-location of the specified IPAddress request using http://api.ipstack.com.
            </summary>
            <param name="request">The request to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientGeoLocationHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/> instance.
            </summary>
            <param name="disposing">Determine whether the dispose has already been called.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler">
            <summary>
            Provides with methods to handle HTTP Rest client queries and commands using a typed client HTTP Client.
            The queries and commands should implement one of the following interfaces :
            <see cref="T:Xpandables.Net.HttpRestClient.IStringRequest"/>, <see cref="T:Xpandables.Net.HttpRestClient.IStreamRequest"/>, <see cref="T:Xpandables.Net.HttpRestClient.IByteArrayRequest"/>, <see cref="T:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest"/>,
            <see cref="T:Xpandables.Net.HttpRestClient.IMultipartRequest"/> and <see cref="T:Xpandables.Net.HttpRestClient.IQueryStringRequest"/>.
            <para>You should register the handler using one of the extension methods 
            <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions.AddHttpClient``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/> and you may add 
            <see cref="M:Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IHttpClientBuilder,System.Action{System.Net.Http.HttpClient})"/> or other 
            to customize the client behaviors.</para>
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HttpClient">
            <summary>
            Contains the <see cref="T:System.Net.Http.HttpContent"/> instance for the current handler.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HandleAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/>.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns an <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HandleAsync(Xpandables.Net.Commands.ICommand,System.Threading.CancellationToken)">
            <summary>
            Handles the command as asynchronous operation.
            </summary>
            <param name="command">The command to act with. The command must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/></param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns an <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientIPLocationHandler">
            <summary>
            Provides with methods to handle HTTP Rest client IP location.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientIPLocationHandler.GetIPAddressAsync">
            <summary>
            Asynchronously gets the IPAddress of the current caller using https://ipinfo.io/ip.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationMessage">
            <summary>
            Provides with a handler that is used with <see cref="T:System.Net.Http.HttpClient"/> to format IpLocation result before returning response.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationMessage.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The token is not available. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationHandler">
            <summary>
            Default implementation for <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientIPLocationHandler"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationHandler.#ctor(System.Net.Http.HttpClient)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationHandler"/> class with the client to be used.
            </summary>
            <param name="httpClient">The client to be used to get the IP address.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpClient"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationHandler.GetIPAddressAsync">
            <summary>
            Asynchronously gets the IPAddress of the current caller using https://ipinfo.io/ip.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientIPLocationHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/> instance.
            </summary>
            <param name="disposing">Determine whether the dispose has already been called.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IStringRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.String"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IStringRequest.GetStringContent">
            <summary>
            Returns the body content that will be serialized.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IByteArrayRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.ByteArray"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IByteArrayRequest.GetByteContent">
            <summary>
            Returns the body content.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IMultipartRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.Multipart"/> type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IStreamRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.Stream"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IStreamRequest.GetStreamContent">
            <summary>
            Returns the body content.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.FormUrlEncoded"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest.GetFormContent">
            <summary>
            Returns the body content.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IQueryStringRequest">
            <summary>
            Provides with a method to retrieve the query string content for query string Uri.
            This can be combined with other request interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IQueryStringRequest.GetQueryString">
            <summary>
            Returns the keys and values for the Uri.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPLocationRequest">
            <summary>
            Defines the location IP request.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler">
            <summary>
            Provides with a handler that can be used with <see cref="T:System.Net.Http.HttpClient"/> to add header authorization value
            before request execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenHandler.#ctor(Xpandables.Net.Http.IHttpTokenAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler"/> class with the token accessor.
            </summary>
            <param name="httpTokenAccessor">The token accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The token is not available. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessorHandler">
            <summary>
            A helper class used to implement the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessorHandler.#ctor(System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenAccessorHandler"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> implementation.
            </summary>
            <param name="tokenAccessor">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessorHandler.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenContainer">
            <summary>
            Provides with <see cref="T:Xpandables.Net.Http.IHttpTokenEngine"/>, <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> and <see cref="T:Xpandables.Net.Http.IHttpHeaderAccessor"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.#ctor(Xpandables.Net.Http.IHttpTokenEngine,Xpandables.Net.Http.IHttpTokenAccessor,Xpandables.Net.Http.IHttpHeaderAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenContainer"/> class.
            </summary>
            <param name="httpTokenEngine">The token engine.</param>
            <param name="httpTokenAccessor">The token accessor.</param>
            <param name="httpHeaderAccessor">The httpHeader Accessor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenEngine"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.BuildToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Uses the collection of claims to build a string token.
            </summary>
            <param name="claims">collection of claims to be used to build token string.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="claims" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.BuildToken(System.Object)">
            <summary>
            Uses the source object to build a string token.
            </summary>
            <param name="source">The source to be used.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetClaims(System.String)">
            <summary>
            Returns the collection of claims from the specified token.
            </summary>
            <param name="token">The token string.</param>
            <returns>An collection of claims if OK or an empty type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetValues">
            <summary>
            Gets all HTTP header values from the current HTTP request.
            If not found, returns an empty dictionary.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetValue(System.String)">
            <summary>
            Gets the HTTP header value from the current HTTP request matching the specified key.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetValues(System.String)">
            <summary>
            Gets all HTTP header values from the current HTTP request matching the specified key.
            If not found, returns an empty enumerable.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpFormFileEngine">
            <summary>
            Provides with methods to validate an instance of IFormFile.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileName(System.Object)">
            <summary>
            Checks that the HTTP request file name is a valid one.
            </summary>
            <param name="formFile">The sent file.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileExtension(System.Object,System.String[])">
            <summary>
            Checks that the HTTP request file extension matches one of the specified extensions.
            </summary>
            <param name="formFile">The sent file.</param>
            <param name="extensions">The extensions to compare to.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileSize(System.Object,System.Int32)">
            <summary>
            Checks that the HTTP request file size is lower or equal to the specified size.
            </summary>
            <param name="formFile">The sent file.</param>
            <param name="size">The file size to compare to.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileContent(System.Object)">
            <summary>
            Checks that the HTTP request file content matches its extension signature.
            </summary>
            <param name="formFile">the sent file.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileContent(System.Object,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.Byte[]}})">
            <summary>
            Checks that the HTTP request file content matches its extension signature.
            </summary>
            <param name="formFile">the sent file.</param>
            <param name="fileSignatures">The file signatures dictionary.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpHeaderAccessor">
            <summary>
            Provides with methods to retrieve an HTTP request header value matching a specific key.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.GetValue(System.String)">
            <summary>
            Gets the HTTP header value from the current HTTP request matching the specified key.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.GetValues(System.String)">
            <summary>
            Gets all HTTP header values from the current HTTP request matching the specified key.
            If not found, returns an empty enumerable.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.GetValues">
            <summary>
            Gets all HTTP header values from the current HTTP request.
            If not found, returns an empty dictionary.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenAccessor">
            <summary>
            Defines a method used to retrieve the ambient token string from the current HTTP request header.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenAccessor.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenAccessor.GetToken">
            <summary>
            Returns the current token value from the current HTTP request matching the "Authorization" key.
            If not found, returns an empty value.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessor">
            <summary>
            The default implementation for <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessor.#ctor(Xpandables.Net.Http.IHttpHeaderAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenAccessor"/> class.
            </summary>
            <param name="securedHeaderAccessor">The header accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="securedHeaderAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessor.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenEngine">
            <summary>
             Defines a set of methods that can be used to build a token from a collection of claims
             and return back this collection from that token.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.BuildToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Uses the collection of claims to build a string token.
            </summary>
            <param name="claims">collection of claims to be used to build token string.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="claims"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.BuildToken(System.Object)">
            <summary>
            Uses the source object to build a string token.
            </summary>
            <param name="source">The source to be used.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.GetClaims(System.String)">
            <summary>
            Returns the collection of claims from the specified token.
            </summary>
            <param name="token">The token string.</param>
            <returns>An collection of claims if OK or an empty type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ICanHandle">
            <summary>
            Provides a method that determines whether or not an argument can be handled.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ICanHandle.CanHandle(System.Object)">
            <summary>
            Determines whether or not a an argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="target">The argument to handle.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Xpandables.Net.ICanHandle`1">
            <summary>
            Provides a method that determines whether or not a generic argument can be handled.
            </summary>
            <typeparam name="TArgument">Type of the argument to handle.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ICanHandle`1.CanHandle(`0)">
            <summary>
            Determines whether or not a type specific argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Xpandables.Net.Identities.CommandIdentityBehavior`1">
            <summary>
            This class allows the application author to add secured data support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and inherit from <see cref="T:Xpandables.Net.Identities.IdentityData"/>,
            <see cref="T:Xpandables.Net.Identities.IdentityData`1"/> or <see cref="T:Xpandables.Net.Identities.IdentityDataExpression`2"/> in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityProvider"/>, that you should
            provide an implementation and use an extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.IdentityData.Identity"/> property with the
            <see cref="M:Xpandables.Net.Identities.IIdentityProvider.GetIdentity"/> before the handler execution.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.CommandIdentityBehavior`1.#ctor(Xpandables.Net.Identities.IIdentityProvider,Xpandables.Net.Commands.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.CommandIdentityBehavior`1"/> class.
            </summary>
            <param name="identityProvider">The secured data provider.</param>
            <param name="decoratee">The decorated command handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.CommandIdentityBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Identities.IBehaviorIdentity">
            <summary>
            A marker interface that allows the command/query class to be filled with an identity. The class should derive from
            <see cref="T:Xpandables.Net.Identities.IdentityData"/>, <see cref="T:Xpandables.Net.Identities.IdentityData`1"/> or <see cref="T:Xpandables.Net.Identities.IdentityDataExpression`2"/>
            for a query-bale class. You need to provide with an
            implementation for <see cref="T:Xpandables.Net.Identities.IIdentityProvider"/>
            and register the expected class using the correct extension method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.IdentityData">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityData"/> with a property that holds identity information
            of any type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Identities.IdentityData.Identity">
            <summary>
            Contains an instance of identity data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityProvider" /> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IdentityData.SetIdentity(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.IIdentityData.Identity" /> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="identity">The identity data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.IdentityData`1">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityData`1"/> with a property that holds identity information
            of generic type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TIdentity">The type of the identity.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Identities.IdentityData`1.Identity">
            <summary>
            Contains an instance of identity data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityProvider" /> using a decorator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.IdentityDataExpression`2">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityExpression`2"/> with a property that holds identity information
            of generic type in a security context.
            This class implements the <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> interface and derives from <see cref="T:Xpandables.Net.Identities.IdentityData`1"/>.
            You must override the <see cref="M:Xpandables.Net.Identities.IdentityDataExpression`2.BuildExpression"/> method in order to provide a custom behavior.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TIdentity">The type of the identity data.</typeparam>
            /// <typeparam name="TSource">The type of the data source</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.IdentityDataExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IdentityDataExpression`2.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the <see langword="Where"/> clause in a query to a db context.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityData">
            <summary>
            Provides with a property that holds identity information of any type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Identities.IIdentityData.Identity">
            <summary>
            Contains an instance of secured data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityProvider"/> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IIdentityData.SetIdentity(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.IIdentityData.Identity"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="identity">The identity data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityData`1">
            <summary>
            Provides with a property that holds identity information of generic type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Identities.IIdentityData`1.Identity">
            <summary>
            Contains an instance of identity data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityProvider"/> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IIdentityData`1.SetIdentity(`0)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.IIdentityData`1.Identity"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="identity">The identity data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityExpression`2">
            <summary>
            Provides with a property that holds identity information of generic type in a security context.
            This interface derives from <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> interface.
            This interface is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TIdentity">The type of the identity data.</typeparam>
            <typeparam name="TSource">The type of the data source</typeparam>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityProvider">
            <summary>
            Provides with a method to retrieve identity.
            You should provide an implementation of this interface that will be used with the <see cref="T:Xpandables.Net.Identities.CommandIdentityBehavior`1"/>
            or <see cref="T:Xpandables.Net.Identities.QueryIdentityBehavior`2"/> decorator to fill the target instance with the identity.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IIdentityProvider.GetIdentity">
            <summary>
            Returns an instance that contains identity or throw an exception if not found.
            </summary>
            <exception cref="T:System.InvalidOperationException">Failed to find secured data.</exception>
        </member>
        <member name="T:Xpandables.Net.Identities.QueryIdentityBehavior`2">
            <summary>
            This class allows the application author to add secured information support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and inherit from <see cref="T:Xpandables.Net.Identities.IdentityData"/>,
            <see cref="T:Xpandables.Net.Identities.IdentityData`1"/> or <see cref="T:Xpandables.Net.Identities.IdentityDataExpression`2"/> in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityProvider"/>, that you should
            provide an implementation and use the extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.IdentityData.Identity"/> property with the
            <see cref="M:Xpandables.Net.Identities.IIdentityProvider.GetIdentity"/> before the handler execution.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.QueryIdentityBehavior`2.#ctor(Xpandables.Net.Identities.IIdentityProvider,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.QueryIdentityBehavior`2"/>.
            </summary>
            <param name="identityProvider">The secured data provider.</param>
            <param name="decoratee">The query handler to decorate with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.QueryIdentityBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IBehaviorInterceptor">
            <summary>
            A marker interface that allows the class implementation to be intercepted.
            You need to register the expected behavior using the appropriate interceptor extension method and provide an implementation for <see cref="T:Xpandables.Net.Interception.IInterceptor"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Interception.IInterceptor">
            <summary>
            Base interface for types and instances for interception.
            Interceptors implementing this interface are called for each invocation of the pipelines that they're included in.
            We advise the use of decorator instead of interceptor.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.IInterceptor.CanHandle(Xpandables.Net.Interception.IInvocation)">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            This is used to optimize interception. If the behaviors won't actually do anything then the interception
            mechanism can be skipped completely.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if it can handle the argument, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInterceptor.Intercept(Xpandables.Net.Interception.IInvocation)">
            <summary>
            Method used to intercept the parameter method call.
            You have to call the <see cref="M:Xpandables.Net.Interception.IInvocation.Proceed"/> to execute the intercepted method.
            The default implementation just call the <see cref="M:Xpandables.Net.Interception.IInvocation.Proceed"/> method.
            </summary>
            <param name="invocation">The method argument to be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="invocation"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IInvocation">
            <summary>
            Provides the structure for an interception event.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.InvocationMethod">
            <summary>
            Contains the invocation target method info.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.InvocationInstance">
            <summary>
            Contains the invocation target instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.Arguments">
            <summary>
            Contains the arguments (position in signature, names and values) with which the method has been invoked.
            This argument is provided only for target element with parameters.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.Exception">
            <summary>
            Gets the exception handled on executing a method.
            You can edit this value in order to return a custom exception or null.
            If you set this value to null, the process will resume normally and
            take care to provide a <see cref="P:Xpandables.Net.Interception.IInvocation.ReturnValue"/> if necessary.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ReturnValue">
            <summary>
            Gets the executed method return value, only provided for non-void method and when no exception handled.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ElapsedTime">
            <summary>
            Get the elapsed time execution for the underlying method.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ReturnType">
            <summary>
            Gets the invocation method return type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddException(System.Exception)">
            <summary>
            Sets the exception value.
            If you set this value to null, the process will resume normally and
            take care to provide a <see cref="P:Xpandables.Net.Interception.IInvocation.ReturnValue" /> if necessary.
            </summary>
            <param name="exception">The exception value.</param>
            <returns>The current instance with exception value.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddReturnValue(System.Object)">
            <summary>
            Sets the executed method return value, only for non-void method.
            Be aware to match the return value type.
            Otherwise it will throw an exception.
            </summary>
            <param name="returnValue">The return value to be used.</param>
            <returns>The current instance with return value.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddElapsedTime(System.TimeSpan)">
            <summary>
            Sets the executed method elapsed time.
            </summary>
            <param name="elapsedTime">The method elapsed.</param>
            <returns>The current instance with the new elapsed time.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.Proceed">
            <summary>
            Executes the underlying method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorAttribute">
            <summary>
            Interceptors base attribute that allows developers to apply handlers to classes and class members directly.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorAttribute.Create(System.IServiceProvider)">
            <summary>
            Derived classes implement this method. When called, it creates a new call handler as specified in the attribute configuration.
            The parameter <paramref name="serviceProvider"/> specifies the <see cref="T:System.IServiceProvider"/> to be used when creating
            handlers, if necessary.
            Returns a new interceptor handler object.
            </summary>
            <param name="serviceProvider">The current instance of the collection of services.</param>
            <returns>An implementation of <see cref="T:Xpandables.Net.Interception.IInterceptor"/> interface.</returns>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorFactory">
            <summary>
            The interceptor class factory.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorFactory.CreateProxy``1(Xpandables.Net.Interception.IInterceptor,``0)">
            <summary>
            Creates an instance of <typeparamref name="TInterface"/> that will be intercepted with the specified interceptor.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="interceptor">An interceptor instance to apply.</param>
            <param name="instance">The real instance of the interface type.</param>
            <returns><typeparamref name="TInterface"/> proxy instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorFactory.CreateProxy(System.Type,Xpandables.Net.Interception.IInterceptor,System.Object)">
            <summary>
            Creates an instance that will be intercepted with the specified interceptor.
            </summary>
            <param name="interfaceType">The type of the instance</param>
            <param name="interceptor">An interceptor instance to apply</param>
            <param name="instance">The real instance of the type</param>
            <returns><see cref="T:System.Object"/> proxy instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorProxy`1">
            <summary>
            The base implementation for interceptor.
            This implementation uses the <see cref="T:System.Reflection.DispatchProxy" /> process to apply customer behaviors to a method.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Create(`0,Xpandables.Net.Interception.IInterceptor)">
            <summary>
            Returns a new instance of <typeparamref name="TInterface"/> wrapped by a proxy.
            </summary>
            <param name="instance">the instance to be wrapped.</param>
            <param name="interceptor">The instance of the interceptor.</param>
            <returns>An instance that has been wrapped by a proxy.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Interception.InterceptorProxy`1"/> with default values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.SetParameters(`0,Xpandables.Net.Interception.IInterceptor)">
            <summary>
            Initializes the decorated instance and the interceptor with the provided arguments.
            </summary>
            <param name="instance">The instance to be intercepted.</param>
            <param name="interceptor">The instance of interceptor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Executes the method specified in the <paramref name="targetMethod" />.
            Applies the interceptor behavior to the called method.
            </summary>
            <param name="targetMethod">The target method.</param>
            <param name="args">The expected arguments.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetMethod" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Bypass(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Bypass the interceptor application because the method is a system method (GetType).
            </summary>
            <param name="targetMethod">Contains all information about the method being executed</param>
            <param name="args">Arguments to be used.</param>
            <returns><see cref="T:System.Object"/> instance</returns>
        </member>
        <member name="T:Xpandables.Net.Interception.Invocation">
            <summary>
            Provides the implementation of the <see cref="T:Xpandables.Net.Interception.IInvocation" /> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Invocation.#ctor(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Interception.Invocation"/> with the arguments needed for invocation.
            </summary>
            <param name="targetMethod">The target method.</param>
            <param name="targetInstance">The target instance being called.</param>
            <param name="argsValue">Arguments for the method, if necessary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetMethod"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetInstance"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IParameterCollection">
            <summary>
            This interface represents a list of either input or output
            parameters. It implements a fixed size list.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>value of the named parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterName"/> does not exist</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.IParameterCollection.Item(System.Int32)">
            <summary>
            Fetches a parameter's value by index.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>Value of the indexed parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterIndex"/> does not exist</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.IParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.Parameter">
            <summary>
            Defines the structure of a argument of a method at runtime.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.Build(System.Int32,System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Builds a new instance of <see cref="T:Xpandables.Net.Interception.Parameter"/> with the position, name , value...
            </summary>
            <param name="position">The parameter position in the method signature</param>
            <param name="source">The parameter info to act on.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An instance of new <see cref="T:Xpandables.Net.Interception.Parameter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="position"/> must be greater
            or equal to zero.</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Position">
            <summary>
            Gets the index position of the parameter in the method signature.
            The value must be greater or equal to zero, otherwise the interface contract
            will throw an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Name">
            <summary>
            Gets the name of the parameter as defined in the method signature.
            The value can not be null, otherwise the interface contract will throw an <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Value">
            <summary>
            Gets the value of the parameter at runtime.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Type">
            <summary>
            Gets the type of the argument.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.PassingBy">
            <summary>
            Determines whether the argument is <see langword="out"/>, <see langword="in"/>
            or by <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.ChangeValueTo(System.Object)">
            <summary>
            Sets a new value to the parameter.
            The new value type must match the argument <see cref="P:Xpandables.Net.Interception.Parameter.Type"/>,
            otherwise it will throw a <see cref="T:System.FormatException"/>
            </summary>
            <param name="newValue">The new value to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Interception.Parameter.PassingState">
            <summary>
            Determines whether the argument is <see langword="out"/>, <see langword="in"/>
            or <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.In">
            <summary>
            Standard parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.Out">
            <summary>
            <see langword="out"/> parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.Ref">
            <summary>
            <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.GetPassedStatusFromParameterInfo(System.Reflection.ParameterInfo)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Interception.Parameter.PassingState"/> of the parameter.
            </summary>
            <param name="parameterInfo">The parameter to act on.</param>
            <returns>A <see cref="T:Xpandables.Net.Interception.Parameter.PassingState"/> that matches the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.GetTypeFromParameterInfo(System.Reflection.ParameterInfo)">
            <summary>
            Returns the type of the parameter.
            </summary>
            <param name="parameterInfo">The parameter to act on.</param>
            <returns>The parameter type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.ParameterCollection">
            <summary>
            An implementation of <see cref="T:Xpandables.Net.Interception.IParameterCollection"/> that wraps a provided array
            containing the argument values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Construct a new <see cref="T:Xpandables.Net.Interception.ParameterCollection"/> class that wraps the given array of arguments.
            </summary>
            <param name="methodInfo">The target method.</param>
            <param name="arguments">Arguments for the method, if necessary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.ParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>value of the named parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterName" /> does not exist</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.ParameterCollection.Item(System.Int32)">
            <summary>
            Fetches a parameter's value by index.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>Value of the indexed parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterIndex" /> does not exist</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Localization.ILocalizationResourceProvider">
            <summary>
            Gives access to properties resources types to be used for localization.
            The resource type is identified by its string type name and behave as the data annotations attributes localization.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes">
            <summary>
            Contains the collection of resource types used to add localization for application page models (razor style).
            Each page is associated with a resource type name that matches the <see langword="{PageName}Localization"/> following the framework name convention.
            if a localization file is not defined, the default data annotation behavior is used.
            <para></para>
            Example :
            pageName.cshtml.cs contains the pageNameModel and the localization file is named pageNameLocalization.resx.
            <para></para>
            This behavior is available for the following attributes :
            <para><see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> :</para>
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Name"/> (just set to any value) will be bounded to the <see langword="Display{PropertyName}"/>
            as key in the resource file.
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Prompt"/> (just set to any value) will be bounded to the <see langword="Prompt{PropertyName}"/>
            as key in the resource file.
            <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> (just set to any value) will be bound to the <see langword="Description{PropertyName}"/>
            as key in the resource file.
            <para><see cref="T:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute"/> :</para>
            <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/> (just set to any value) will be bounded to the <see langword="Format{PropertyName}"/>
            as key in the resource file.
            <see langword="LocalizedDisplayFormatAttribute.NullDisplayText"/> (just set to any value) will be bounded to the
            <see langword="NullDisplay{PropertyName}"/> as key in the resource file.
            <para>
            You can use the <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> class to build custom enumeration and use the tag helper <see langword="asp-enum"/> that expects the enumeration value for localization in label and the enumeration value will be bound to the <see langword="Enum{EnumerationValue}"/> as key in the resource file.
            </para>
            You can use the <see langword="ILocalizationResourceProviderExtended"/> for custom model binder and validator attributes for localization.
            You can use <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.IsSingleFileUsed"/> for single culture resource for all pages.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ValidationType">
            <summary>
            Contains the resource type for all data annotation validation attributes localization using the attribute name as a key.
            <para>For example :</para>
            The <see langword="RequiredAttribute.ErrorMessageResourceName"/> will be bounded to the <see langword="RequiredAttribute"/>
            as key in the resource file.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.IsSingleFileUsed">
            <summary>
            Determines whether to use a single resource page for culture. If so, the <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes"/> may contain 
            a unique type that will be used for all the page models. 
            Otherwise, you must provide a file for each page. The default behavior returns <see langword="false"/>.
            </summary>
            <returns>Returns <see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypeCollection">
            <summary>
            Contains a collection of resource types to add localization for application view models.
            Each view model is associated with a resource type name that matches the <see langword="{ViewModelName}Localization"/> or can contains
            only one localization file in case of singe file use.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.ILocalizationResourceProvider.AvailableViewModelCultures">
            <summary>
            Returns a collection of available cultures found in the current application based on the <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes"/> definition.
            </summary>
            <returns>A collection of <see cref="T:System.Globalization.CultureInfo"/> of an empty collection if no result.</returns>
        </member>
        <member name="T:Xpandables.Net.Localization.LocalizableString">
            <summary>
                A helper class for providing a localizable string property.
                This class is currently compiled in both System.Web.dll and System.ComponentModel.DataAnnotations.dll.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizableString.#ctor(System.String)">
            <summary>
                Constructs a localizable string, specifying the property name associated
                with this item.  The <paramref name="propertyName" /> value will be used
                within any exceptions thrown as a result of localization failures.
            </summary>
            <param name="propertyName">
                The name of the property being localized.  This name
                will be used within exceptions thrown as a result of localization failures.
            </param>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizableString.Value">
            <summary>
                Gets or sets the value of this localizable string.  This value can be
                either the literal, non-localized value, or it can be a resource name
                found on the resource type supplied to <see cref="M:Xpandables.Net.Localization.LocalizableString.GetLocalizableValue" />.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizableString.ResourceType">
            <summary>
                Gets or sets the resource type to be used for localization.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizableString.ClearCache">
            <summary>
                Clears any cached values, forcing <see cref="M:Xpandables.Net.Localization.LocalizableString.GetLocalizableValue" /> to
                perform evaluation.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizableString.GetLocalizableValue">
            <summary>
                Gets the potentially localized value.
            </summary>
            <remarks>
                If <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> has been specified and <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" /> is not
                null, then localization will occur and the localized value will be returned.
                <para>
                    If <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> is null then <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" /> will be returned
                    as a literal, non-localized string.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if localization fails.  This can occur if <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> has been
                specified, <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" /> is not null, but the resource could not be
                accessed.  <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> must be a public class, and <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" />
                must be the name of a public static string property that contains a getter.
            </exception>
            <returns>
                Returns the potentially localized value.
            </returns>
        </member>
        <member name="T:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute">
            <summary>
            Specifies how data fields are localized, displayed and formatted by ASP.NET Dynamic Data.
             Allows overriding various display-related options for a given field. The options have the same meaning as in BoundField.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString">
            <summary>
             Gets or sets the format string, which may be a resource key string.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType">
            <summary>
            Gets or sets the type that contains the resources for <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/>.
            Using the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType"/> along with <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/>,
            allows the <see cref="M:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.GetDataFormatString"/> method to return localized values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.GetDataFormatString">
            <summary>
            Returns the UI format string for <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/>.
            When <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> has not been specified, the value of <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" />
            will be returned. When <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> has been specified and <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" />
            represents a resource key within that resource type, then the localized value will be returned. When <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" />
            and <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> have not been set, returns <c>null</c>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> property and the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" /> property,
            but a public static property with a name matching the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" /> value couldn't be found
            on the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" />.
            </exception>
        </member>
        <member name="T:Xpandables.Net.Localization.Validations.DataAnnotations">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CheckBoxAttribute">
            <summary>
              Looks up a localized string similar to La valeur du champ {0} doit être cochée..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CompareAttribute">
            <summary>
              Looks up a localized string similar to {0} et {1} ne correspondent pas..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CreditCardAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas un numéro de carte valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.DataTypeAttribute">
            <summary>
              Looks up a localized string similar to Le type de données attendu pour le champ {0} est {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.EmailAddressAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas une adresse mail valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.EnumDataTypeAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit représenter un élément de liste attendu..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.FileExtensionsAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} accepte seulement les fichiers de type : {1}.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.MaxLengthAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit est une chaîne ou un tableau de longueur maximale {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.MinLengthAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit est une chaîne ou un tableau de longueur minimale {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.PhoneAttribute">
            <summary>
              Looks up a localized string similar to Le {0} n&apos;est pas valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RangeAttribute">
            <summary>
              Looks up a localized string similar to Le valeur du champ {0} doit être comprise entre {1} et {2}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RegularExpressionAttribute">
            <summary>
              Looks up a localized string similar to La valeur du champ {0} doit correspondre à l&apos;expression régulière &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RequiredAttribute">
            <summary>
              Looks up a localized string similar to Le {0} est obligatoire..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.StringLengthAttribute">
            <summary>
              Looks up a localized string similar to Le {0} doit contenir au moins {2} caractères et au plus {1} caractères..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.UrlAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas une url valide pour http, https ou ftp..
            </summary>
        </member>
        <member name="T:Xpandables.Net.ManagedExtensibility.EmptyCatalog">
            <summary>
            Defines a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> implementation that always returns an empty collection of parts.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.EmptyCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
        </member>
        <member name="T:Xpandables.Net.ManagedExtensibility.ExportServiceBuilder">
            <summary>
            Provides with methods for building application object using the Managed Extensibility Framework (MEF).
            </summary>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.ExportServiceBuilder.Composer">
            <summary>
            The composer used to build object.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.ExportServiceBuilder.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ManagedExtensibility.ExportServiceBuilder"/> using the default export options to compose parts of the target object.
            </summary>
            <param name="target">The object to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Building the object failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.ExportServiceBuilder.#ctor(System.Object,Xpandables.Net.ManagedExtensibility.ExportServiceOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ManagedExtensibility.ExportServiceBuilder"/> using the specified export options to compose parts of the target object.
            </summary>
            <param name="target">The object to act on.</param>
            <param name="options">The export options to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Building the object failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ManagedExtensibility.ExportServiceOptions">
            <summary>
            Defines options to configure export service.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.ExportServiceOptions.#ctor">
            <summary>
            Initializes a default instance of <see cref="T:Xpandables.Net.ManagedExtensibility.ExportServiceOptions"/> class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.ExportServiceOptions.Path">
            <summary>
            Gets or sets the path to the directory to scan for assemblies to add to the catalog.
            if not defined, the system will look to the application current directory.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.ExportServiceOptions.SearchPattern">
            <summary>
            Gets or sets the pattern to search with. The format of the pattern should be the same as specified for GetFiles.
            If not defined, the system will use the <see langword="*.dll"/> pattern.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.ExportServiceOptions.SearchSubDirectories">
            <summary>
            Gets or sets whether or not to search in sub-directories.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.ExportServiceOptions.ResolveTypes">
            <summary>
            Gets or sets whether or not the implementation type must be resolved from the service collection.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ManagedExtensibility.IAddServiceExport">
            <summary>
            Provides with an interface that allows external libraries to register types to the services collection.
            This interface is used with MEF : Managed Extensibility Framework.
            The implementation class must be decorated with the attribute <see langword="System.ComponentModel.Composition.ExportAttribute"/>
            with the type of <see cref="T:Xpandables.Net.ManagedExtensibility.IAddServiceExport"/> as contract type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.IAddServiceExport.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            When implemented, this method should add types to the services collection.
            </summary>
            <param name="services">The services collection to act on.</param>
            <param name="configuration">The application configuration.</param>
        </member>
        <member name="T:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog">
            <summary>
            Extends <see cref="T:System.ComponentModel.Composition.Hosting.DirectoryCatalog"/> to support discovery of parts in sub-directories.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog"/> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects based
            on all the DLL files in the specified directory path and its sub-directories.
            </summary>
            <param name="path">Path to the directory to scan for assemblies to add to the catalog.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog"/> class with <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> objects based on
            the specified search pattern in the specified directory path and its sub-directories.
            </summary>
            <param name="path">Path to the directory to scan for assemblies to add to the catalog.</param>
            <param name="searchPattern">The pattern to search with. The format of the pattern should be the same as specified for GetFiles.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="searchPattern"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition" /> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> object has been disposed of.</exception>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.DisplayName">
            <summary>
            Gets the display name of the composition element.
            </summary>
            <returns>The human-readable display name of the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" />.</returns>
        </member>
        <member name="P:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.Origin">
            <summary>
            Gets the composition element from which the current composition element originated.
            </summary>
            <returns>The composition element from which the current <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> originated, or <see langword="null" /> if the <see cref="T:System.ComponentModel.Composition.Primitives.ICompositionElement" /> is the root composition element.</returns>
        </member>
        <member name="E:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.Changed">
            <summary>
            Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> has changed.
            </summary>
        </member>
        <member name="E:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.Changing">
            <summary>
            Occurs when a <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> is changing.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ManagedExtensibility.RecursiveDirectoryCatalog.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1">
            <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            You can combine the use with <see cref="T:Xpandables.Net.Notifications.NotifyPropertyOnAttribute"/> to propagate notification.
            <para>This is an <see langword="abstract"/> and serializable class.</para>
            </summary>
            <typeparam name="T">Type of the derived class.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1"/> class and its <see cref="P:Xpandables.Net.Notifications.NotifyPropertyChanged`1.Dependencies"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``2(``0@,``0,System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <typeparam name="TProperty">Type of the property selector.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="selector">The expression delegate to retrieve the property name.</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>
            if the existing value matches the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="selector">The expression delegate to retrieve the property name.
            The expression expected is <see langword="nameof"/> with a delegate.</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>i
            f the existing value matched the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="selector"/> is not a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="propertyName">The name of the property. Optional (Already known at compile time).</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>
            if the existing value matches the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Notifications.NotifyPropertyChanged`1.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property name that has changed.</param>
        </member>
        <member name="P:Xpandables.Net.Notifications.NotifyPropertyChanged`1.Dependencies">
            <summary>
            Contains a collection of dependencies on property changed notification.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Notifications.NotifyPropertyChanged`1.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.GetMemberNameFromExpression(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Returns the member name from the expression.
            The expression delegate is <see langword="nameof"/>, otherwise the result is null.
            </summary>
            <param name="nameOfExpression">The expression delegate for the property : <see langword="nameof"/>
            with delegate expected.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nameOfExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="nameOfExpression"/> is
            not a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.GetMemberNameFromExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.DependencyPropertiesProvider">
            <summary>
            Provides with the collection of dependencies found in the underlying type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Notifications.NotifyPropertyOnAttribute">
            <summary>
            When used with <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1"/>, makes sure that the decorated property will be notified
            when the target specified property by <see cref="P:Xpandables.Net.Notifications.NotifyPropertyOnAttribute.Name"/> has changed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyOnAttribute.#ctor(System.String)">
            <summary>
            Specifies that the decorated property will be notified when the target specified by name has changed.
            We advise the use of <see langword="nameof(propertyName)"/> as value.
            </summary>
            <param name="name">The name of the target property which changes are notified to the decorated property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Notifications.NotifyPropertyOnAttribute.Name">
            <summary>
            Gets the name of the target property which changes are notified to the decorated property.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Optionals.Optional`1">
            <summary>
            Describes an object that can contain a value or not of a specific type.
            You can make unconditional calls to its contents using <see cref="N:System.Linq"/> without testing whether the content is there or not.
            The enumerator will only return the available value.
            If <typeparamref name="T"/> is an enumerable, use the <see cref="M:Xpandables.Net.Optionals.Optional`1.GetEnumerable"/> function to access its contain.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetEnumerable">
            <summary>
            Returns the available enumerable collection value when <typeparamref name="T"/> is an enumerable.
            If enumerable value is null, it'll return an empty enumerable.
            Otherwise, its will throw an exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <typeparamref name="T"/> is not an enumerable.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Map``1(System.ValueTuple{System.Func{``0},System.Func{`0,``0}})">
            <summary>
            Creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="pattern">The pattern to be used.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.MapAsync``1(System.ValueTuple{System.Func{System.Threading.Tasks.Task{``0}},System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Asynchronously creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="pattern">The pattern to be used.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Bind``1(System.Func{`0,Xpandables.Net.Optionals.Optional{``0}})">
            <summary>
            Turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.BindAsync``1(System.Func{`0,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}}})">
            <summary>
            Asynchronously turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Map(System.Func{`0,`0})">
            <summary>
            Creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.MapAsync(System.Func{`0,System.Threading.Tasks.Task{`0}})">
            <summary>
            Asynchronously creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.WhenEmpty(System.Func{`0})">
            <summary>
            Creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.WhenEmptyAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Asynchronously creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Empty">
            <summary>
            Provides with an optional of the specific type that is empty.
            </summary>
            <returns>An optional with no value nor exception.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Some(`0)">
            <summary>
            Provides with an optional that contains a value of specific type.
            </summary>
            <param name="result">The value to be used for optional.</param>
            <returns>An optional with a value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.CompareTo(Xpandables.Net.Optionals.Optional{`0})">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether
            the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
              Value
              Meaning
              Less than zero
              This instance precedes <paramref name="other" /> in the sort order.
              Zero
              This instance occurs in the same position in the sort order as <paramref name="other" />.
              Greater than zero
              This instance follows <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.CompareTo(`0)">
            <summary>Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
              Value
              Meaning
              Less than zero
              This instance precedes <paramref name="other" /> in the sort order.
              Zero
              This instance occurs in the same position in the sort order as <paramref name="other" />.
              Greater than zero
              This instance follows <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(Xpandables.Net.Optionals.Optional{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(`0)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value;
              otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ToString(System.String,System.IFormatProvider)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <param name="format">The format to use.
             -or-
             A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined
             for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.
             -or-
             A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric
             format information from the current locale setting of the operating system.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Xpandables.Net.Optionals.OptionalHelpers">
            <summary>
            Functionalities for optional pattern methods.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.AsOptional``1(``0)">
            <summary>
            Converts the specified value to an optional instance.
            </summary>
            <typeparam name="T">The Type of the value.</typeparam>
            <param name="value">The value to act on.</param>
            <returns>An optional instance.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.MapAsync``2(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.ValueTuple{System.Func{System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Asynchronously creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="pattern">The pattern to be used.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.BindAsync``2(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{``0,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``1}}})">
            <summary>
            Asynchronously turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.MapAsync``1(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{``0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.WhenEmptyAsync``1(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.Default">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.IQrCodeEngine">
            <summary>
            Allows an application author to manage qrCodes.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeEngine.UseTextGenerator(Xpandables.Net.QrCodes.IQrCodeTextGenerator)">
            <summary>
            Changes the text generator service to the new one.
            </summary>
            <param name="newTextGeneratorService">The new text generator service.</param>
            <returns>The actual instance with the new text generator.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newTextGeneratorService"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeEngine.UseImageGenerator(Xpandables.Net.QrCodes.IQrCodeImageGenerator)">
            <summary>
            Changes the image generator service to the new one.
            </summary>
            <param name="newImageGeneratorService">The new image generator service to use.</param>
            <returns>The actual instance with the new image generator service.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newImageGeneratorService"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeEngine.UseValidator(Xpandables.Net.QrCodes.IQrCodeValidator)">
            <summary>
            Changes the validator service to the new one.
            </summary>
            <param name="newValidatorService">The new validator service.</param>
            <returns>The actual instance with the new validator service.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newValidatorService"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeEngine.Generate(System.UInt32,System.String)">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="count">The number of qr-codes to be generates. Must be greater or equal to 1.</param>
            <param name="previousIndex">The previous index to be used.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="previousIndex"/> is not valid previous index.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeEngine.Generate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="textCodeList">The list of qr-codes text to generate image.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.InvalidOperationException">Generating images failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeEngine.Validate(System.String)">
            <summary>
            Validates that the specified qr-code matches the expected requirement.
            </summary>
            <param name="textCode">Th qr-code to be validated.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="textCode"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="textCode"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.QrCodes.IQrCodeImageGenerator">
            <summary>
            Provides a method to generate qr-code image.
            An implementation could be found in <see langword="Xpandables.QrCode"/> library.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeImageGenerator.Generate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="textCodeList">The list of qr-codes text to generate image.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.InvalidOperationException">Generating images failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.QrCodes.IQrCodeTextGenerator">
            <summary>
            Provides a method to generate qr-codes.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeTextGenerator.Generate(System.UInt32,System.String)">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="count">The number of qr-codes to be generates. Must be greater or equal to 1.</param>
            <param name="previous">The previous qr-code to be used.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="previous"/> is not valid previous index.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeTextGenerator.UseQrTextGenerator(Xpandables.Net.QrCodes.QrTextGeneratorDelegate)">
            <summary>
            Defines the generator delegate to be used to generate qr-code text.
            </summary>
            <param name="generatorDelegate">The generator delegate to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generatorDelegate"/> is null.</exception>
            <returns>The current instance of the service with the new text generator.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeTextGenerator.GenerateCode(System.String)">
            <summary>
            Generates a new code from the specified index.
            </summary>
            <param name="index">The index to be used.</param>
            <returns>A new string code.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeTextGenerator.Normalize(System.Int32,System.Int32)">
            <summary>
            Converts the value to string adding the zero to the left side for specified position.
            </summary>
            <param name="value">The value to be converted.</param>
            <param name="length">The number of zero to be added.</param>
            <returns>A new string.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrTextGeneratorDelegate">
            <summary>
            Defines the delegate used to generate a text for qr-code.
            </summary>
            <param name="previous"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.IQrCodeValidator">
            <summary>
            Provides a method for validating qr-code.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.IQrCodeValidator.IsValid(System.String)">
            <summary>
            Validates that the specified qr-code matches the expected requirement.
            </summary>
            <param name="textCode">Th qr-code to be validated.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="textCode"/> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="textCode"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.AbstractQrCode">
            <summary>
            The QrCode base class definition
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.AbstractQrCode.QrCodeData">
            <summary>
            Gets the QrCode content data.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AbstractQrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="P:Xpandables.Net.QrCodes.Presenter.AbstractQrCode.QrCodeData"/> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AbstractQrCode.SetQRCodeData(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Set a QRCodeData object that will be used to generate QR code. Used in COM Objects connections
            </summary>
            <param name="data">Need a QRCodeData object generated by QRCodeGenerator.CreateQrCode()</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AbstractQrCode.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.QrCodes.Presenter.AbstractQrCode.Dispose(System.Boolean)" /> executes in two distinct scenarios.
            <item>If <paramref name="disposing" /> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing" /> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.AsciiQrCode">
            <summary>
            The ASCII QrCode definition.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AsciiQrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.AsciiQrCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AsciiQrCode.GetGraphic(System.Int32)">
            <summary>
            Returns a strings that contains the resulting QR code as ASCII chars.
            </summary>
            <param name="repeatPerModule">Number of repeated darkColorString/whiteSpaceString per module.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AsciiQrCode.GetGraphic(System.Int32,System.String,System.String,System.String)">
            <summary>
            Returns a strings that contains the resulting QR code as ASCII chars.
            </summary>
            <param name="repeatPerModule">Number of repeated darkColorString/whiteSpaceString per module.</param>
            <param name="darkColorString">String for use as dark color modules. In case of string make sure whiteSpaceString has the same length.</param>
            <param name="whiteSpaceString">String for use as white modules (whitespace).
            In case of string make sure darkColorString has the same length.</param>
            <param name="endOfLine">End of line separator. (Default: \n)</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AsciiQrCode.GetLineByLineGraphic(System.Int32)">
            <summary>
            Returns an array of strings that contains each line of the resulting QR code as ASCII chars.
            </summary>
            <param name="repeatPerModule">Number of repeated darkColorString/whiteSpaceString per module.</param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.AsciiQrCode.GetLineByLineGraphic(System.Int32,System.String,System.String)">
            <summary>
            Returns an array of strings that contains each line of the resulting QR code as ASCII chars.
            </summary>
            <param name="repeatPerModule">Number of repeated darkColorString/whiteSpaceString per module.</param>
            <param name="darkColorString">String for use as dark color modules. In case of string make sure whiteSpaceString has the same length.</param>
            <param name="whiteSpaceString">String for use as white modules (whitespace).
            In case of string make sure darkColorString has the same length.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.Base64QrCode">
            <summary>
            The Base64 QrCode definition.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.Base64QrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.Base64QrCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.Base64QrCode.SetQRCodeData(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Set a QRCodeData object that will be used to generate QR code. Used in COM Objects connections
            </summary>
            <param name="data">Need a QRCodeData object generated by QRCodeGenerator.CreateQrCode()</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.Base64QrCode.GetGraphic(System.Int32)">
            <summary>
            Returns a strings that contains the resulting QR code as base64 chars.
            </summary>
            <param name="pixelsPerModule"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.Base64QrCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType)">
            <summary>
            Returns a strings that contains the resulting QR code as base64 chars.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHtmlHex"></param>
            <param name="lightColorHtmlHex"></param>
            <param name="drawQuietZones"></param>
            <param name="imgType"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.Base64QrCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType)">
            <summary>
            Returns a strings that contains the resulting QR code as base64 chars.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="drawQuietZones"></param>
            <param name="imgType"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.Base64QrCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean,Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType)">
            <summary>
            Returns a strings that contains the resulting QR code as base64 chars.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="icon"></param>
            <param name="iconSizePercent"></param>
            <param name="iconBorderWidth"></param>
            <param name="drawQuietZones"></param>
            <param name="imgType"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType">
            <summary>
            Defines the image type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType.Gif">
            <summary>
            Gif
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType.Jpeg">
            <summary>
            JPjeg
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType.Png">
            <summary>
            Png
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.BitmapByteQrCode">
            <summary>
            The BitmapByte QrCode definition.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.BitmapByteQrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.BitmapByteQrCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.BitmapByteQrCode.GetGraphic(System.Int32)">
            <summary>
            Returns an array of bytes that contains the resulting QR code as bytes.
            </summary>
            <param name="pixelsPerModule"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.BitmapByteQrCode.GetGraphic(System.Int32,System.String,System.String)">
            <summary>
            Returns an array of bytes that contains the resulting QR code as bytes.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHtmlHex"></param>
            <param name="lightColorHtmlHex"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.BitmapByteQrCode.GetGraphic(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Returns an array of bytes that contains the resulting QR code as bytes.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColorRgb"></param>
            <param name="lightColorRgb"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator">
            <summary>
            The payload generator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload">
            <summary>
            The payload base class
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload.Version">
            <summary>
            Gets the payload version.
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload.EccLevel">
            <summary>
            Gets the generator level.
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload.EciMode">
            <summary>
            gets the generator mode.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi">
            <summary>
            The Wifi class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.#ctor(System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.AuthenticationMode,System.Boolean)">
            <summary>
            Generates a WiFi payload. Scanned by a QR Code scanner app, the device will connect to the WiFi.
            </summary>
            <param name="ssid">SSID of the WiFi network</param>
            <param name="password">Password of the WiFi network</param>
            <param name="authenticationMode">Authentication mode (WEP, WPA, WPA2)</param>
            <param name="isHiddenSSID">Set flag, if the WiFi network hides its SSID</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.AuthenticationMode">
            <summary>
            Authentication mode.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.AuthenticationMode.WEP">
            <summary>
            WEP
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.AuthenticationMode.WPA">
            <summary>
            WPA
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WiFi.AuthenticationMode.nopass">
            <summary>
            No pass
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail">
            <summary>
            The mail class
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.#ctor(System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding)">
            <summary>
            Creates an empty email payload
            </summary>
            <param name="mailReceiver">Receiver's email address</param>
            <param name="encoding">Payload encoding type. Choose dependent on your QR Code scanner app.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.#ctor(System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding)">
            <summary>
            Creates an email payload with subject
            </summary>
            <param name="mailReceiver">Receiver's email address</param>
            <param name="subject">Subject line of the email</param>
            <param name="encoding">Payload encoding type. Choose dependent on your QR Code scanner app.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.#ctor(System.String,System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding)">
            <summary>
            Creates an email payload with subject and message/text
            </summary>
            <param name="mailReceiver">Receiver's email address</param>
            <param name="subject">Subject line of the email</param>
            <param name="message">Message content of the email</param>
            <param name="encoding">Payload encoding type. Choose dependent on your QR Code scanner app.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding">
            <summary>
            Mail encoding.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding.MAILTO">
            <summary>
            Mail to
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding.MATMSG">
            <summary>
            Mail message
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.EMail.MailEncoding.SMTP">
            <summary>
            Mail SMTP
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS">
            <summary>
            The SMS class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.#ctor(System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.SMSEncoding)">
            <summary>
            Creates a SMS payload without text
            </summary>
            <param name="number">Receiver phone number</param>
            <param name="encoding">Encoding type</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.#ctor(System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.SMSEncoding)">
            <summary>
            Creates a SMS payload with text (subject)
            </summary>
            <param name="number">Receiver phone number</param>
            <param name="subject">Text of the SMS</param>
            <param name="encoding">Encoding type</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.SMSEncoding">
            <summary>
            SMS Encoding.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.SMSEncoding.SMS">
            <summary>
            SMS
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.SMSEncoding.SMSTO">
            <summary>
            SMSTO
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SMS.SMSEncoding.SMS_iOS">
            <summary>
            SMS iOS
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS">
            <summary>
            The MMS class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.#ctor(System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.MMSEncoding)">
            <summary>
            Creates a MMS payload without text
            </summary>
            <param name="number">Receiver phone number</param>
            <param name="encoding">Encoding type</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.#ctor(System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.MMSEncoding)">
            <summary>
            Creates a MMS payload with text (subject)
            </summary>
            <param name="number">Receiver phone number</param>
            <param name="subject">Text of the MMS</param>
            <param name="encoding">Encoding type</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.MMSEncoding">
            <summary>
            MMS Encoding.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.MMSEncoding.MMS">
            <summary>
            MMS
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MMS.MMSEncoding.MMSTO">
            <summary>
            MMSTO
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation">
            <summary>
            The Geolocation class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation.#ctor(System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation.GeolocationEncoding)">
            <summary>
            Generates a geo location payload. Supports raw location (GEO encoding) or Google Maps link (GoogleMaps encoding)
            </summary>
            <param name="latitude">Latitude with . as splitter</param>
            <param name="longitude">Longitude with . as splitter</param>
            <param name="encoding">Encoding type - GEO or GoogleMaps</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation.GeolocationEncoding">
            <summary>
            Geolocation Encoding.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation.GeolocationEncoding.GEO">
            <summary>
            GEO
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Geolocation.GeolocationEncoding.GoogleMaps">
            <summary>
            Google Maps
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.PhoneNumber">
            <summary>
            The PhoneNumber class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.PhoneNumber.#ctor(System.String)">
            <summary>
            Generates a phone call payload
            </summary>
            <param name="number">Phonenumber of the receiver</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.PhoneNumber.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SkypeCall">
            <summary>
            The SkypeCall class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SkypeCall.#ctor(System.String)">
            <summary>
            Generates a Skype call payload
            </summary>
            <param name="skypeUsername">Skype username which will be called</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SkypeCall.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Url">
            <summary>
            The Url Class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Url.#ctor(System.String)">
            <summary>
            Generates a link. If not given, http/https protocol will be added.
            </summary>
            <param name="url">Link url target</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Url.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WhatsAppMessage">
            <summary>
            The WhastAppMessage class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WhatsAppMessage.#ctor(System.String,System.String)">
            <summary>
            Let's you compose a WhatApp message and send it the receiver number.
            </summary>
            <param name="number">Receiver phone number</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WhatsAppMessage.#ctor(System.String)">
            <summary>
            Let's you compose a WhatApp message. When scanned the user is asked to choose a contact who will receive the message.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.WhatsAppMessage.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Bookmark">
            <summary>
            The Bookmarl class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Bookmark.#ctor(System.String,System.String)">
            <summary>
            Generates a bookmark payload. Scanned by an QR Code reader, this one creates a browser bookmark.
            </summary>
            <param name="url">Url of the bookmark</param>
            <param name="title">Title of the bookmark</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Bookmark.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData">
            <summary>
            The Contact Data class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ContactOutputType,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.AddressOrder)">
            <summary>
            Generates a vCard or meCard contact dataset
            </summary>
            <param name="outputType">Payload output type</param>
            <param name="firstname">The firstname</param>
            <param name="lastname">The lastname</param>
            <param name="nickname">The displayname</param>
            <param name="phone">Normal phone number</param>
            <param name="mobilePhone">Mobile phone</param>
            <param name="workPhone">Office phone number</param>
            <param name="email">E-Mail address</param>
            <param name="birthday">Birthday</param>
            <param name="website">Website / Homepage</param>
            <param name="street">Street</param>
            <param name="houseNumber">Housenumber</param>
            <param name="city">City</param>
            <param name="zipCode">Zip code</param>
            <param name="country">Country</param>
            <param name="note">Memo text / notes</param>
            <param name="stateRegion">State or Region</param>
            <param name="addressOrder">The address order format to use</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ContactOutputType">
            <summary>
            Possible output types. Either vCard 2.1, vCard 3.0, vCard 4.0 or MeCard.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ContactOutputType.MeCard">
            <summary>
            Card
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ContactOutputType.VCard21">
            <summary>
            VCArd21
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ContactOutputType.VCard3">
            <summary>
            VCArd3
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.ContactOutputType.VCard4">
            <summary>
            VCard4
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.AddressOrder">
            <summary>
            define the address format
            Default: European format, ([Street] [House Number] and [Postal Code] [City]
            Reversed: North American and others format ([House Number] [Street] and [City] [Postal Code])
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.AddressOrder.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ContactData.AddressOrder.Reversed">
            <summary>
            Reversed
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BitcoinAddress">
            <summary>
            The BitcoinAddress class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BitcoinAddress.#ctor(System.String,System.Nullable{System.Double},System.String,System.String)">
            <summary>
            Generates a Bitcoin payment payload. QR Codes with this payload can open a Bitcoin payment app.
            </summary>
            <param name="address">Bitcoin address of the payment receiver</param>
            <param name="amount">Amount of Bitcoins to transfer</param>
            <param name="label">Reference label</param>
            <param name="message">Referece text aka message</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BitcoinAddress.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode">
            <summary>
            The Swiss QrCode.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Currency,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact,System.Nullable{System.Decimal},System.Nullable{System.DateTime},Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact,System.String,System.String)">
            <summary>
            Generates the payload for a SwissQrCode v2.0. (Don't forget to use ECC-Level=M, EncodingMode=UTF-8 and to set the Swiss flag icon to the final QR code.)
            </summary>
            <param name="iban">IBAN object</param>
            <param name="currency">Currency (either EUR or CHF)</param>
            <param name="creditor">Creditor (payee) information</param>
            <param name="reference">Reference information</param>
            <param name="additionalInformation"></param>
            <param name="debitor">Debitor (payer) information</param>
            <param name="amount">Amount</param>
            <param name="requestedDateOfPayment">Requested date of debitor's payment</param>
            <param name="ultimateCreditor">Ultimate creditor information (use only in consultation with your bank - for future use only!)</param>
            <param name="alternativeProcedure1">Optional command for alternative processing mode - line 1</param>
            <param name="alternativeProcedure2">Optional command for alternative processing mode - line 2</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation">
            <summary>
            The additional class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.#ctor(System.String,System.String)">
            <summary>
            Creates an additional information object. Both parameters are optional and must be shorter than 141 chars in combination.
            </summary>
            <param name="unstructuredMessage">Unstructured text message</param>
            <param name="billInformation">Bill information</param>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.UnstructureMessage">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.BillInformation">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.Trailer">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.AdditionalInformation.SwissQrCodeAdditionalInformationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceType,System.String,System.Nullable{Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType})">
            <summary>
            Creates a reference object which must be passed to the SwissQrCode instance
            </summary>
            <param name="referenceType">Type of the reference (QRR, SCOR or NON)</param>
            <param name="reference">Reference text</param>
            <param name="referenceTextType">Type of the reference text (QR-reference or Creditor Reference)</param>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.RefType">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceText">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceType">
            <summary>
            Reference type. When using a QR-IBAN you have to use either "QRR" or "SCOR"
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceType.QRR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceType.SCOR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceType.NON">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType.QrReference">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.ReferenceTextType.CreditorReferenceIso11649">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Reference.SwissQrCodeReferenceException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.#ctor(System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.IbanType)">
            <summary>
            IBAN object with type information
            </summary>
            <param name="iban">IBAN</param>
            <param name="ibanType">Type of IBAN (normal or QR-IBAN)</param>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.IsQrIban">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.IbanType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.IbanType.Iban">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.IbanType.QrIban">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Iban.SwissQrCodeIbanException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Contact type. Can be used for payee, ultimate payee, etc. with address in structured mode (S).
            </summary>
            <param name="name">Last name or company (optional first name)</param>
            <param name="zipCode">Zip-/Postcode</param>
            <param name="city">City name</param>
            <param name="country">Two-letter country code as defined in ISO 3166-1</param>
            <param name="street">Streetname without house number</param>
            <param name="houseNumber">House number</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Contact type. Can be used for payee, ultimate payee, etc. with address in combined mode (K).
            </summary>
            <param name="name">Last name or company (optional first name)</param>
            <param name="country">Two-letter country code as defined in ISO 3166-1</param>
            <param name="addressLine1">Adress line 1</param>
            <param name="addressLine2">Adress line 2</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.AddressType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.AddressType.StructuredAddress">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.AddressType.CombinedAddress">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Contact.SwissQrCodeContactException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Currency">
            <summary>
            ISO 4217 currency codes
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Currency.CHF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.Currency.EUR">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.SwissQrCodeException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.SwissQrCodeException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.SwissQrCodeException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SwissQrCode.SwissQrCodeException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.#ctor(System.String,System.String,System.String,System.Decimal,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.TypeOfRemittance,System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeVersion,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding)">
            <summary>
            Generates the payload for a Girocode (QR-Code with credit transfer information).
            Attention: When using Girocode payload, QR code must be generated with ECC level M!
            </summary>
            <param name="iban">Account number of the Beneficiary. Only IBAN is allowed.</param>
            <param name="bic">BIC of the Beneficiary Bank.</param>
            <param name="name">Name of the Beneficiary.</param>
            <param name="amount">Amount of the Credit Transfer in Euro.
            (Amount must be more than 0.01 and less than 999999999.99)</param>
            <param name="remittanceInformation">Remittance Information (Purpose-/reference text). (optional)</param>
            <param name="typeOfRemittance">Type of remittance information. Either structured (e.g. ISO 11649 RF Creditor Reference) and max. 35 chars or unstructured and max. 140 chars.</param>
            <param name="purposeOfCreditTransfer">Purpose of the Credit Transfer (optional)</param>
            <param name="messageToGirocodeUser">Beneficiary to originator information. (optional)</param>
            <param name="version">Girocode version. Either 001 or 002. Default: 001.</param>
            <param name="encoding">Encoding of the Girocode payload. Default: ISO-8859-1</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeVersion">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeVersion.Version1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeVersion.Version2">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.TypeOfRemittance">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.TypeOfRemittance.Structured">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.TypeOfRemittance.Unstructured">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.UTF_8">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_2">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_4">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_5">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_7">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_10">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeEncoding.ISO_8859_15">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Girocode.GirocodeException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for contact data
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="account">Bank account (Kontonummer)</param>
            <param name="bnc">Bank institute (Bankleitzahl)</param>
            <param name="iban">IBAN</param>
            <param name="bic">BIC</param>
            <param name="reason">Reason (Verwendungszweck)</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.Decimal,System.String,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.Int32,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency,System.Nullable{System.DateTime})">
            <summary>
            Constructor for non-SEPA payments
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="account">Bank account (Kontonummer)</param>
            <param name="bnc">Bank institute (Bankleitzahl)</param>
            <param name="amount">Amount (Betrag)</param>
            <param name="periodicTimeunit">Unit of intervall for payment ('M' = monthly, 'W' = weekly)</param>
            <param name="periodicTimeunitRotation">Intervall for payment. This value is combined with 'periodicTimeunit'</param>
            <param name="periodicFirstExecutionDate">Date of first periodic execution</param>
            <param name="periodicLastExecutionDate">Date of last periodic execution</param>
            <param name="reason">Reason (Verwendungszweck)</param>
            <param name="postingKey">Transfer Key (Textschlüssel, z.B. Spendenzahlung = 69)</param>
            <param name="currency">Currency (Währung)</param>
            <param name="executionDate">Execution date (Ausführungsdatum)</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.Decimal,System.String,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency,System.Nullable{System.DateTime})">
            <summary>
            Constructor for SEPA payments
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="iban">IBAN</param>
            <param name="bic">BIC</param>
            <param name="amount">Amount (Betrag)</param>
            <param name="periodicTimeunit">Unit of intervall for payment ('M' = monthly, 'W' = weekly)</param>
            <param name="periodicTimeunitRotation">Intervall for payment. This value is combined with 'periodicTimeunit'</param>
            <param name="periodicFirstExecutionDate">Date of first periodic execution</param>
            <param name="periodicLastExecutionDate">Date of last periodic execution</param>
            <param name="creditorId">Creditor id (Gläubiger ID)</param>
            <param name="mandateId">Manadate id (Mandatsreferenz)</param>
            <param name="dateOfSignature">Signature date (Erteilungsdatum des Mandats)</param>
            <param name="reason">Reason (Verwendungszweck)</param>
            <param name="sepaReference">SEPA reference (SEPA-Referenz)</param>
            <param name="currency">Currency (Währung)</param>
            <param name="executionDate">Execution date (Ausführungsdatum)</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.#ctor(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType,System.String,System.String,System.String,System.String,System.String,System.Decimal,System.String,System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.String,System.Int32,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency,System.Nullable{System.DateTime},System.Int32)">
            <summary>
            Generic constructor. Please use specific (non-SEPA or SEPA) constructor
            </summary>
            <param name="authority">Type of the bank transfer</param>
            <param name="name">Name of the receiver (Empfänger)</param>
            <param name="account">Bank account (Kontonummer)</param>
            <param name="bnc">Bank institute (Bankleitzahl)</param>
            <param name="iban">IBAN</param>
            <param name="bic">BIC</param>
            <param name="amount">Amount (Betrag)</param>
            <param name="periodicTimeunit">Unit of intervall for payment ('M' = monthly, 'W' = weekly)</param>
            <param name="periodicTimeunitRotation">Intervall for payment. This value is combined with 'periodicTimeunit'</param>
            <param name="periodicFirstExecutionDate">Date of first periodic execution</param>
            <param name="periodicLastExecutionDate">Date of last periodic execution</param>
            <param name="creditorId">Creditor id (Gläubiger ID)</param>
            <param name="mandateId">Manadate id (Mandatsreferenz)</param>
            <param name="dateOfSignature">Signature date (Erteilungsdatum des Mandats)</param>
            <param name="reason">Reason (Verwendungszweck)</param>
            <param name="postingKey">Transfer Key (Textschlüssel, z.B. Spendenzahlung = 69)</param>
            <param name="sepaReference">SEPA reference (SEPA-Referenz)</param>
            <param name="currency">Currency (Währung)</param>
            <param name="executionDate">Execution date (Ausführungsdatum)</param>
            <param name="internalMode">Only used for internal state handdling</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency">
            <summary>
            ISO 4217 currency codes
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ALL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.DZD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ARS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AUD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BSD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BHD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BDT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AMD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BBD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BMD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BTN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BOB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BWP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BZD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SBD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BND">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MMK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BIF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KHR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CAD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CVE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KYD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.LKR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CLP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CNY">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.COP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KMF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CRC">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.HRK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CUP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CZK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.DKK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.DOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SVC">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ETB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ERN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.FKP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.FJD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.DJF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GMD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GIP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GTQ">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GNF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GYD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.HTG">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.HNL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.HKD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.HUF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ISK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.INR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.IDR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.IRR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.IQD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ILS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.JMD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.JPY">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KZT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.JOD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KES">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KPW">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KRW">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KWD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.KGS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.LAK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.LBP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.LSL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.LRD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.LYD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MWK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MYR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MVR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MRO">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MUR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MXN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MNT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MDL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MAD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.OMR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.NAD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.NPR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ANG">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AWG">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.VUV">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.NZD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.NIO">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.NGN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.NOK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PKR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PAB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PGK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PYG">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PEN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PHP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.QAR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.RUB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.RWF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SHP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.STD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SAR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SCR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SLL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SGD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.VND">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SOS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ZAR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SSP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SZL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SEK">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CHF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SYP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.THB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TOP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TTD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AED">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TND">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.UGX">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MKD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.EGP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GBP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TZS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.USD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.UYU">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.UZS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.WST">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.YER">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TWD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CUC">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ZWL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TMT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GHS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.VEF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SDG">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.UYI">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.RSD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MZN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AZN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.RON">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CHE">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CHW">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TRY">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XAF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XCD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XOF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XPF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XBA">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XBB">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XBC">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XBD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XAU">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XDR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XAG">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XPT">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XTS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XPD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XUA">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.ZMW">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.SRD">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MGA">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.COU">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AFN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.TJS">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.AOA">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BYR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BGN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CDF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BAM">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.EUR">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.MXV">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.UAH">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.GEL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BOV">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.PLN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.BRL">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.CLF">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XSU">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.USN">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.Currency.XXX">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType">
            <summary>
            Operation modes of the BezahlCode
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.singlepayment">
            <summary>
            Single payment (Überweisung)
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.singlepaymentsepa">
            <summary>
            Single SEPA payment (SEPA-Überweisung)
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.singledirectdebit">
            <summary>
            Single debit (Lastschrift)
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.singledirectdebitsepa">
            <summary>
            Single SEPA debit (SEPA-Lastschrift)
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.periodicsinglepayment">
            <summary>
            Periodic payment (Dauerauftrag)
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.periodicsinglepaymentsepa">
            <summary>
            Periodic SEPA payment (SEPA-Dauerauftrag)
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.contact">
            <summary>
            Contact data
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.AuthorityType.contact_v2">
            <summary>
            Contact data V2
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.BezahlCodeException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.BezahlCodeException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.BezahlCodeException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.BezahlCode.BezahlCodeException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent.EventEncoding)">
            <summary>
            Generates a calender entry/event payload.
            </summary>
            <param name="subject">Subject/title of the calender event</param>
            <param name="description">Description of the event</param>
            <param name="location">Location (lat:long or address) of the event</param>
            <param name="start">Start time of the event</param>
            <param name="end">End time of the event</param>
            <param name="allDayEvent">Is it a full day event?</param>
            <param name="encoding">Type of encoding (universal or iCal)</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent.EventEncoding">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent.EventEncoding.iCalComplete">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.CalendarEvent.EventEncoding.Universal">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Type">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Secret">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.AuthAlgorithm">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Algorithm">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Issuer">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Label">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Digits">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Counter">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.Period">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthType">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthType.TOTP">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthType.HOTP">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm.SHA1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm.SHA256">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OneTimePasswordAuthAlgorithm.SHA512">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm.SHA1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm.SHA256">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.OoneTimePasswordAuthAlgorithm.SHA512">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.OneTimePassword.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.#ctor(System.String,System.Int32,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method,System.String)">
            <summary>
            Generates a ShadowSocks proxy config payload.
            </summary>
            <param name="hostname">Hostname of the ShadowSocks proxy</param>
            <param name="port">Port of the ShadowSocks proxy</param>
            <param name="password">Password of the SS proxy</param>
            <param name="method">Encryption type</param>
            <param name="tag">Optional tag line</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.#ctor(System.String,System.Int32,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="hostname"></param>
             <param name="port"></param>
             <param name="password"></param>
             <param name="method"></param>
             <param name="plugin"></param>
             <param name="pluginOption"></param>
             <param name="tag"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.#ctor(System.String,System.Int32,System.String,Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
             <summary>
            
             </summary>
             <param name="hostname"></param>
             <param name="port"></param>
             <param name="password"></param>
             <param name="method"></param>
             <param name="parameters"></param>
             <param name="tag"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Chacha20IetfPoly1305">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes128Gcm">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes192Gcm">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Gcm">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.XChacha20IetfPoly1305">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes128Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes192Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes128Ctr">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes192Ctr">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Ctr">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Camellia128Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Camellia192Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Camellia256Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Chacha20Ietf">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes128Ofb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes192Ofb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Ofb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes128Cfb1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes192Cfb1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cfb1">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes128Cfb8">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes192Cfb8">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Aes256Cfb8">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Chacha20">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.BfCfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Rc4Md5">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Salsa20">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.DesCfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.IdeaCfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Rc2Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Cast5Cfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Salsa20Ctr">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Rc4">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.SeedCfb">
             <summary>
            
             </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.Method.Table">
             <summary>
            
             </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ShadowSocksConfig.ShadowSocksConfigException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction.#ctor(System.String,System.Nullable{System.Single},System.String,System.String,System.String)">
            <summary>
            Creates a monero transaction payload
            </summary>
            <param name="address">Receiver's monero address</param>
            <param name="txAmount">Amount to transfer</param>
            <param name="txPaymentId">Payment id</param>
            <param name="recipientName">Receipient's name</param>
            <param name="txDescription">Reference text / payment description</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction.MoneroTransactionException">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction.MoneroTransactionException.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction.MoneroTransactionException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.MoneroTransaction.MoneroTransactionException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr">
             <summary>
            
             </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr.Version">
            <summary>
            Gets the payload version.
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr.EccLevel">
            <summary>
            Gets the generator level.
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr.EciMode">
            <summary>
            gets the generator mode.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="payerName"></param>
             <param name="payerAddress"></param>
             <param name="payerPlace"></param>
             <param name="recipientName"></param>
             <param name="recipientAddress"></param>
             <param name="recipientPlace"></param>
             <param name="recipientIban"></param>
             <param name="description"></param>
             <param name="amount"></param>
             <param name="recipientSiModel"></param>
             <param name="recipientSiReference"></param>
             <param name="code"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Double,System.Nullable{System.DateTime},System.String,System.String,System.String)">
             <summary>
            
             </summary>
             <param name="payerName"></param>
             <param name="payerAddress"></param>
             <param name="payerPlace"></param>
             <param name="recipientName"></param>
             <param name="recipientAddress"></param>
             <param name="recipientPlace"></param>
             <param name="recipientIban"></param>
             <param name="description"></param>
             <param name="amount"></param>
             <param name="deadline"></param>
             <param name="recipientSiModel"></param>
             <param name="recipientSiReference"></param>
             <param name="code"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.SlovenianUpnQr.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PayloadGenerator.ChecksumMod10(System.String)">
             <summary>
            
             </summary>
             <param name="digits"></param>
             <returns></returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PngByteQrCode">
            <summary>
            The PNGByte QrCode definition.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.PngByteQrCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.GetGraphic(System.Int32)">
            <summary>
            Creates a black &amp; white PNG of the QR code, using 1-bit grayscale.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.GetGraphic(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Creates 2-color PNG of the QR code, using 1-bit indexed color. Accepts 3-byte RGB colors for normal images and 4-byte RGBA-colors for transparent images.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.DrawScanlines(System.Int32)">
            <summary>
            Creates a bitmap where each pixel is represented by a single bit, dark = 0 and light = 1.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.PngBuilder">
            <summary>
            Writes the chunks that make up a PNG file.
            </summary>
            <remarks>
            See https://www.w3.org/TR/2003/REC-PNG-20031110 and https://www.ietf.org/rfc/rfc1950.txt.
            </remarks>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.PngBuilder.WriteHeader(System.Int32,System.Int32,System.Byte,Xpandables.Net.QrCodes.Presenter.PngByteQrCode.PngBuilder.ColorType)">
            <summary>
            Writes the IHDR chunk. This must be the first chunk in the file.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.PngBuilder.WritePalette(System.Byte[][])">
            <summary>
            Writes the PLTE chunk, and also the tRNS chunk if necessary. Must come before the IDAT chunk.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.PngBuilder.WriteScanlines(System.Byte[])">
            <summary>
            Writes the IDAT chunk with the actual picture.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PngByteQrCode.PngBuilder.WriteEnd">
            <summary>
            Writes the IEND chunk. This must be the last chunk in the file.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode">
            <summary>
            The Postscript QrCode
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.GetGraphic(System.Int32,System.Boolean)">
            <summary>
            Returns a strings that contains the resulting QR code as postscript chars.
            </summary>
            <param name="pointsPerModule"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Returns a strings that contains the resulting QR code as postscript chars.
            </summary>
            <param name="pointsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="drawQuietZones"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a strings that contains the resulting QR code as postscript chars.
            </summary>
            <param name="pointsPerModule"></param>
            <param name="darkColorHex"></param>
            <param name="lightColorHex"></param>
            <param name="drawQuietZones"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.GetGraphic(System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>
            Returns a strings that contains the resulting QR code as postscript chars.
            </summary>
            <param name="viewBox"></param>
            <param name="drawQuietZones"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.GetGraphic(System.Drawing.Size,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a strings that contains the resulting QR code as postscript chars.
            </summary>
            <param name="viewBox"></param>
            <param name="darkColorHex"></param>
            <param name="lightColorHex"></param>
            <param name="drawQuietZones"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.PostScriptQrCode.GetGraphic(System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Returns a strings that contains the resulting QR code as postscript chars.
            </summary>
            <param name="viewBox"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="drawQuietZones"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QrCode">
            <summary>
            The QrCode class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            Returns a bitmap that contains the resulting QR code as image.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="drawQuietZones"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCode.GetGraphic(System.Int32)">
            <summary>
            Returns a bitmap that contains the resulting QR code as image.
            </summary>
            <param name="pixelsPerModule"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Returns a bitmap that contains the resulting QR code as image.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHtmlHex"></param>
            <param name="lightColorHtmlHex"></param>
            <param name="drawQuietZones"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a bitmap that contains the resulting QR code as image.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="icon"></param>
            <param name="iconSizePercent"></param>
            <param name="iconBorderWidth"></param>
            <param name="drawQuietZones"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QrCodeData">
            <summary>
            The QrCode Content.
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.QrCodeData.ModuleMatrix">
            <summary>
            The module content list.
            </summary>
        </member>
        <member name="P:Xpandables.Net.QrCodes.Presenter.QrCodeData.Version">
            <summary>
            Gets the data version.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCodeData.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeData"/> class with the version.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCodeData.#ctor(System.String,Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeData"/> class with content and compression mode.
            </summary>
            <param name="pathToRawData"></param>
            <param name="compressMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCodeData.#ctor(System.Byte[],Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeData"/> class with content and compression mode.
            </summary>
            <param name="rawData"></param>
            <param name="compressionModel"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCodeData.GetRawData(Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode)">
            <summary>
            Returns the data content according the compression mode.
            </summary>
            <param name="compressMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCodeData.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.QrCodes.Presenter.QrCodeData.Dispose(System.Boolean)" /> executes in two distinct scenarios.
            <item>If <paramref name="disposing" /> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing" /> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode">
            <summary>
            Compression mode.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode.UnCompressed">
            <summary>
            UnCompress
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode.Deflate">
            <summary>
            Deflate
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QrCodeData.CompressionMode.GZip">
            <summary>
            GZip.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">
            <summary>
            The <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> exception
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QrCodeException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException" /> class with a specified error message.</summary>
            <param name="eccLevel">The level of the message.</param>
            <param name="encodingMode"></param>
            <param name="maxSizeByte"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator">
            <summary>
            The QrCode generator class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode">
            <summary>
            Eci Mode
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode.Default">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode.Iso8859_1">
            <summary>
            Iso8859_1
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode.Iso8859_2">
            <summary>
            Iso8859_2
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode.Utf8">
            <summary>
            UFT8
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.#ctor">
            <summary>
            Initializes the QR code generator
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.CreateQrCode(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.CreateQrCode(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.CreateQrCode(System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="plainText">The payload which shall be encoded in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <param name="forceUtf8">Shall the generator be forced to work in UTF-8 mode?</param>
            <param name="utf8BOM">Should the byte-order-mark be used?</param>
            <param name="eciMode">Which ECI mode shall be used?</param>
            <param name="requestedVersion">Set fixed QR code target version.</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.CreateQrCode(System.Byte[],Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="binaryData">A byte array which shall be encoded/stored in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.GenerateQrCode(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.GenerateQrCode(Xpandables.Net.QrCodes.Presenter.PayloadGenerator.Payload,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="payload">A payload object, generated by the PayloadGenerator-class</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.GenerateQrCode(System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="plainText">The payload which shall be encoded in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <param name="forceUtf8">Shall the generator be forced to work in UTF-8 mode?</param>
            <param name="utf8BOM">Should the byte-order-mark be used?</param>
            <param name="eciMode">Which ECI mode shall be used?</param>
            <param name="requestedVersion">Set fixed QR code target version.</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.GenerateQrCode(System.Byte[],Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel)">
            <summary>
            Calculates the QR code data which than can be used in one of the rendering classes to generate a graphical representation.
            </summary>
            <param name="binaryData">A byte array which shall be encoded/stored in the QR code</param>
            <param name="eccLevel">The level of error correction data</param>
            <exception cref="T:Xpandables.Net.QrCodes.Presenter.QrCodeException">Thrown when the payload is too big to be encoded in a QR code.</exception>
            <returns>Returns the raw QR code data which can be used for rendering.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel">
            <summary>
            Error correction level. These define the tolerance levels for how much of the code can be lost before the code cannot be recovered.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel.L">
            <summary>
            7% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel.M">
            <summary>
            15% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel.Q">
            <summary>
            25% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel.H">
            <summary>
            30% may be lost before recovery is not possible
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            </summary>
            <param name="disposing"><see langword="true" /> to release both managed and unmanaged resources;
            <see langword="false" /> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.Dispose(System.Boolean)" /> executes in two distinct scenarios.
            <item>If <paramref name="disposing" /> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing" /> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.SvgQRCode">
            <summary>
            The SVG QrCode class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.#ctor(Xpandables.Net.QrCodes.Presenter.QrCodeData)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.Presenter.SvgQRCode" /> class with the QrCode data content.
            </summary>
            <param name="data">The QrCode data content.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="data" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.GetGraphic(System.Int32)">
            <summary>
            Returns a strings that contains the resulting QR code as SVG.
            </summary>
            <param name="pixelsPerModule"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.GetGraphic(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean,Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode)">
            <summary>
            Returns a strings that contains the resulting QR code as SVG.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="drawQuietZones"></param>
            <param name="sizingMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.GetGraphic(System.Int32,System.String,System.String,System.Boolean,Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode)">
            <summary>
            Returns a strings that contains the resulting QR code as SVG.
            </summary>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHex"></param>
            <param name="lightColorHex"></param>
            <param name="drawQuietZones"></param>
            <param name="sizingMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.GetGraphic(System.Drawing.Size,System.Boolean,Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode)">
            <summary>
            Returns a strings that contains the resulting QR code as SVG.
            </summary>
            <param name="viewBox"></param>
            <param name="drawQuietZones"></param>
            <param name="sizingMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.GetGraphic(System.Drawing.Size,System.Drawing.Color,System.Drawing.Color,System.Boolean,Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode)">
            <summary>
            Returns a strings that contains the resulting QR code as SVG.
            </summary>
            <param name="viewBox"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="drawQuietZones"></param>
            <param name="sizingMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.Presenter.SvgQRCode.GetGraphic(System.Drawing.Size,System.String,System.String,System.Boolean,Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode)">
            <summary>
            Returns a strings that contains the resulting QR code as SVG.
            </summary>
            <param name="viewBox"></param>
            <param name="darkColorHex"></param>
            <param name="lightColorHex"></param>
            <param name="drawQuietZones"></param>
            <param name="sizingMode"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode">
            <summary>
            Sizing Mode.
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode.WidthHeightAttribute">
            <summary>
            Width Height
            </summary>
        </member>
        <member name="F:Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode.ViewBoxAttribute">
            <summary>
            ViewBox
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrCodeEngine">
            <summary>
            The default Qr-Code engine.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.#ctor(Xpandables.Net.QrCodes.IQrCodeTextGenerator,Xpandables.Net.QrCodes.IQrCodeImageGenerator,Xpandables.Net.QrCodes.IQrCodeValidator)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.QrCodes.QrCodeEngine"/>.
            </summary>
            <param name="textGeneratorService">The text generator.</param>
            <param name="imageGeneratorService">The image generator.</param>
            <param name="validatorService">the validator service.</param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.UseTextGenerator(Xpandables.Net.QrCodes.IQrCodeTextGenerator)">
            <summary>
            Changes the text generator service to the new one.
            </summary>
            <param name="newTextGeneratorService">The new text generator service.</param>
            <returns>The actual instance with the new text generator.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newTextGeneratorService" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.UseImageGenerator(Xpandables.Net.QrCodes.IQrCodeImageGenerator)">
            <summary>
            Changes the image generator service to the new one.
            </summary>
            <param name="newImageGeneratorService">The new image generator service to use.</param>
            <returns>The actual instance with the new image generator service.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newImageGeneratorService" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.UseValidator(Xpandables.Net.QrCodes.IQrCodeValidator)">
            <summary>
            Changes the validator service to the new one.
            </summary>
            <param name="newValidatorService">The new validator service.</param>
            <returns>The actual instance with the new validator service.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="newValidatorService" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.Generate(System.UInt32,System.String)">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="count">The number of qr-codes to be generates. Must be greater or equal to 1.</param>
            <param name="previousIndex">The previous index to be used.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="previousIndex" /> is not valid previous index.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.Generate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="textCodeList">The list of qr-codes text to generate image.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.InvalidOperationException">Generating images failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeEngine.Validate(System.String)">
            <summary>
            Validates that the specified qr-code matches the expected requirement.
            </summary>
            <param name="textCode">Th qr-code to be validated.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="textCode" /> is not valid.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="textCode" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrCodeHelpers">
            <summary>
            Provides with methods to extend use <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.ToByte(System.Drawing.Bitmap)">
            <summary>
            Converts the bitmap image to the byte format using the default Jpeg format.
            </summary>
            <remarks>If error, return default value. See trace listener output for exception.</remarks>
            <param name="image">The source image to be converted.</param>
            <returns>An array of byte that represents the image.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.ToByte(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts the bitmap image to the byte format using the specified format.
            </summary>
            <remarks>If error, return default value. See trace listener output for exception.</remarks>
            <param name="image">The source image to be converted.</param>
            <param name="imageFormat">The target image format.</param>
            <returns>An array of byte that represents the image.</returns>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.CoptyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the input stream to the output one.
            </summary>
            <param name="input">The stream source.</param>
            <param name="output">The stream destination</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="input"/></exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="output"/></exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetQrCode(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32,System.Drawing.Bitmap,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pixelsPerModule"></param>
            <param name="darkColor"></param>
            <param name="lightColor"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
            <param name="icon"></param>
            <param name="iconSizePercent"></param>
            <param name="iconBorderWidth"></param>
            <param name="drawQuietZones"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetAsciiQrCode(System.String,System.Int32,System.String,System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32,System.String)">
            <summary>
            Returns an ASCII <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pixelsPerModule"></param>
            <param name="darkColorString"></param>
            <param name="whiteSpaceString"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
            <param name="endOfLine"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetBase64QrCode(System.String,System.Int32,System.String,System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32,System.Boolean,Xpandables.Net.QrCodes.Presenter.Base64QrCode.ImageType)">
            <summary>
            Returns an Bas64 <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHtmlHex"></param>
            <param name="lightColorHtmlHex"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
            <param name="drawQuietZones"></param>
            <param name="imgType"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetSvgQrRCode(System.String,System.Int32,System.String,System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32,System.Boolean,Xpandables.Net.QrCodes.Presenter.SvgQRCode.SizingMode)">
            <summary>
            Returns an Svg <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHex"></param>
            <param name="lightColorHex"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
            <param name="drawQuietZones"></param>
            <param name="sizingMode"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetPostScriptQrCode(System.String,System.Int32,System.String,System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Returns a Postscript <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pointsPerModule"></param>
            <param name="darkColorHex"></param>
            <param name="lightColorHex"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
            <param name="drawQuietZones"></param>
            <param name="epsFormat"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetPngByteQrCode(System.String,System.Int32,System.Byte[],System.Byte[],Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Returns a Png Byte <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pixelsPerModule"></param>
            <param name="darkColorRgba"></param>
            <param name="lightColorRgba"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetPngByteQrCode(System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            /// Returns a Png Byte <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="txt"></param>
            <param name="eccLevel"></param>
            <param name="size"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetBitmapByteQrCode(System.String,System.Int32,System.String,System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Boolean,System.Boolean,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.EciMode,System.Int32)">
            <summary>
            Returns an Bitmap Byte <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="plainText"></param>
            <param name="pixelsPerModule"></param>
            <param name="darkColorHtmlHex"></param>
            <param name="lightColorHtmlHex"></param>
            <param name="eccLevel"></param>
            <param name="forceUtf8"></param>
            <param name="utf8BOM"></param>
            <param name="eciMode"></param>
            <param name="requestedVersion"></param>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeHelpers.GetBitmapByteQrCode(System.String,Xpandables.Net.QrCodes.Presenter.QRCodeGenerator.ECCLevel,System.Int32)">
            <summary>
            Returns a Bitmap Byte <see cref="T:Xpandables.Net.QrCodes.Presenter.QrCode"/> using the definition properties.
            </summary>
            <param name="txt"></param>
            <param name="eccLevel"></param>
            <param name="size"></param>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrCodeImageGenerator">
            <inheritdoc />
            <summary>
            Generates qr-code image.
            You must derive from this class to implement a custom generator that match your requirement.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeImageGenerator.Generate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="textCodeList">The list of qr-codes text to generate image.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.InvalidOperationException">Generating images failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrCodeOptions">
            <summary>
            Defines options to configure qr-code engine.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeOptions.UseImageGenerator``1">
            <summary>
            Defines a custom type for image generator.
            The type will resolved from the system services provider.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeOptions.UseTextGeneraor``1">
            <summary>
            Defines a custom type for text generator.
            The type will resolved from the system services provider.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeOptions.UseCodeValidator``1">
            <summary>
            Defines a custom type for code validator.
            The type will resolved from the system services provider.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrCodeTextGenerator">
            <inheritdoc />
            <summary>
            Generates qr-codes.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeTextGenerator.Generate(System.UInt32,System.String)">
            <summary>
            Generates a list of qr-codes.
            </summary>
            <param name="count">The number of qr-codes to be generates. Must be greater or equal to 1.</param>
            <param name="previous">The previous qr-code to be used.</param>
            <returns>A new list of qr-codes</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="previous" /> is not valid previous index.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.QrCodeTextGenerator.UseQrTextGenerator(Xpandables.Net.QrCodes.QrTextGeneratorDelegate)">
            <summary>
            Defines the generator delegate to be used to generate qr-code text.
            </summary>
            <param name="generatorDelegate">The generator delegate to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="generatorDelegate" /> is null.</exception>
            <returns>The current instance of the service with the new text generator.</returns>
        </member>
        <member name="T:Xpandables.Net.QrCodes.QrCodeValidator">
            <summary>
            Provides default validation for qr-codes.
            </summary>
        </member>
        <member name="T:Xpandables.Net.QrCodes.SecurityChecker">
            <summary>
            This class is used for CRC.
            </summary>
        </member>
        <member name="M:Xpandables.Net.QrCodes.SecurityChecker.ComputeChecksum(System.Byte[])">
            <summary>
            Computes check sum for the specified array of bytes.
            </summary>
            <param name="bytes">The array of bytes to act on.</param>
            <returns>The number that represents the check sum.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="bytes"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The process failed to execute. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.QrCodes.SecurityChecker.#ctor">
            <summary>
            Returns the default instance and initializes the CRC table.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Queries.IQuery`1">
            <summary>
            Defines a query that contains a specific-type result when using the query pattern.
            </summary>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Queries.IQueryHandler`2">
            <summary>
            Defines a generic method that a class implements to asynchronously handle a type-specific query and
            returns a type-specific result.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TQuery">Type of the query that will be used as argument.</typeparam>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Queries.IQueryHandlerWrapper`1">
            <summary>
            This interface allows application authors to avoid use of C# dynamics with query pattern.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IQueryHandlerWrapper`1.HandleAsync(Xpandables.Net.Queries.IQuery{`0},System.Threading.CancellationToken)">
            <summary>
            Handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Queries.QueryHandlerBuilder`2">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TQuery">Type of argument to act on.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerBuilder`2.#ctor(System.Func{Xpandables.Net.Queries.IQuery{`1},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{`1}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.QueryHandlerBuilder`2"/> with the delegate to be used
            as <see cref="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerBuilder`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been cancelled.</exception>
        </member>
        <member name="T:Xpandables.Net.Queries.QueryHandlerWrapper`2">
            <summary>
            Implementation for <see cref="T:Xpandables.Net.Queries.IQueryHandlerWrapper`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.QueryHandlerWrapper`2"/> class.
            </summary>
            <param name="decoratee">The query handler instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.HandleAsync(Xpandables.Net.Queries.IQuery{`1},System.Threading.CancellationToken)">
            <summary>
            Handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.CommandRetryBehavior`1">
            <summary>
            This class allows the application author to add retry support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Retry.IBehaviorRetry"/> interface in order to activate the behavior.
            The target command handler can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1"/> to manage retry execution.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Retry.CommandRetryBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Retry.CommandRetryBehavior`1"/> class.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.CommandRetryBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.IBehaviorRetry">
            <summary>
            A marker interface that allows the command/query class handler implementation to be decorated with the retry behavior according to
            the decorated class type :
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Retry.QueryRetryBehavior`2"/>.
            <see cref="T:System.Windows.Input.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Retry.CommandRetryBehavior`1"/>.
            The command/query class must be decorated with <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> or implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider"/>.
            The handler can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1"/> to manage the retry execution.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider">
            <summary>
            An interface representing an <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> to be dynamically applied on the implementing class.
            This interface takes priority over the <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> declaration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider.GetRetryBehaviorAttribute(System.IServiceProvider)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> to be applied on the current instance.
            </summary>
            <param name="serviceProvider">The service provider instance.</param>
            <returns>An instance of a new <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1">
            <summary>
            This interface needs to be implemented by the command/query handler to manage the retry execution.
            </summary>
            <typeparam name="TArgument">The command/query type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryBehaviorHandler`1.BeforeRetry(`0,Xpandables.Net.Retry.IRetryContext)">
            <summary>
            This method get called before the retry execution.
            </summary>
            <param name="argument">The argument used to call the method with.</param>
            <param name="context">The retry execution context.</param>
        </member>
        <member name="T:Xpandables.Net.Retry.IRetryContext">
            <summary>
            The retry behavior execution context.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.Exception">
            <summary>
            Gets the handled exception.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.TimeInterval">
            <summary>
            Gets or sets the retry interval in milliseconds.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.RetryCount">
            <summary>
            Gets the retry number to be executed.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.RetryFailed">
            <summary>
            Determines whether the retry execution failed. Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.UpdateTimeInterval(System.TimeSpan)">
            <summary>
            Updates the <see cref="P:Xpandables.Net.Retry.IRetryContext.TimeInterval"/> value.
            </summary>
            <param name="timeInterval">The new value.</param>
            <returns>The instance with the new time interval.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="timeInterval"/> must be greater or equal to zero.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.UpdateException(System.Exception)">
            <summary>
            Updates the exception value.
            </summary>
            <param name="exception">The handled exception.</param>
            <returns>The instance with the new exception.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.IncreaseRetryCount">
            <summary>
            Increases the retry count value.
            </summary>
            <returns>The instance with the new value.</returns>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.RetryIsFailed">
            <summary>
            Sets the retry execution is failed.
            </summary>
            <returns>The instance with the new value.</returns>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.RetryIsNotFailed">
            <summary>
            Sets that the retry execution is not failed.
            </summary>
            <returns>The instance with the new value.</returns>
        </member>
        <member name="T:Xpandables.Net.Retry.QueryRetryBehavior`2">
            <summary>
            This class allows the application author to add persistence support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Retry.IBehaviorRetry"/> interface in order to activate the behavior.
            The target command handler can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1"/> to manage retry execution.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Retry.QueryRetryBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Retry.QueryRetryBehavior`2"/>.
            </summary>
            <param name="decoratee">The query to decorate.</param>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.QueryRetryBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryBehaviorAttribute">
            <summary>
            Describes the parameters for a command/query used to apply retry behavior.
            The attribute should decorate implementations of <see cref="T:Xpandables.Net.Queries.IQuery`1"/> or <see cref="T:Xpandables.Net.Commands.ICommand"/>.
            Your class can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider"/> to dynamically return a <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.RetryBehaviorAttribute.ExceptionTypes">
            <summary>
            Gets the collection of exception types that allow the retry behavior to occur.
            The default value is <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.RetryBehaviorAttribute.RetryNumber">
            <summary>
            Gets the number of retry. The default value is 3.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.RetryBehaviorAttribute.RetryInterval">
            <summary>
            Gets the interval time between retries (in milliseconds). The default value is 500.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorAttribute.IsValid">
            <summary>
            Determines whether or not the attribute arguments are valid.
            </summary>
            <returns>Returns the current instance if so, otherwise throws an exception.</returns>
            <exception cref="T:System.ArgumentNullException">Arguments are not valid.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryBehaviorException">
            <summary>
            the retry behavior exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Xpandables.Net.Retry.RetryBehaviorException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Xpandables.Net.Retry.RetryBehaviorException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorException.#ctor">
            <summary>
            Initializes the default <see cref="T:Xpandables.Net.Retry.RetryBehaviorException"/> class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryContext">
            <summary>
            Provides with the retry behavior current execution context.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryContext.#ctor(System.Exception,System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Retry.RetryContext"/> class with context information.
            </summary>
            <param name="exception">The handled exception.</param>
            <param name="timeInterval">The time interval.</param>
            <param name="retryCount">The retry count.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="retryCount"/> must be greater that zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeInterval"/> must be greater or equal to zero.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryHelpers">
            <summary>
            Provides extensions methods for behaviors.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryHelpers.GetRetryBehaviorAttribute``1(``0,System.IServiceProvider)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> from the specified argument.
            </summary>
            <typeparam name="TSource">The type of the argument.</typeparam>
            <param name="source">The source instance.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1">
            <summary>
            This class allows the application author to add transaction support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Transactions.IBehaviorTransaction"/> in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/>, that you should
            provide an implementation and use the extension method <see langword="AddTransactionScopeBehavior{TTransactionScopeProvider}"/>
            for registration. The transaction scope definition comes from the
            <see cref="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)"/> method.
            if no transaction is returned, the execution is done normally.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Transactions.CommandTransactionBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},Xpandables.Net.Transactions.ITransactionScopeProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1"/>.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="transactionScopeProvider">The transaction scope provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transactionScopeProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Transactions.CommandTransactionBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Transactions.IBehaviorTransaction">
            <summary>
            A marker interface that allows the handler class implementation to be decorated with transaction behavior according to
            the decorated class type :
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2"/>.
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1"/>.
            You must implement the <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/> to provide the transaction scope.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Transactions.ITransactionScopeProvider">
            <summary>
            Provides with a method to retrieve a definition of a transaction scope to be applied to the target command/query.
            You should provide an implementation of this interface that will be used with the <see cref="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1"/>
            of <see cref="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2"/> decorator to add transaction behavior to the execution flow.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)">
            <summary>
            Returns an instance that contains the transaction scope to be used when handling the target command/query.
            </summary>
            <param name="argument">The command/query instance to retrieve the transaction scope for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2">
            <summary>
            This class allows the application author to add transaction support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Transactions.IBehaviorTransaction"/> in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/>, that you should
            provide an implementation and use the extension method for registration.
            The transaction scope definition comes from the <see cref="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)"/> method.
            if no transaction is returned, the execution is done normally.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Transactions.QueryTransactionBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.Transactions.ITransactionScopeProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2"/>.
            </summary>
            <param name="decoratee">The query handler to decorate.</param>
            <param name="transactionScopeProvider">The transaction scope provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transactionScopeProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Transactions.QueryTransactionBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1">
            <summary>
            This class allows the application author to add validation support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.ValidatorRules.IBehaviorValidation"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1"/>
            and applies all validators found to the target command before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> or <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRule`1"/> for validation.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},Xpandables.Net.ValidatorRules.ICompositeValidatorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1"/>.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1">
            <summary>
            The composite validator used to wrap all validators for a specific type.
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1.#ctor(System.Collections.Generic.IEnumerable{Xpandables.Net.ValidatorRules.IValidatorRule{`0}})">
            <summary>
            Initializes the composite validator with all validators for the argument.
            </summary>
            <param name="validators">The collection of validators to act with.</param>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies all validators to the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException" /> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument" /> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IBehaviorValidation">
            <summary>
            A marker interface that allows the command/query class to be decorated with the validation behavior according to the class type :
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2"/> while
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1"/>.
            The default validation behavior uses the data annotations validator on validation attributes. You can implement the interface
            <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> or derive a class from <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRule`1"/> to customize a validation behavior.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method
            for the validation behavior and to register all your custom implementations.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule">
            <summary>
            Defines a method contract used to validate an argument using composition (wrapping all validators of a specific-type).
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ICompositeValidatorRule.ValidateAsync(System.Object)">
            <summary>
            Asynchronously applies all validators to the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            </summary>
            <param name="target">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1">
            <summary>
            Defines a method contract used to validate a type-specific argument using composition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies all validators to the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider">
            <summary>
            Allows an application author to add type description provider for any class.
            For more information about description and others, see the <see cref="T:System.ComponentModel.TypeDescriptor"/> class.
            The implementation must be thread-safe when working in a multi-threaded environment.
            Any operation that does not deliver or do what it promises to do should throw an exception. 
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.AddProvider``1(``0,System.String,System.Reflection.Assembly[])">
            <summary>
            Adds the type description provider specified by the meta-data description name for the current instance.
            The meta-data class must be name "{<paramref name="metadataDescriptionTypeName"/>}", must be public, and available from
            the <paramref name="instance"/> assembly or any custom loaded assembly in the current application domain.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="instance">Contains the instance to which the meta-data type description will be added.</param>
            <param name="metadataDescriptionTypeName">Contains the name of the type used to find the meta-data class for 
            the current <paramref name="instance"/>.</param>
            <param name="assemblies">The collection of assemblies to search in.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="metadataDescriptionTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.AddProvider``1(``0,System.Type)">
            <summary>
            Adds the specified type description provider to the instance.
            Any operation that does not deliver or do what it promises to do should throw an exception. 
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="instance">Contains the instance to which the meta-data type description will be added.</param>
            <param name="metadataDescriptionType">Contains the meta-data type description to add to the current <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="metadataDescriptionType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.AddProvider``1(``0)">
            <summary>
            Adds the type description provider specified by its name for the current instance.
            The meta-data class must be name "{InstanceTypeName}{Metadata}", must be public, 
            and available from the <paramref name="instance"/> assembly or any custom loaded assembly in the current application domain.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="instance">Contains the instance to which the meta-data type description will be added.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="instance"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.AddProviderFromType``1(``0,System.Type)">
            <summary>
            Adds the description provider from the description type.
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="descriptionType">The description type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="descriptionType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.AddProviderFromStringName``1(``0,System.String,System.Reflection.Assembly[])">
            <summary>
            Adds the description provider from the description type name.
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="metadataDescriptionTypeName">The meta data description type name.</param>
            <param name="assemblies">The collection of assemblies to search in.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadataDescriptionTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.GetDescriptionTypeFromName``1(``0,System.String,System.Reflection.Assembly[])">
            <summary>
            Returns the description type if found.
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="metadataDescriptionTypeName">The meta data description type name.</param>
            <param name="assemblies">The collection of assemblies to search in.</param>
            <returns>If found, returns the description type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadataDescriptionTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider.AddMetadataDescriptionType``1(``0,System.Type)">
            <summary>
            Adds the description provider to the instance, if specified or adds the description from the current type;
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="descriptionType">The description <typeparamref name="TSource"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IValidatorRule">
            <summary>
            Defines a method contract used to validate an argument.
            The implementation must be thread-safe when working in a multi-threaded environment.
            <para>Contains default implementation. You just need to override the method.</para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IValidatorRule.ValidateAsync(System.Object)">
            <summary>
            Asynchronous applies validation process and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            <para>The default implementation use <see cref="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)"/>.</para>
            </summary>
            <param name="target">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="P:Xpandables.Net.ValidatorRules.IValidatorRule.Order">
            <summary>
            Determines the zero-base order in which the validator will be executed.
            The default value is zero.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IValidatorRule`1">
            <summary>
            Defines a method contract used to validate a type-specific argument.
            The implementation must be thread-safe when working in a multi-threaded environment.
            <para>Contains default implementation. You just need to override the method.</para>
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies validation the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.MetadataDescriptionProvider">
            <summary>
            Default implementation of <see cref="T:Xpandables.Net.ValidatorRules.IMetataDescriptionProvider"/>.
            Defines methods used to add type description provider for any class.
            For more information about description and others, see the <see cref="T:System.ComponentModel.TypeDescriptor"/> class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.NullValidatorRule`1">
            <summary>
            Validator when no explicit registration exist for a given type.
            </summary>
            <typeparam name="TArgument">Type of argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.NullValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Default implementation.
            </summary>
            <param name="_">The argument to be validated.</param>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2">
            <summary>
            This class allows the application author to add validation support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.ValidatorRules.IBehaviorValidation"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1"/>
            and applies all validators found to the target query before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> or <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRule`1"/> for validation.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.ValidatorRules.ICompositeValidatorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2"/>.
            </summary>
            <param name="decoratee">The query handler to decorate.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ValidatorRule">
            <summary>
            Defines the default implementation for validating an argument of type-specific.
            <para>You must derive from this class to implement a custom validator that match your requirement.
            If you want to apply many validators for one argument, see <see cref="T:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1"/>.</para>
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ValidatorRule`1">
            <summary>
            Defines the default implementation for validating an argument of type-specific.
            <para>You must derive from this class to implement a custom validator that match your requirement.
            If you want to apply many validators for one argument, see <see cref="T:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1"/>.</para>
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TArgument">Type of the argument.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> implementation.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies validation the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ValueObject">
            <summary>
            An object that represents a descriptive aspect of the domain with no conceptual identity.
            <para><see cref="T:Xpandables.Net.ValueObject"/> are instantiated to represent elements of the design that we care about only
            for what they are not who or which they are.” [Source : Evans 2003]</para>
            This is an <see langword="abstract"/> and <see langword="serializable"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueObject.GetEqualityComponents">
            <summary>
            When implemented in derived class, this method will provide the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            The comparison is done by using SequenceEqual() on the two sets of components.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.EqualOperator(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.op_Equality(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.op_Inequality(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares difference.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.NotEqualOperator(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares difference.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Xpandables.Net.ValueRange`1">
            <summary>
            Defines a pair of values, representing a segment.
            This class uses <see cref="T:Xpandables.Net.ValueRangeConverter"/> as type converter.
            </summary>
            <typeparam name="TValue">The Type of each of two values of range.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValueRange`1"/> with the specified values.
            </summary>
            <param name="min">The minimal value of range.</param>
            <param name="max">The maximal value of range.</param>
        </member>
        <member name="P:Xpandables.Net.ValueRange`1.Min">
            <summary>
            Gets the minimal value of range.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ValueRange`1.Max">
            <summary>
            Gets the maximal value of range.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.ToString">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.ValueRange`1"/> separated by ":".
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the string <see cref="T:Xpandables.Net.ValueRange`1"/> using the specified format and provider.
            The format will received address properties in the following order : <see cref="P:Xpandables.Net.ValueRange`1.Min"/> and <see cref="P:Xpandables.Net.ValueRange`1.Max"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Xpandables.Net.ValueRange`1"/> with other object.
            </summary>
            <param name="obj">Object to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.GetHashCode">
            <summary>
            Computes the hash-code for the <see cref="T:Xpandables.Net.ValueRange`1"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.op_Equality(Xpandables.Net.ValueRange{`0},Xpandables.Net.ValueRange{`0})">
            <summary>
            Applies equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.op_Inequality(Xpandables.Net.ValueRange{`0},Xpandables.Net.ValueRange{`0})">
            <summary>
            Applies non equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Equals(Xpandables.Net.ValueRange{`0})">
            <summary>
            Compares <see cref="T:Xpandables.Net.ValueRange`1"/> with the value of type <typeparamref name="TValue"/>.
            </summary>
            <param name="other">Option to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.IsEmpty">
            <summary>
            Determines whether this range is empty or not.
            Returns <see langword="true"/> if so, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValueRangeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.ValueRange`1"/> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type
            to a range value object using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a range value object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1">
            <summary>
            This class allows the application author to add visitor support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1"/>
            and applies all visitors found to the target command before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.VisitorRules.IVisitorRule`1"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},Xpandables.Net.VisitorRules.ICompositeVisitorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1"/>.
            </summary>
            <param name="decoratee">the decorated command handler.</param>
            <param name="visitor">the visitor to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.CompositeVisitorRule`1">
            <summary>
            The composite visitor used to wrap all visitors for a specific visitable type.
            </summary>
            <typeparam name="TElement">Type of the element to be visited</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CompositeVisitorRule`1.#ctor(System.Collections.Generic.IEnumerable{Xpandables.Net.VisitorRules.IVisitorRule{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.VisitorRules.CompositeVisitorRule`1"/> with a collection of visitors.
            </summary>
            <param name="visitors">The collection of visitors for a specific type.</param>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CompositeVisitorRule`1.VisitAsync(`0)">
            <summary>
            Applies all found visitors to the element according to the visitor order.
            </summary>
            <param name="element">The element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element" /> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable" />.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1">
            <summary>
            Allows an application author to apply the visitor pattern using composition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1.VisitAsync(`0)">
            <summary>
            Asynchronously applies all found visitors to the element according to the visitor order.
            </summary>
            <param name="element">The element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule">
            <summary>
            Allows an application author to apply the visitor pattern using composition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.ICompositeVisitorRule.VisitAsync(System.Object)">
            <summary>
            Asynchronously applies all found visitors to the target element according to the visitor order.
            </summary>
            <param name="target">The target element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.IVisitable">
            <summary>
            Defines an Accept operation that takes a visitor as an argument.
            Visitor design pattern allows you to add new behaviors to an existing object without changing the object structure.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitable.AcceptAsync(Xpandables.Net.VisitorRules.IVisitorRule)">
            <summary>
            Defines the Accept operation.
            When overridden in derived class, this method will accept the specified visitor.
            The default behavior just call the visit method of the visitor on the current instance.
            </summary>
            <param name="visitor">The visitor to be applied on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitable.AcceptAsync(Xpandables.Net.VisitorRules.ICompositeVisitorRule)">
            <summary>
            Defines the Accept operation with <see cref="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule"/>.
            </summary>
            <param name="visitor">The composite visitor to be applied on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.IVisitorRule">
            <summary>
            Visitor allows you to add new behaviors to an existing object without changing the object structure.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior checks that the argument is not null and implements <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.
            </summary>
            <param name="target">The target element to be visited, must implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.VisitorRules.IVisitorRule.Order">
            <summary>
            Determines the zero-base order in which the visitor will be applied.
            The default value is zero.
            </summary>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.IVisitorRule`1">
            <summary>
            Allows an application author to apply the visitor pattern : The generic Visitor definition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitorRule`1.VisitAsync(`0)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior just call the non-generic <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)"/> method from base interface
            for validating the element.
            The non-generic method <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)"/> checks that the argument is not null and implements <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.
            </summary>
            <param name="element">Element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.NullVisitorRule`1">
            <summary>
            Visitor when no explicit registration exist for a given type.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.NullVisitorRule`1.VisitAsync(`0)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior just call the non-generic <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)" /> method from base interface
            for validating the element.
            The non-generic method <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)" /> checks that the argument is not null and implements <see cref="T:Xpandables.Net.VisitorRules.IVisitable" />.
            </summary>
            <param name="element">Element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element" /> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable" />.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2">
            <summary>
            This class allows the application author to add visitor support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1"/>
            and applies all visitors found to the target query before the query get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.VisitorRules.IVisitorRule`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.VisitorRules.ICompositeVisitorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2"/>.
            </summary>
            <param name="decoratee">The query to be decorated.</param>
            <param name="visitor">The composite visitor to apply</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
    </members>
</doc>
