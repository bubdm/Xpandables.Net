<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xpandables.Net</name>
    </assembly>
    <members>
        <member name="T:Xpandables.Net.Commands.CommandHandlerBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Commands.CommandHandlerBuilder`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Commands.CommandHandlerBuilder`1"/> class with the delegate to be used
            as <see cref="M:Xpandables.Net.Commands.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Commands.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Commands.CommandHandlerBuilder`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command using the delegate from the constructor.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Commands.ICommand">
            <summary>
            This interface is used as a marker for commands when using the command pattern.
            Class implementation is used with the <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/> where
            "TCommand" is <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation.
            This can also be enhanced with some useful decorators.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Commands.ICommandHandler`1">
            <summary>
            Allows an application author to define a handler for a specific type command.
            The command must implement <see cref="T:Xpandables.Net.Commands.ICommand"/> interface.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TCommand">Type of the command to be handled.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Commands.ICommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Correlation.CommandCorrelationBehavior`1">
            <summary>
            This class allows the application author to add post/rollback event support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target command handler class implementation should reference the
            <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TCommand">Type of the command to be handled.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.CommandCorrelationBehavior`1.#ctor(Xpandables.Net.Correlation.CorrelationContext,Xpandables.Net.Commands.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.CommandCorrelationBehavior`1"/> class with the correlation context and the command handler to be decorated.
            </summary>
            <param name="correlationContext">The correlation context.</param>
            <param name="decoratee">The command handler to be decorated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.CommandCorrelationBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command adding post/rollback event to the decorated handler.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationCollection`2">
            <summary>
            Provides a collection of objects that need to be shared across asynchronous control flows.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.Correlation.CorrelationCollection`2"/>
            class that is empty, has the default concurrency level, has the default initial
            capacity, and uses the default comparer for the key type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationCollection`2.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Returns an enumerator that iterates asynchronously through the collection.
            </summary>
            <param name="cancellationToken">A System.Threading.CancellationToken that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationContext">
            <summary>
            Default implementation of <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/>. This class depends on <see cref="T:System.IServiceProvider"/>.
            This class must be used through a behavior and must be registered as follow :
            <code>
                services.AddScoped{CorrelationContext};
                services.AddScoped{ICorrelationContext}(provider=>provider.GetRequiredService{CorrelationContext}());
            </code>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.CorrelationContext"/> with the service provider.
            </summary>
            <param name="provider">The service provider to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="provider"/> is null.</exception>
        </member>
        <member name="E:Xpandables.Net.Correlation.CorrelationContext.PostEvent">
            <summary>
            The event that will be raised after the main one in the same control flow only if there is no exception.
            The event will received the control flow return value for non-void method.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.CorrelationContext.RollbackEvent">
            <summary>
            The event that will be raised after the main one when exception. The event will received the control flow handled exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.System#IServiceProvider#GetService(System.Type)">
            <summary>
             Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>A service object of type serviceType or null if there is no service object of type serviceType.</returns>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.OnPostEventAsync(System.Object)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Correlation.CorrelationContext.PostEvent"/> event.
            </summary>
            <param name="returnValue">The control flow return value only for non-void method.</param>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.OnRollbackEventAsync(System.Exception)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Correlation.CorrelationContext.RollbackEvent"/> event.
            </summary>
            <param name="exception">The control flow handled exception.</param>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationContext.Reset(System.String)">
            <summary>
            Clears the event.
            </summary>
            <param name="event">The event to reset.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.IBehaviorCorrelation">
            <summary>
            A marker interface that allows the command/query class to add correlation context event after control flow.
            In the class handling the query or command, you should reference
            the <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> and set the <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/> and/or
            <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>.
            <para></para>
            Note that <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/> will be raised at the end of the control only if there is no exception,
            giving you access to all data still alive on the control flow and the <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>
            will only be raised when exception. The exception in that case in accessible through the
            <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>.
            <para></para>
            You need to register the expected behavior using the appropriate extension method.
            <para></para>
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Correlation.QueryCorrelationBehavior`2"/>.
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Correlation.CommandCorrelationBehavior`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationPostEvent">
            <summary>
            Defines a method signature to be used to handle post event in correlation context.
            </summary>
            <param name="provider">The service provider.</param>
            <param name="returnValue">The control flow return value only for non-void method.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationRollbackEvent">
            <summary>
            Defines a method signature to be used to handler rollback event in correlation context.
            </summary>
            <param name="provider">The service provider.</param>
            <param name="exception">The control flow handled exception.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.ICorrelationContext">
            <summary>
            Defines two tasks that can be used to follow process after a control flow with <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/>
            and on exception during the control flow with <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/>.
            In order to be activated, the target class should implement
            the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> interface,
            the target handling class should reference the current interface (to set the action) and you should
            register the behavior with the expected extension
            method <see langword="AddXCorrelationBehavior"/>.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent">
            <summary>
            The event that will be raised after the main one in the same control flow only if there is no exception.
            The event will contain the control flow "return value" for non-void method.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent">
            <summary>
            The event that will be raised after the main one when exception. The event will contain the control flow handled exception.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.QueryCorrelationBehavior`2">
            <summary>
            This class allows the application author to add post/rollback event support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target query handler class should reference the
            <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.QueryCorrelationBehavior`2.#ctor(Xpandables.Net.Correlation.CorrelationContext,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.QueryCorrelationBehavior`2"/> class.
            </summary>
            <param name="correlationContext">the event register.</param>
            <param name="decoratee">The decorated query handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.QueryCorrelationBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Creators.IInstanceCreator">
            <summary>
            Provides with methods to create instance of specific type at runtime using delegate and cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.IInstanceCreator.Cache">
            <summary>
            Contains the instance cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.IInstanceCreator.OnException">
            <summary>
            Define an action that will be called in case of handled exception during a create method execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <param name="type">The type to be created.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``1(System.Type,``0)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam">The type of the parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param">The parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``2(System.Type,``0,``1)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam1">The type of the first parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam2">The type of the second parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param1">The first parameter to pass to the constructor.</param>
            <param name="param2">The first parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param1"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param2"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance of the <paramref name="type"/> or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam1">The type of the first parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam2">The type of the second parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam3">The type of the third parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param1">The first parameter to pass to the constructor.</param>
            <param name="param2">The first parameter to pass to the constructor.</param>
            <param name="param3">The first parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param1"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param2"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="param3"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.ClearCache">
            <summary>
            Clear the constructor cache.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Creators.InstanceCreator">
            <summary>
            Default implementation for <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/>.
            You can customize the behavior providing your own implementing of <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/> interface.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.InstanceCreator.OnException">
            <summary>
            Define an action that will be called in case of handled exception during a create method execution.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.InstanceCreator.Cache">
            <summary>
            Contains the instance cache.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Creators.InstanceCreator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Creators.InstanceCreator"/> with the string generator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Cryptography.IStringCryptography">
            <summary>
            Provides with methods to encrypt and decrypt string values.
            Contains a default implementation using the <see cref="T:Xpandables.Net.Cryptography.IStringGenerator"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.IStringCryptography.StringGenerator">
            <summary>
            Gets the string generator the cryptography.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Encrypt(System.String,System.UInt16)">
            <summary>
            Returns an encrypted string from the value using a randomize key.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="keySize">The size of the string key to be used to encrypt the string value.</param>
            <returns>An encrypted object that contains the encrypted value and its key.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="keySize"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Encrypt(System.String,System.String,System.String)">
            <summary>
            Returns an encrypted string from the value string using the specified key and the salt value.
            If <paramref name="key"/> or <paramref name="salt"/> is not provided, a default value will be used.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="key">The optional key value to be used for encryption.</param>
            <param name="salt">The optional salt base64 string value to be used for encryption.</param>
            <returns>An encrypted object that contains the encrypted value, its key and its salt.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.EncryptAsync(System.String,System.String,System.String)">
            <summary>
            Returns an encrypted string from the value string using the specified key and the salt value.
            If <paramref name="key"/> or <paramref name="salt"/> is not provided, a default value will be used.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="key">The optional key value to be used for encryption.</param>
            <param name="salt">The optional salt base64 string value to be used for encryption.</param>
            <returns>An encrypted object that contains the encrypted value, its key and its salt.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Decrypt(System.String,System.String,System.String)">
            <summary>
            Returns an decrypted string from the encrypted value.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="key">The key value to be used for decryption.</param>
            <param name="value">The base64 encrypted value to be decrypted.</param>
            <param name="salt">The salt base64 string value to be used for decryption.</param>
            <returns>A decrypted string from the encrypted values.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="salt"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.Decrypt(Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Returns an decrypted string from the encrypted object.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="encrypted">The object that contains encrypted information.</param>
            <returns>A decrypted string from the encrypted object.</returns>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.DecryptAsync(Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Returns an decrypted string from the encrypted object.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="encrypted">The object that contains encrypted information.</param>
            <returns>A decrypted string from the encrypted object.</returns>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringCryptography.AreEqual(Xpandables.Net.Cryptography.ValueEncrypted,System.String)">
            <summary>
            Compares the encrypted object with the plain text one.
            Returns <see langword="true"/> if equality otherwise <see langword="false"/>.
            </summary>
            <param name="encrypted">The encrypted object.</param>
            <param name="value">The value to compare with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The comparison failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.StringCryptography">
            <summary>
            String cryptography engine.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.StringCryptography.StringGenerator">
            <summary>
            Gets the string generator the cryptography.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.StringCryptography.#ctor(Xpandables.Net.Cryptography.IStringGenerator)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Cryptography.StringCryptography"/> class.
            </summary>
            <param name="stringGenerator">The string generator.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stringGenerator"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.IStringGenerator">
            <summary>
            Provides with methods to generate strings, encrypt and decrypt string values.
            Contains a default implementation.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Cryptography.IStringGenerator.LookupCharacters">
            <summary>
            The lookup characters used to generate random string.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringGenerator.Generate(System.UInt16,System.String)">
            <summary>
            Generates a string of the specified length that contains random characters from the lookup characters.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <param name="lookupCharacters">The string to be used to pick characters from or default one.</param>
            <returns>A new string of the specified length with random characters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="lookupCharacters"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringGenerator.GenerateSalt(System.UInt16)">
            <summary>
            Generates a salt base64 string of the specified byte length.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <returns>A new base64 string from the salt bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Generating the salt failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.IStringGenerator.Generate(System.UInt16)">
            <summary>
            Generates a string of the specified length that contains random characters.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <returns>A new string of the specified length with random characters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.StringGenerator">
            <summary>
            Provides with <see cref="T:Xpandables.Net.Cryptography.IStringGenerator"/> implementation.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Cryptography.ValueEncrypted">
            <summary>
            Defines a representation of an encrypted value, its key and its salt.
            This class uses the <see cref="T:Xpandables.Net.Cryptography.ValueEncryptedConverter"/> type converter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.#ctor(System.String,System.String,System.String)">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> with the key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The encrypted value.</param>
            <param name="salt">The salt value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="salt"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.Deconstruct(System.String@,System.String@,System.String@)">
            <summary>
            Provides with deconstruction for <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/>.
            </summary>
            <param name="key">The output key.</param>
            <param name="value">The output value.</param>
            <param name="salt">the output salt value.</param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.IsEqualTo(System.String,Xpandables.Net.Cryptography.IStringCryptography)">
            <summary>
            Compares the encrypted value with the specified one.
            Returns <see langword="true"/> if equality otherwise <see langword="false"/>.
            </summary>
            <param name="value">The value to compare with.</param>
            <param name="stringCryptography">The cryptography instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stringCryptography"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Cryptography.ValueEncrypted.Key">
            <summary>
            Contains the encryption key.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.ValueEncrypted.Value">
            <summary>
            Contains the base64 encrypted value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Cryptography.ValueEncrypted.Salt">
            <summary>
            Contains the base64 salt value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> with other object.
            </summary>
            <param name="obj">Object to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.op_Equality(Xpandables.Net.Cryptography.ValueEncrypted,Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Applies equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.op_Inequality(Xpandables.Net.Cryptography.ValueEncrypted,Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Applies non equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.Equals(Xpandables.Net.Cryptography.ValueEncrypted)">
            <summary>
            Compares <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> with the value.
            </summary>
            <param name="other">Option to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.GetHashCode">
            <summary>
            Computes the hash-code for the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.ToString">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncrypted.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> using the specified format and provider.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="T:Xpandables.Net.Cryptography.ValueEncryptedConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.Cryptography.ValueEncrypted"/> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type
            to a range value object using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a encrypted value object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.Cryptography.ValueEncryptedConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.Dispatcher">
            <summary>
            The default implementation for <see cref="T:Xpandables.Net.Dispatchers.IDispatcher"/>.
            Implements methods to execute the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> and
            <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/> process dynamically.
            This class can not be inherited.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Dispatchers.Dispatcher"/>.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.HandleCommandAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="command">The command to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.HandleQueryResultAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.HandleQueryAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.IDispatcher">
            <summary>
            Defines a set of methods to automatically handle <see cref="T:Xpandables.Net.Commands.ICommand"/> and <see cref="T:Xpandables.Net.Queries.IQuery`1"/>
            when targeting <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> or/and <see cref="T:Xpandables.Net.Commands.ICommandHandler`1"/>.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.HandleQueryResultAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.HandleQueryAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.HandleCommandAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="command">The command to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Disposable">
            <summary>
            The default implementation for <see cref="T:System.IDisposable"/> and <see cref="T:System.IAsyncDisposable"/> interfaces.
            Every derived class should override the <see cref="M:Xpandables.Net.Disposable.Dispose(System.Boolean)"/> or <see cref="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)"/> to match its requirement.
            This is an <see langword="abstract"/> and serializable class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Disposable.Disposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
             <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Default initialization for a <see cref="T:System.Boolean"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.Dispose">
            <summary>
            Public Implementation of Dispose according to .NET Framework Design Guidelines
            callable by consumers.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
            <remarks>
            <para>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
            and prevent finalization code for this object from executing a second time.
            </para>
            <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.DisposeAsync">
            <summary>
            Public Implementation of DisposeAsync according to .NET Framework Design Guidelines
            callable by consumers.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
            <remarks>
            <para>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
            and prevent finalization code for this object from executing a second time.
            </para>
            <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            When overridden in derived classes, this method get called when the instance will be disposed.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)"/> executes in two distinct scenarios.
            <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            When overridden in derived classes, this method get called when the instance will be disposed.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.Disposable.Dispose(System.Boolean)"/> executes in two distinct scenarios.
            <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="T:Xpandables.Net.Entity">
            <summary>
            The domain object base implementation that provides an identifier and a key generator for derived class.
            This is an <see langword="abstract"/>class.
            <para>You have to decorate the <see cref="P:Xpandables.Net.Entity.Id"/> property with key attributes or use another one.</para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.#ctor">
            <summary>
            Initializes the Id key.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.Id">
            <summary>
            Gets the domain object identity.
            The value comes from <see cref="M:Xpandables.Net.Entity.KeyGenerator"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.IsNew">
            <summary>
            Determines whether or not the underlying instance is new.
            The default implementation just compare the <see cref="P:Xpandables.Net.Entity.Id"/> value to its default one.
            You must override this property in order to match your request.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.IsDeleted">
            <summary>
            Determines whether or not the underlying instance is deleted.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.IsActive">
            <summary>
            Determines whether or not the underlying instance is active.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.CreatedOn">
            <summary>
            Gets the creation date of the underlying instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.UpdatedOn">
            <summary>
            Gets the last update date of the underlying instance if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.DeletedOn">
            <summary>
            Gets the deleted date of the underlying instance if exist.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.Deactivate">
            <summary>
            Deactivates the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.Delete">
            <summary>
            Deletes the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.Activate">
            <summary>
            Activates the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.SetCreationDate(System.DateTime)">
            <summary>
            Sets the creation date time for underlying instance.
            </summary>
            <param name="dateTime">the creation date.</param>
        </member>
        <member name="M:Xpandables.Net.Entity.SetUpdateDate(System.DateTime)">
            <summary>
            Sets the last update date time for underlying instance.
            </summary>
            <param name="dateTime">the last updated date.</param>
        </member>
        <member name="M:Xpandables.Net.Entity.SetDeleteDate(System.DateTime)">
            <summary>
            Sets the deletion date time for underlying instance.
            </summary>
            <param name="dateTime">the deletion date.</param>
        </member>
        <member name="M:Xpandables.Net.Entity.KeyGenerator">
            <summary>
            Returns the unique signature of string type for an instance.
            This signature value will be used as identifier for the underlying instance.
            <para>When overridden in the derived class, it will set or get the concrete identity for the domain object.</para>
            </summary>
            <returns>A string value as identifier.</returns>
        </member>
        <member name="M:Xpandables.Net.Entity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Entity.op_Equality(Xpandables.Net.Entity,Xpandables.Net.Entity)">
            <summary>
            Applies equal operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Entity.op_Inequality(Xpandables.Net.Entity,Xpandables.Net.Entity)">
            <summary>
            Applies non equal operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Entity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current entity.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1">
            <summary>
            This class allows the application author to add persistence support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorPersistence"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and executes the
            the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> after the main one in the same control flow only
            if there is no exception. You can set the <see cref="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler"/> with the
            <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> command, in order to manage
            the exception.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1.#ctor(Xpandables.Net.EntityFramework.IDataContext,Xpandables.Net.Commands.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1"/> class.
            </summary>
            <param name="dataContext">The data context to act on.</param>
            <param name="decoratee">The decorated command handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextOptions">
            <summary>
            Defines options to configure data context.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextOptions.UseSeederBehavior``2">
            <summary>
            Enables seeder for the data context that is decorated with <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/>.
            </summary>
            <typeparam name="TDataContextSeeder">The type that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/>.</typeparam>
            <typeparam name="TDataContext">The type of data context.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextOptions.UsePersistenceExceptionHandler(System.Func{System.Exception,System.Exception})">
            <summary>
            Enables the delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null.
            </summary>
            <param name="persistenceExceptionHandler">The persistence exception handler delegate instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="persistenceExceptionHandler"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1">
            <summary>
            This class allows the application author to add seed support to data context.
            The target command should implement the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/> interface in order to activate the behavior.
            The class decorates the target <see cref="T:Xpandables.Net.EntityFramework.IDataContextProvider"/> with an implementation of
            <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/> that will be called before the data context is returned.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1.#ctor(Xpandables.Net.EntityFramework.IDataContextProvider,Xpandables.Net.EntityFramework.IDataContextSeeder{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1"/>.
            </summary>
            <param name="datacontextProvider">The decorated data context provider.</param>
            <param name="dataContextSeeder">The data context seeder.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="datacontextProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContextSeeder"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContextSettings">
            <summary>
            Provides with the base option class for <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> settings.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextSettings.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextSettings"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContextSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.DataContextSettings"/> with properties.
            </summary>
            <param name="ensuredDeletedBefore">Determine whether or not the database for the context will be deleted before applying migration.</param>
            <param name="useInMemory">Determine whether or not the database is uses in memory</param>
            <param name="addSamplesData">Determine whether or not the database will be filled with samples data.</param>
            <param name="applyMigrations">Determine whether or not the database the migrations must be applied.</param>
            <param name="connectionString">The database connection string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.EnsuredDeletedBefore">
            <summary>
            Ensures that the database for the context will be deleted before applying migration.
            The default value is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.ApplyMigrations">
            <summary>
            Ensures that migrations will be applied to the database for the generated context.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.UseInMemory">
            <summary>
            Ensures that the database is uses in memory.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.AddSamplesData">
            <summary>
            Allows the database to be filled with samples data.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.DataContextSettings.ConnectionString">
            <summary>
            The database connection string.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IBehaviorPersistence">
            <summary>
            A marker interface that allows the handler class implementation to use persistence data across the control flow.
            The behavior makes use of an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> in the handler class implementation
            to persist data at the end of the control flow only if there is no exception.
            In order to control the behavior, you can add the <see cref="T:Xpandables.Net.Correlation.IBehaviorCorrelation"/> to the command/query class and reference
            the <see cref="T:Xpandables.Net.Correlation.ICorrelationContext"/> in the handler class implementation, to defines actions to be applied after the control flow with
            <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.PostEvent"/> on success and <see cref="E:Xpandables.Net.Correlation.ICorrelationContext.RollbackEvent"/> on exception.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method,
            register the data context using and extension method.
            <para></para>
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2"/>.
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.EntityFramework.CommandPersistenceBehavior`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IBehaviorSeed">
            <summary>
            A marker interface that allows the class that implements the <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> to be seeded before use.
            You need to register the expected behavior using the appropriate extension method
            and provide an implementation for <see cref="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1"/>.
            <para></para>
            The class implementation will be decorated with the <see cref="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContext">
            <summary>
            Allows an application author to manage domain objects using EntityFrameworkCore.
            When argument is null, an <see cref="T:System.ArgumentNullException"/> will be thrown.
            When a value is not found, a default value of the expected type should be returned.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.SetOf``1">
            <summary>
            Provides with a query-able instance for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.SetOf``1(Xpandables.Net.Expressions.IQueryExpression{``0})">
            <summary>
            Provides with a query-able instance for <typeparamref name="T"/> from an expression.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="queryExpression">The expression to act with.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="queryExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.GetEntityByIdAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the entity matching the specified identifier or <see langword="null"/> if not found.
            </summary>
            <typeparam name="T">Type of entity.</typeparam>
            <param name="identifier">the entity identifier to search for.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>An entity of type <typeparamref name="T"/> if found otherwise <see langword="null"/>  .</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identifier"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.AddEntityRangeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Adds a collection of domain objects to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entities">The domain objects collection to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.AddEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Adds a domain object to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entity">The domain object to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entity"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.DeleteEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the domain object matching the specified entity that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/>
            is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="deletedEntity">The entity to be deleted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="deletedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.DeleteEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes the domain objects matching the predicate that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.Persist"/>
            is called. You can use a third party library with <see langword="SetOf{T}"/> for performance.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Updates the domain object matching the specify entity.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="updatedEntity">the updated entity.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityRangeAsync``2(System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the collection of entities.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="updatedEntities">Contains the collection of updated values.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntities"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the predicate by using the updater.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="updater">The delegate to be used for updating domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updater"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.Persist">
            <summary>
            Persists all pending domain objects to the data storage.
            You can use the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> to manage exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)">
            <summary>
            Persists all pending domain objects to the data storage.
            You can use the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> to manage exception.
            </summary>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous persist all operation.</returns>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler">
            <summary>
            May contain a delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null exception.
            If there's not delegate, the handled exception will be re-thrown normally.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})">
            <summary>
            Allows the application author to set or unset the delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null.
            To disable the delegate, just set the handler to <see langword="null"/>.
            </summary>
            <param name="persistenceExceptionHandler">The optional delegate instance.</param>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContextProvider">
            <summary>
            Provides with a method to return the ambient data context instance.
            You need to register the class implementation to the services collection using and extension method.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContextProvider.GetDataContextAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns an instance that will contain the ambient data context according to the environment.
            </summary>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>An instance of context that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext" />.</returns>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContextProvider.GetDataContext">
            <summary>
            Returns an instance that will contain the ambient data context according to the environment.
            </summary>
            <returns>An instance of context that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext" />.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContextSeeder`1">
            <summary>
            Allows an application author to dynamically seed a data context before it's retrieved.
            This is useful when you need a data context not to be empty.
            The target data context should be decorated with the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/> interface and
            the class seeder implementation should be
            registered to services collections with the extension method <see langword="ServiceCollectionExtensions.AddXDataContext{TDataContextProvider}(Microsoft.Extensions.DependencyInjection.IServiceCollection)"/>
            using options.
            </summary>
            <typeparam name="TDataContext">The type of the data context that
            implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and <see cref="T:Xpandables.Net.EntityFramework.IBehaviorSeed"/>.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContextSeeder`1.SeedAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously seeds the specified data context as you wish.
            Warning : Do not throw exception from this method unless it's absolutely necessary.
            This method get called by the <see cref="T:Xpandables.Net.EntityFramework.DataContextSeederBehavior`1"/>.
            </summary>
            <param name="dataContext">The data context instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A seeded data context.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2">
            <summary>
            This class allows the application author to add persistence support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.EntityFramework.IBehaviorPersistence"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and executes the
            the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> after the main one in the same control flow only
            if there is no exception. You can set the <see cref="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler"/> with the
            <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> query, in order to manage
            the exception.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2.#ctor(Xpandables.Net.EntityFramework.IDataContext,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2"/>.
            </summary>
            <param name="dataContext">The data context instance.</param>
            <param name="decoratee">The query to decorate.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContext"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.QueryPersistenceBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Enumerations.EnumerationType">
            <summary>
            Helper class used to implement enumeration. You can use the <see cref="T:Xpandables.Net.Enumerations.EnumerationTypeConverter"/> for conversion.
            This is an <see langword="abstract"/> and serializable class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Enumerations.EnumerationType.Value">
            <summary>
            Gets the value of the enumeration.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Enumerations.EnumerationType.DisplayName">
            <summary>
            Gets the name of the enumeration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetAll``1">
            <summary>
            Gets the list of all enumeration found in the current instance.
            If you want to return all enumerations from base classes, use the non-generic method.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <returns>List of enumerations.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetAll(System.Type)">
            <summary>
            Gets the list of all enumeration found in the instance of the specified type and base classes.
            The type must derived from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            </summary>
            <param name="enumerationType">Type of enumeration.</param>
            <returns>List of enumerations.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerationType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="enumerationType"/> must derive from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            </exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromDisplayName``1(System.String)">
            <summary>
            Gets the enumeration matching the specified display name.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <param name="displayName">The display name to find.</param>
            <returns>An instance of <typeparamref name="TEnumeration"/> type or default value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromDisplayName(System.Type,System.String)">
            <summary>
            Gets the enumeration matching the specified type and display name.
            </summary>
            <param name="enumerationType">Type of derived class enumeration.</param>
            <param name="displayName">The display name to find.</param>
            <returns>An instance of <paramref name="enumerationType"/> type or default value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerationType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromValue``1(System.Int32)">
            <summary>
            Gets the enumeration matching the specified value.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <param name="value">Value to find.</param>
            <returns>An instance of <typeparamref name="TEnumeration"/> type or default value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string representation of a enumeration to its <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> equivalent. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnumeration">The target enumeration type to convert to.</typeparam>
            <param name="displayName">A string containing a enumeration to convert.</param>
            <param name="enumeration">When this method returns, contains the <typeparamref name="TEnumeration"/> value equivalent
            of the string contained in <paramref name="displayName"/>, if the conversion succeeded.</param>
            <returns><see langword="true"/> if <paramref name="displayName"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.TryParse``1(System.Int32,``0@)">
            <summary>
            Converts the integer representation of a enumeration to its <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> equivalent. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnumeration">The target enumeration type to convert to.</typeparam>
            <param name="value">An integer of an enumeration to convert.</param>
            <param name="enumeration">When this method returns, contains the <typeparamref name="TEnumeration"/> value equivalent
            of the integer contained in <paramref name="value"/>, if the conversion succeeded.</param>
            <returns><see langword="true"/> if <paramref name="value"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromValue(System.Type,System.Int32)">
            <summary>
            Gets the enumeration matching the specified type and value.
            </summary>
            <param name="enumerationType">Type of derived class enumeration.</param>
            <param name="value">Value to find.</param>
            <returns>An instance of <paramref name="enumerationType"/> type or default value.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="value"/> does not exist.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.AbsoluteDifference(Xpandables.Net.Enumerations.EnumerationType,Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the absolute difference of both enumerations.
            </summary>
            <param name="first">The first instance to act on.</param>
            <param name="second">The second instance to act on.</param>
            <returns>An integer that represents an absolute comparison value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="first"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetDescriptionAttributeValue">
            <summary>
            Returns the description string attribute of the current enumeration.
            if not found, returns the enumeration as string.
            </summary>
            <returns>The description string. If not found, returns the enumeration as string.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.CompareTo(Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="other">The other object for comparison.</param>
            <returns>An integer value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.Equals(Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="other">The other object for comparison..</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetHashCode">
            <summary>
            Returns the hash-code of the current type.
            </summary>
            <returns>hash-code.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.Equals(System.Object)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="obj">The other object for comparison.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> value matching the <see cref="P:Xpandables.Net.Enumerations.EnumerationType.DisplayName"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Enumerations.EnumerationTypeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EnumConverter"></see> class for the given type.</summary>
            <param name="type">A <see cref="T:System.Type"></see> that represents the type of enumeration to associate
            with this enumeration converter.</param>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object in the given source type
            to an enumeration object using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified value object to an enumeration object.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified destination type.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionComparer">
            <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionHelpers">
            <summary>
            Provides with extension methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionHelpers.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="TSource">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionHelpers.CreateAccessorFor``2(System.String)">
            <summary>
            Returns a property or field access-or expression for the specified name that matches a property or a field in the model.
            </summary>
            <typeparam name="TSource">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyOrFieldName">The name of the property or field.</param>
            <returns>An expression tree.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyOrFieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No property or field named propertyOrFieldName is
            defined in expression.Type or its base types.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.IQueryExpression`1">
            <summary>
            Defines a methods that returns an <see cref="T:System.Linq.Expressions.Expression`1"/> that can be used to query
            the <typeparamref name="TSource"/> instance.
            This can significantly improve the use of the command/query pattern, allowing class conversion to an expression tree.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Expressions.IQueryExpression`2">
            <summary>
            Defines a methods that returns an <see cref="T:System.Linq.Expressions.Expression`1"/> that can be used to query
            the <typeparamref name="TSource"/> instance.
            This can significantly improve the use of the command/query pattern, allowing class conversion to an expression tree.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.IQueryExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpression`2">
            <summary>
            
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.GetHashCode">
            <summary>
            Returns the unique hash code for the current instance.
            </summary>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.Equals(System.Object)">
            <summary>
            Determines whether the current instance equals the specified one.
            </summary>
            <param name="obj">The object to be compared to.</param>
            <returns><see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpression`1">
            <summary>
            This class is a helper that provides a default implementation for <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/>.
            You must override the <see cref="M:Xpandables.Net.Expressions.QueryExpression`1.BuildExpression"/> method in order to provide a custom behavior.
            </summary>
            <typeparam name="TSource">The data source type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`1.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionAnd`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "And" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionAnd`2"/> class with the expressions for composition.
            </summary>
            <param name="left">The executable validator for the left side.</param>
            <param name="right">The executable validator for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionBuilder`2">
            <summary>
            Provides the generic class to build <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> instance.
            </summary>
            <typeparam name="TSource">the target instance type.</typeparam>
            <typeparam name="TResult">The property type to be used for result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionBuilder`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Returns  new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionBuilder`2"/> class with the specified expression.
            </summary>
            <param name="expression">The expression to be used by the instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> can not be null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionBuilder`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionFactory`1">
            <summary>
            Provides the query expression factory that contains methods to create generic query expressions.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Create``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> with the specified expression.
            </summary>
            <typeparam name="TSource">The data type source.</typeparam>
            <param name="expression">The expression to be used by the instance.</param>
            <returns>an new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.And``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the And form of two expressions.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="left">The expression value  for left side.</param>
            <param name="right">The expression value for right side.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Or``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the Or form of two expressions.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="left">The expression value  for left side.</param>
            <param name="right">The expression value for right side.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Not``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the Not form of an expression.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="expression">The expression value.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/>is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionHelpers">
            <summary>
            Provides extensions methods for <see cref="T:Xpandables.Net.Expressions.IQueryExpression`2"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.And``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the AND operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Or``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the OR operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Not``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the NOT operator to the query expression and returns a new one.
            </summary>
            <param name="queryExpression">The expression left side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionNot`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "Not" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionNot`2"/> class with the expression.
            </summary>
            <param name="expression">The executable validator for the left side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionOr`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "Or" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionOr`2"/> class with the expressions for composition.
            </summary>
            <param name="left">The executable validator for the left side.</param>
            <param name="right">The executable validator for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.BuildExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Extensions.AsyncEnumerable`1">
            <summary>
            Default implementation of <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Extensions.AsyncEnumerable`1"/> with the collection.
            </summary>
            <param name="collection">The collection to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Returns an enumerator that iterates asynchronously through the collection.
            </summary>
            <param name="cancellationToken">A System.Threading.CancellationToken that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Extensions.AsyncEnumerator`1">
            <summary>
            Default implement of <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncEnumerator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Extensions.AsyncEnumerator`1"/> with the enumerator.
            </summary>
            <param name="inner">The enumerator to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="inner"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Extensions.AsyncEnumerator`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncEnumerator`1.DisposeAsync">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncEnumerator`1.MoveNextAsync">
            <summary>
             Advances the enumerator asynchronously to the next element of the collection.
            </summary>
            <returns> A System.Threading.Tasks.ValueTask`1 that will complete with a result of true if the enumerator was successfully 
            advanced to the next element, or false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Extensions.AsyncExtensions">
            <summary>
            Provides with methods used to execute asynchronous operation synchronously.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncExtensions.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="func">The asynchronous function to execute synchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="func"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncExtensions.RunSync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="task">The asynchronous function to execute synchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.AsyncExtensions.RunSync(System.Threading.Tasks.Task)">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <param name="task">The operation to be synchronously executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Extensions.EnumerableExtensions">
            <summary>
            Provides with extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.SingleToEnumerable``1(``0)">
            <summary>
            Converts a single object to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">An instance of the type.</param>
            <returns>An enumerable of the current instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="source"/> is an enumerable.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously returns a <see cref="T:System.Collections.Generic.List`1"/> from <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> from the asynchronous collection.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a read only collection.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">An instance of the collection to be converted.</param>
            <returns>A new <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the value from the producer in a singleton
            collection if the sequence is empty.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="sourceProducer">The delegate that produces the value.</param>
            <returns>A collection object that contains the default value for the TSource type if source is empty;
            otherwise, sourceProducer value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceProducer"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates the collection source and performs the specified action on each element.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="action">Action to invoke for each element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates the collection source and performs the specified action on each element.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="action">Action to invoke for each element.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of the specified sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <returns>The first element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <returns>The first element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.LastOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last elements of a sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <returns>The last element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.LastOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <returns>The last element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.EnumerableExtensions.ElementAtOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at the specified index in a sequence or an empty optional if the index is out of range
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Extensions.StringExtensions">
            <summary>
            Provides with methods to extend use of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.StringExtensions.StringFormat(System.String,System.Object[])">
            <summary>
            Replaces the argument object into the current text equivalent <see cref="T:System.String"/>
            using the default <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The format string.</param>
            <param name="args">The object to be formatted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null or <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The format is invalid.</exception>
            <returns>value <see cref="T:System.String"/> filled with <paramref name="args"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Extensions.StringExtensions.StringFormat(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Replaces the argument object into the current text equivalent <see cref="T:System.String"/> using the specified culture.
            </summary>
            <param name="value">The format string.</param>
            <param name="cultureInfo">CultureInfo to be used.</param>
            <param name="args">The object to be formatted.</param>
            <returns>value <see cref="T:System.String"/> filled with <paramref name="args"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cultureInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The format is invalid.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.StringExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates all the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified string separator between each element.
            </summary>
            <typeparam name="TSource">The generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="separator">The string to use as a separator.
            Separator is included in the returned string only if value has more than one element.</param>
            <returns>A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns String.Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.StringExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Concatenates all the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified char separator between each element.
            </summary>
            <typeparam name="TSource">The generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="separator">The string to use as a separator.
            Separator is included in the returned string only if value has more than one element.</param>
            <returns>A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns String.Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.StringExtensions.TryToValueType``1(System.String,``0@,System.Exception@)">
            <summary>
            Tries to convert a string to the specified value type.
            </summary>
            <typeparam name="TResult">Type source.</typeparam>
            <param name="value">The string value.</param>
            <param name="result">The string value converted to the specified value type.</param>
            <param name="valueTypeException">The handled exception during conversion.</param>
            <returns>Returns <see langword="true"/> if conversion OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.StringExtensions.TryToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@,System.Exception@,System.String[])">
            <summary>
            Converts string date to <see cref="T:System.DateTime"/> type.
            If error, returns an exception.
            </summary>
            <param name="source">A string containing a date and time to convert.</param>
            <param name="provider">An object that supplies culture-specific format information about string.</param>
            <param name="styles"> A bitwise combination of enumeration values that indicates the permitted format
            of string. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="result">An object that is equivalent to the date and time contained in <paramref name="source"/> as specified
            by formats, provider, and style.</param>
            <param name="dateTimeException">The handled exception during conversion.</param>
            <param name="formats">An array of allowable formats of strings.</param>
            <returns>Returns <see langword="true"/> if conversion OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="provider"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Extensions.TypeExtensions">
            <summary>
            Provides with methods to extend use of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.GetDescription``1(``0)">
            <summary>
            Returns the description string attribute of the current <see cref="T:System.Enum"/> value type.
            if not found, returns the value as string.
            </summary>
            <typeparam name="TEnum">Type of enumeration.</typeparam>
            <param name="value">Enumeration field value to act on.</param>
            <returns>The description string. If not found, returns the value as string.</returns>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsOverridden(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is overridden in its current implementation.
            The method info should come from the <see cref="M:System.Object.GetType"/>.
            </summary>
            <param name="methodInfo">The method info to act on.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsAwaitable(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="methodInfo">The method info to act on.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the current type is a null-able type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determines whether the current type implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.GetNameWithoutGenericArity(System.Type)">
            <summary>
            Returns the name of the type without the generic arity '`'.
            Useful for generic types.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>The name of the type without the generic arity '`'.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryLoadAssembly(System.Reflection.AssemblyName,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tries to load assembly from its assembly name.
            </summary>
            <param name="assemblyName">The assembly name to act with.</param>
            <param name="loadedAssembly">The loaded assembly if succeeded.</param>
            <param name="assemblyException">The handled exception during assembly loading if fails.</param>
            <returns>Returns <see langword="true"/> if loading OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryTypeInvokeMember(System.Type,System.Object@,System.Exception@,System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Tries to invoke the specified member, using the specified binding constraints and matching
            the specified argument list.
            </summary>
            <param name="type"></param>
            <param name="result">An object representing the return value of the invoked member
            or an empty result with handled exception.</param>
            <param name="invokeException">The handled invoke exception.</param>
            <param name="memberName">The string containing the name of the constructor, method, property, or field
            member to invoke. /// -or- /// An empty string (&quot;&quot;) to invoke the default
            member. /// -or- /// For IDispatch members, a string representing the DispID,
            for example &quot;[DispID=3]&quot;.</param>
            <param name="invokeAttr">A bit-mask comprised of one or more System.Reflection.BindingFlags that specify
            how the search is conducted. The access can be one of the BindingFlags such as
            Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup
            need not be specified. If the type of lookup is omitted, BindingFlags.Public
            | BindingFlags.Instance | BindingFlags.Static are used.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve
            selection of an overloaded method, coercion of argument types, and invocation
            of a member through reflection. /// -or- /// A null reference (Nothing in Visual
            Basic), to use the System.Type.DefaultBinder. Note that explicitly defining a
            System.Reflection.Binder object may be required for successfully invoking method
            overloads with variable arguments.</param>
            <param name="target">The object on which to invoke the specified member.</param>
            <param name="args">An array containing the arguments to pass to the member to invoke.</param>
            <returns>Returns <see langword="true"/> if invoke OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryMakeGenericType(System.Type,System.Type@,System.Exception@,System.Type[])">
            <summary>
            Tries to substitute the elements of an array of types for the type parameters of the
            current generic type definition and returns a System.Type object representing
            the resulting constructed type. If error, return false with exception.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="genericType">The generic type result.</param>
            <param name="typeException">The handled type exception.</param>
            <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic
            type.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryGetConstructorDelegate``1(System.Type,``0@,System.Exception@,System.Type[])">
            <summary>
            Tries to get the specified delegate type associated to the constructor.
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="type">The type to act on.</param>
            <param name="constructorDelegate">The built constructor delegate.</param>
            <param name="constructorException">The handled exception.</param>
            <param name="parameterTypes">The collection of parameter types.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterTypes"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryGetTypeFromTypeName(System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get the type specified by its name from the loaded assemblies.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="type">The type result if found.</param>
            <param name="typeException">The handled execution exception.</param>
            <returns>Returns <see langword="true"/> if get OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryGetConstructorExpression(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression@,System.Exception@,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Tries to get an Expression representing the constructor call, passing in the constructor parameters.
            </summary>
            <param name="constructorInfo">The constructor info to act on.</param>
            <param name="constructorExpression">The built constructor expression.</param>
            <param name="constructorException">The handled constructor exception.</param>
            <param name="parameterExpressions">A collection of parameter expressions.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="constructorInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterExpressions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryGetConstructorInfo(System.Type,System.Reflection.ConstructorInfo@,System.Exception@,System.Type[])">
            <summary>
            Tries to get the constructor from the type that matches the specified arguments type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="constructorInfo">The found constructor.</param>
            <param name="constructorException">The handled constructor exception.</param>
            <param name="parameterTypes">The optional parameters types.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryLoadAssembly(System.String,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tries to load assembly from its name.
            </summary>
            <param name="assemblyName">The full assembly name.</param>
            <param name="loadedAssembly">The loaded assembly if succeeded.</param>
            <param name="assemblyException">The handled exception during assembly loading.</param>
            <returns>Returns <see langword="true"/> if loading OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryGetType(System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get type from its string name.
            </summary>
            <param name="typeName">The name of the type to find.</param>
            <param name="foundType">The found type.</param>
            <param name="typeException">The handled type exception.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.TryGetType(System.String,System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get the type from string, if not found, try to load from the assembly.
            </summary>
            <param name="typeName">The name of the type to find.</param>
            <param name="assemblyName">The assembly to act on.</param>
            <param name="foundType">The found type.</param>
            <param name="typeException">The handled type exception.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.GetParameterExpression(System.Type[])">
            <summary>
            Gets a set of Expressions representing the parameters which will be passed to the constructor.
            </summary>
            <param name="parameterTypes">A collection of type to be used to build parameter expressions</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterTypes"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.GetBaseTypes(System.Type)">
            <summary>
            Return a collection of base types found in the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether or not the underlying type is assignable to the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="targetType">The type to check.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.ToFriendlyName(System.Type)">
            <summary>
            Returns the friendly name of the type.
            </summary>
            <param name="type">The type to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.HasAttribute(System.Type,System.Type)">
            <summary>
            Determines whether or not the type contains the specified type attribute.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="attributeType">The type of the attribute.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.HasAttribute``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Determines whether or not the type contains the specified type attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type to act on.</param>
            <param name="predicate">The predicate to use.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsInNamespace(System.Type,System.String)">
            <summary>
            Determines whether or not the type is in the name space.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="namespace">The name space.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="namespace"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsInExactNamespace(System.Type,System.String)">
            <summary>
            Determines whether or not the type is in the specified namespace.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="namespace">The name space.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="namespace"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.IsNonAbstractClass(System.Type,System.Boolean)">
            <summary>
            Determines whether or not the type is an abstract type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="publicOnly">if check public.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.HasMatchingGenericArity(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Determines whether an interface type and a type have matching arity.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="typeInfo">The target type.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeExtensions.GetRegistrationType(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Returns the registration type from an interface.
            </summary>
            <param name="interfaceType">the interface type to act on.</param>
            <param name="typeInfo">The type info.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Extensions.TypeNameExtensions">
            <summary>
            Provides with method to access type name.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.TypeNameExtensions.GetTypeDisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Pretty print a type name.
            </summary>
            <param name="type">The <see cref="T:System.Type"/>.</param>
            <param name="fullName"><c>true</c> to print a fully qualified name.</param>
            <param name="includeGenericParameterNames"><c>true</c> to include generic parameter names.</param>
            <returns>The pretty printed type name.</returns>
        </member>
        <member name="T:Xpandables.Net.Extensions.WithExtensions">
            <summary>
            Provides with extension method similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Extensions.WithExtensions.With``1(``0,System.Action{``0})">
            <summary>
            Sets properties via lambda expression scope.
            This is similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source item to act on.</param>
            <param name="action">The action to be applied.</param>
            <returns>The same object after applying the action on it.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Extensions.WithExtensions.With``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Object)">
            <summary>
            Sets properties via lambda expression. This is useful when dealing with <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source instance to act on.</param>
            <param name="nameOfExpression">The expression delegate for the property.
            Just use <see langword="nameof"/> as expression for the delegate.</param>
            <param name="value">The value for the property.</param>
            <returns>The current instance with modified property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nameOfExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="nameOfExpression"/> is not valid.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler">
            <summary>
            Provides with a handler that can be used with <see cref="T:System.Net.Http.HttpClient"/> to add header authorization value
            before request execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenHandler.#ctor(Xpandables.Net.Http.IHttpTokenAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler"/> class with the token accessor.
            </summary>
            <param name="httpTokenAccessor">The token accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The token is not available. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessorHandler">
            <summary>
            A helper class used to implement the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessorHandler.#ctor(System.Func{System.String,System.String})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenAccessorHandler"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> implementation.
            </summary>
            <param name="tokenAccessor">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessorHandler.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenContainer">
            <summary>
            Provides with <see cref="T:Xpandables.Net.Http.IHttpTokenEngine"/>, <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> and <see cref="T:Xpandables.Net.Http.IHttpHeaderAccessor"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.#ctor(Xpandables.Net.Http.IHttpTokenEngine,Xpandables.Net.Http.IHttpTokenAccessor,Xpandables.Net.Http.IHttpHeaderAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenContainer"/> class.
            </summary>
            <param name="httpTokenEngine">The token engine.</param>
            <param name="httpTokenAccessor">The token accessor.</param>
            <param name="httpHeaderAccessor">The httpHeader Accessor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenEngine"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.BuildToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Uses the collection of claims to build a string token.
            </summary>
            <param name="claims">collection of claims to be used to build token string.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="claims" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.BuildToken(System.Object)">
            <summary>
            Uses the source object to build a string token.
            </summary>
            <param name="source">The source to be used.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetClaims(System.String)">
            <summary>
            Returns the collection of claims from the specified token.
            </summary>
            <param name="token">The token string.</param>
            <returns>An collection of claims if OK or an empty type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetValues">
            <summary>
            Gets all HTTP header values from the current HTTP request.
            If not found, returns an empty dictionary.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetValue(System.String)">
            <summary>
            Gets the HTTP header value from the current HTTP request matching the specified key.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenContainer.GetValues(System.String)">
            <summary>
            Gets all HTTP header values from the current HTTP request matching the specified key.
            If not found, returns an empty enumerable.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpFormFileEngine">
            <summary>
            Provides with methods to validate an instance of IFormFile.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileName(System.Object)">
            <summary>
            Checks that the HTTP request file name is a valid one.
            </summary>
            <param name="formFile">The sent file.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileExtension(System.Object,System.String[])">
            <summary>
            Checks that the HTTP request file extension matches one of the specified extensions.
            </summary>
            <param name="formFile">The sent file.</param>
            <param name="extensions">The extensions to compare to.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileSize(System.Object,System.Int32)">
            <summary>
            Checks that the HTTP request file size is lower or equal to the specified size.
            </summary>
            <param name="formFile">The sent file.</param>
            <param name="size">The file size to compare to.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileContent(System.Object)">
            <summary>
            Checks that the HTTP request file content matches its extension signature.
            </summary>
            <param name="formFile">the sent file.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileContent(System.Object,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.Byte[]}})">
            <summary>
            Checks that the HTTP request file content matches its extension signature.
            </summary>
            <param name="formFile">the sent file.</param>
            <param name="fileSignatures">The file signatures dictionary.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpHeaderAccessor">
            <summary>
            Provides with methods to retrieve an HTTP request header value matching a specific key.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.GetValue(System.String)">
            <summary>
            Gets the HTTP header value from the current HTTP request matching the specified key.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.GetValues(System.String)">
            <summary>
            Gets all HTTP header values from the current HTTP request matching the specified key.
            If not found, returns an empty enumerable.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.GetValues">
            <summary>
            Gets all HTTP header values from the current HTTP request.
            If not found, returns an empty dictionary.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenAccessor">
            <summary>
            Defines a method used to retrieve the ambient token string from the current HTTP request header.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenAccessor.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenAccessor.GetToken">
            <summary>
            Returns the current token value from the current HTTP request matching the "Authorization" key.
            If not found, returns an empty value.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessor">
            <summary>
            The default implementation for <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessor.#ctor(Xpandables.Net.Http.IHttpHeaderAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenAccessor"/> class.
            </summary>
            <param name="securedHeaderAccessor">The header accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="securedHeaderAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessor.GetToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenEngine">
            <summary>
             Defines a set of methods that can be used to build a token from a collection of claims
             and return back this collection from that token.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.BuildToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Uses the collection of claims to build a string token.
            </summary>
            <param name="claims">collection of claims to be used to build token string.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="claims"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.BuildToken(System.Object)">
            <summary>
            Uses the source object to build a string token.
            </summary>
            <param name="source">The source to be used.</param>
            <returns>An instance of string token if OK or an empty string.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.GetClaims(System.String)">
            <summary>
            Returns the collection of claims from the specified token.
            </summary>
            <param name="token">The token string.</param>
            <returns>An collection of claims if OK or an empty type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.IAddable`1">
            <summary>
            Represents collection which allows adding items.
            </summary>
            <typeparam name="TItem">Type of items in collection.</typeparam>
        </member>
        <member name="M:Xpandables.Net.IAddable`1.Add(`0)">
            <summary>
            Adds item to collection.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="T:Xpandables.Net.ICanHandle">
            <summary>
            Provides a method that determines whether or not an argument can be handled.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ICanHandle.CanHandle(System.Object)">
            <summary>
            Determines whether or not a an argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="target">The argument to handle.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Xpandables.Net.ICanHandle`1">
            <summary>
            Provides a method that determines whether or not a generic argument can be handled.
            </summary>
            <typeparam name="TArgument">Type of the argument to handle.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ICanHandle`1.CanHandle(`0)">
            <summary>
            Determines whether or not a type specific argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Xpandables.Net.Identities.CommandIdentityBehavior`1">
            <summary>
            This class allows the application author to add secured data support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and inherit from <see cref="T:Xpandables.Net.Identities.IdentityData"/>,
            <see cref="T:Xpandables.Net.Identities.IdentityData`1"/> or <see cref="T:Xpandables.Net.Identities.IdentityDataExpression`2"/> in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider"/>, that you should
            provide an implementation and use an extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.IdentityData.Identity"/> property with the
            <see cref="M:Xpandables.Net.Identities.IIdentityDataProvider.GetIdentity"/> before the handler execution.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.CommandIdentityBehavior`1.#ctor(Xpandables.Net.Identities.IIdentityDataProvider,Xpandables.Net.Commands.ICommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.CommandIdentityBehavior`1"/> class.
            </summary>
            <param name="identityProvider">The secured data provider.</param>
            <param name="decoratee">The decorated command handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.CommandIdentityBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Identities.IBehaviorIdentity">
            <summary>
            A marker interface that allows the command/query class to be filled with an identity. The class should derive from
            <see cref="T:Xpandables.Net.Identities.IdentityData"/>, <see cref="T:Xpandables.Net.Identities.IdentityData`1"/> or <see cref="T:Xpandables.Net.Identities.IdentityDataExpression`2"/>
            for a query-bale class. You need to provide with an
            implementation for <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider"/>
            and register the expected class using the correct extension method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.IdentityData">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityData"/> with a property that holds identity information
            of any type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Identities.IdentityData.Identity">
            <summary>
            Contains an instance of identity data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider" /> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IdentityData.SetIdentity(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.IIdentityData.Identity" /> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="identity">The identity data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.IdentityData`1">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityData`1"/> with a property that holds identity information
            of generic type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TIdentity">The type of the identity.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Identities.IdentityData`1.Identity">
            <summary>
            Contains an instance of identity data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider" /> using a decorator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.IdentityDataExpression`2">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityExpression`2"/> with a property that holds identity information
            of generic type in a security context.
            This class implements the <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> interface and derives from <see cref="T:Xpandables.Net.Identities.IdentityData`1"/>.
            You must override the <see cref="M:Xpandables.Net.Identities.IdentityDataExpression`2.BuildExpression"/> method in order to provide a custom behavior.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TIdentity">The type of the identity data.</typeparam>
            /// <typeparam name="TSource">The type of the data source</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.IdentityDataExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IdentityDataExpression`2.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the <see langword="Where"/> clause in a query to a db context.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityData">
            <summary>
            Provides with a property that holds identity information of any type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Identities.IIdentityData.Identity">
            <summary>
            Contains an instance of secured data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider"/> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IIdentityData.SetIdentity(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.IIdentityData.Identity"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="identity">The identity data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityData`1">
            <summary>
            Provides with a property that holds identity information of generic type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TData">The type of the data.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Identities.IIdentityData`1.Identity">
            <summary>
            Contains an instance of identity data.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider"/> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IIdentityData`1.SetIdentity(`0)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.IIdentityData`1.Identity"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="identity">The identity data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityExpression`2">
            <summary>
            Provides with a property that holds identity information of generic type in a security context.
            This interface derives from <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> interface.
            This interface is used with <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and its decorator class.
            </summary>
            <typeparam name="TIdentity">The type of the identity data.</typeparam>
            <typeparam name="TSource">The type of the data source</typeparam>
        </member>
        <member name="T:Xpandables.Net.Identities.IIdentityDataProvider">
            <summary>
            Provides with a method to retrieve identity.
            You should provide an implementation of this interface that will be used with the <see cref="T:Xpandables.Net.Identities.CommandIdentityBehavior`1"/>
            or <see cref="T:Xpandables.Net.Identities.QueryIdentityBehavior`2"/> decorator to fill the target instance with the identity.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.IIdentityDataProvider.GetIdentity">
            <summary>
            Returns an instance that contains identity or throw an exception if not found.
            </summary>
            <exception cref="T:System.InvalidOperationException">Failed to find secured data.</exception>
        </member>
        <member name="T:Xpandables.Net.Identities.QueryIdentityBehavior`2">
            <summary>
            This class allows the application author to add secured information support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Identities.IBehaviorIdentity"/> and inherit from <see cref="T:Xpandables.Net.Identities.IdentityData"/>,
            <see cref="T:Xpandables.Net.Identities.IdentityData`1"/> or <see cref="T:Xpandables.Net.Identities.IdentityDataExpression`2"/> in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Identities.IIdentityDataProvider"/>, that you should
            provide an implementation and use the extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.IdentityData.Identity"/> property with the
            <see cref="M:Xpandables.Net.Identities.IIdentityDataProvider.GetIdentity"/> before the handler execution.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.QueryIdentityBehavior`2.#ctor(Xpandables.Net.Identities.IIdentityDataProvider,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.QueryIdentityBehavior`2"/>.
            </summary>
            <param name="identityProvider">The secured data provider.</param>
            <param name="decoratee">The query handler to decorate with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.QueryIdentityBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IBehaviorInterceptor">
            <summary>
            A marker interface that allows the class implementation to be intercepted.
            You need to register the expected behavior using the appropriate interceptor extension method and provide an implementation for <see cref="T:Xpandables.Net.Interception.IInterceptor"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Interception.IInterceptor">
            <summary>
            Base interface for types and instances for interception.
            Interceptors implementing this interface are called for each invocation of the pipelines that they're included in.
            We advise the use of decorator instead of interceptor.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.IInterceptor.CanHandle(Xpandables.Net.Interception.IInvocation)">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            This is used to optimize interception. If the behaviors won't actually do anything then the interception
            mechanism can be skipped completely.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if it can handle the argument, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInterceptor.Intercept(Xpandables.Net.Interception.IInvocation)">
            <summary>
            Method used to intercept the parameter method call.
            You have to call the <see cref="M:Xpandables.Net.Interception.IInvocation.Proceed"/> to execute the intercepted method.
            The default implementation just call the <see cref="M:Xpandables.Net.Interception.IInvocation.Proceed"/> method.
            </summary>
            <param name="invocation">The method argument to be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="invocation"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IInvocation">
            <summary>
            Provides the structure for an interception event.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.InvocationMethod">
            <summary>
            Contains the invocation target method info.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.InvocationInstance">
            <summary>
            Contains the invocation target instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.Arguments">
            <summary>
            Contains the arguments (position in signature, names and values) with which the method has been invoked.
            This argument is provided only for target element with parameters.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.Exception">
            <summary>
            Gets the exception handled on executing a method.
            You can edit this value in order to return a custom exception or null.
            If you set this value to null, the process will resume normally and
            take care to provide a <see cref="P:Xpandables.Net.Interception.IInvocation.ReturnValue"/> if necessary.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ReturnValue">
            <summary>
            Gets the executed method return value, only provided for non-void method and when no exception handled.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ElapsedTime">
            <summary>
            Get the elapsed time execution for the underlying method.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ReturnType">
            <summary>
            Gets the invocation method return type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddException(System.Exception)">
            <summary>
            Sets the exception value.
            If you set this value to null, the process will resume normally and
            take care to provide a <see cref="P:Xpandables.Net.Interception.IInvocation.ReturnValue" /> if necessary.
            </summary>
            <param name="exception">The exception value.</param>
            <returns>The current instance with exception value.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddReturnValue(System.Object)">
            <summary>
            Sets the executed method return value, only for non-void method.
            Be aware to match the return value type.
            Otherwise it will throw an exception.
            </summary>
            <param name="returnValue">The return value to be used.</param>
            <returns>The current instance with return value.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddElapsedTime(System.TimeSpan)">
            <summary>
            Sets the executed method elapsed time.
            </summary>
            <param name="elapsedTime">The method elapsed.</param>
            <returns>The current instance with the new elapsed time.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.Proceed">
            <summary>
            Executes the underlying method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorAttribute">
            <summary>
            Interceptors base attribute that allows developers to apply handlers to classes and class members directly.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorAttribute.Create(System.IServiceProvider)">
            <summary>
            Derived classes implement this method. When called, it creates a new call handler as specified in the attribute configuration.
            The parameter <paramref name="serviceProvider"/> specifies the <see cref="T:System.IServiceProvider"/> to be used when creating
            handlers, if necessary.
            Returns a new interceptor handler object.
            </summary>
            <param name="serviceProvider">The current instance of the collection of services.</param>
            <returns>An implementation of <see cref="T:Xpandables.Net.Interception.IInterceptor"/> interface.</returns>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorFactory">
            <summary>
            The interceptor class factory.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorFactory.CreateProxy``1(Xpandables.Net.Interception.IInterceptor,``0)">
            <summary>
            Creates an instance of <typeparamref name="TInterface"/> that will be intercepted with the specified interceptor.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="interceptor">An interceptor instance to apply.</param>
            <param name="instance">The real instance of the interface type.</param>
            <returns><typeparamref name="TInterface"/> proxy instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorFactory.CreateProxy(System.Type,Xpandables.Net.Interception.IInterceptor,System.Object)">
            <summary>
            Creates an instance that will be intercepted with the specified interceptor.
            </summary>
            <param name="interfaceType">The type of the instance</param>
            <param name="interceptor">An interceptor instance to apply</param>
            <param name="instance">The real instance of the type</param>
            <returns><see cref="T:System.Object"/> proxy instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorProxy`1">
            <summary>
            The base implementation for interceptor.
            This implementation uses the <see cref="T:System.Reflection.DispatchProxy" /> process to apply customer behaviors to a method.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Create(`0,Xpandables.Net.Interception.IInterceptor)">
            <summary>
            Returns a new instance of <typeparamref name="TInterface"/> wrapped by a proxy.
            </summary>
            <param name="instance">the instance to be wrapped.</param>
            <param name="interceptor">The instance of the interceptor.</param>
            <returns>An instance that has been wrapped by a proxy.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Interception.InterceptorProxy`1"/> with default values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.SetParameters(`0,Xpandables.Net.Interception.IInterceptor)">
            <summary>
            Initializes the decorated instance and the interceptor with the provided arguments.
            </summary>
            <param name="instance">The instance to be intercepted.</param>
            <param name="interceptor">The instance of interceptor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Executes the method specified in the <paramref name="targetMethod" />.
            Applies the interceptor behavior to the called method.
            </summary>
            <param name="targetMethod">The target method.</param>
            <param name="args">The expected arguments.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetMethod" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Bypass(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Bypass the interceptor application because the method is a system method (GetType).
            </summary>
            <param name="targetMethod">Contains all information about the method being executed</param>
            <param name="args">Arguments to be used.</param>
            <returns><see cref="T:System.Object"/> instance</returns>
        </member>
        <member name="T:Xpandables.Net.Interception.Invocation">
            <summary>
            Provides the implementation of the <see cref="T:Xpandables.Net.Interception.IInvocation" /> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Invocation.#ctor(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Interception.Invocation"/> with the arguments needed for invocation.
            </summary>
            <param name="targetMethod">The target method.</param>
            <param name="targetInstance">The target instance being called.</param>
            <param name="argsValue">Arguments for the method, if necessary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetMethod"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetInstance"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IParameterCollection">
            <summary>
            This interface represents a list of either input or output
            parameters. It implements a fixed size list.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>value of the named parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterName"/> does not exist</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.IParameterCollection.Item(System.Int32)">
            <summary>
            Fetches a parameter's value by index.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>Value of the indexed parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterIndex"/> does not exist</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.IParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.Parameter">
            <summary>
            Defines the structure of a argument of a method at runtime.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.Build(System.Int32,System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Builds a new instance of <see cref="T:Xpandables.Net.Interception.Parameter"/> with the position, name , value...
            </summary>
            <param name="position">The parameter position in the method signature</param>
            <param name="source">The parameter info to act on.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An instance of new <see cref="T:Xpandables.Net.Interception.Parameter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="position"/> must be greater
            or equal to zero.</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Position">
            <summary>
            Gets the index position of the parameter in the method signature.
            The value must be greater or equal to zero, otherwise the interface contract
            will throw an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Name">
            <summary>
            Gets the name of the parameter as defined in the method signature.
            The value can not be null, otherwise the interface contract will throw an <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Value">
            <summary>
            Gets the value of the parameter at runtime.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Type">
            <summary>
            Gets the type of the argument.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.PassingBy">
            <summary>
            Determines whether the argument is <see langword="out"/>, <see langword="in"/>
            or by <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.ChangeValueTo(System.Object)">
            <summary>
            Sets a new value to the parameter.
            The new value type must match the argument <see cref="P:Xpandables.Net.Interception.Parameter.Type"/>,
            otherwise it will throw a <see cref="T:System.FormatException"/>
            </summary>
            <param name="newValue">The new value to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Interception.Parameter.PassingState">
            <summary>
            Determines whether the argument is <see langword="out"/>, <see langword="in"/>
            or <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.In">
            <summary>
            Standard parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.Out">
            <summary>
            <see langword="out"/> parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.Ref">
            <summary>
            <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.GetPassedStatusFromParameterInfo(System.Reflection.ParameterInfo)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Interception.Parameter.PassingState"/> of the parameter.
            </summary>
            <param name="parameterInfo">The parameter to act on.</param>
            <returns>A <see cref="T:Xpandables.Net.Interception.Parameter.PassingState"/> that matches the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.GetTypeFromParameterInfo(System.Reflection.ParameterInfo)">
            <summary>
            Returns the type of the parameter.
            </summary>
            <param name="parameterInfo">The parameter to act on.</param>
            <returns>The parameter type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.ParameterCollection">
            <summary>
            An implementation of <see cref="T:Xpandables.Net.Interception.IParameterCollection"/> that wraps a provided array
            containing the argument values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Construct a new <see cref="T:Xpandables.Net.Interception.ParameterCollection"/> class that wraps the given array of arguments.
            </summary>
            <param name="methodInfo">The target method.</param>
            <param name="arguments">Arguments for the method, if necessary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.ParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>value of the named parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterName" /> does not exist</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.ParameterCollection.Item(System.Int32)">
            <summary>
            Fetches a parameter's value by index.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>Value of the indexed parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterIndex" /> does not exist</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Localization.ILocalizationResourceProvider">
            <summary>
            Gives access to properties resources types to be used for localization.
            The resource type is identified by its string type name and behave as the data annotations attributes localization.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes">
            <summary>
            Contains the collection of resource types used to add localization for application page models (razor style).
            Each page is associated with a resource type name that matches the <see langword="{PageName}Localization"/> following the framework name convention.
            if a localization file is not defined, the default data annotation behavior is used.
            <para></para>
            Example :
            pageName.cshtml.cs contains the pageNameModel and the localization file is named pageNameLocalization.resx.
            <para></para>
            This behavior is available for the following attributes :
            <para><see langword="DisplayAttribute"/> :</para>
            <see langword="DisplayAttribute.Name"/> (just set to any value) will be bounded to the <see langword="Display{PropertyName}"/>
            as key in the resource file.
            <see langword="DisplayAttribute.Prompt"/> (just set to any value) will be bounded to the <see langword="Prompt{PropertyName}"/>
            as key in the resource file.
            <see langword="DisplayAttribute.Description"/> (just set to any value) will be bound to the <see langword="Description{PropertyName}"/>
            as key in the resource file.
            <para><see langword="LocalizedDisplayFormatAttribute"/> :</para>
            <see langword="LocalizedDisplayFormatAttribute.DataFormatString"/> (just set to any value) will be bounded to the <see langword="Format{PropertyName}"/>
            as key in the resource file.
            <see langword="LocalizedDisplayFormatAttribute.NullDisplayText"/> (just set to any value) will be bounded to the
            <see langword="NullDisplay{PropertyName}"/> as key in the resource file.
            <para>
            You can use the <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> class to build custom enumeration and use the tag helper <see langword="asp-enum"/> that expects the enumeration value for localization in label and the enumeration value will be bound to the <see langword="Enum{EnumerationValue}"/> as key in the resource file.
            </para>
            You can use the <see langword="ILocalizationResourceProviderExtended"/> for custom model binder and validator attributes for localization.
            You can use <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.IsSingleFileUsed"/> for single culture resource for all pages.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ValidationType">
            <summary>
            Contains the resource type for all data annotation validation attributes localization using the attribute name as a key.
            <para>For example :</para>
            The <see langword="RequiredAttribute.ErrorMessageResourceName"/> will be bounded to the <see langword="RequiredAttribute"/>
            as key in the resource file.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.IsSingleFileUsed">
            <summary>
            Determines whether to use a single resource page for culture. If so, the <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes"/> may contain 
            a unique type that will be used for all the page models. 
            Otherwise, you must provide a file for each page. The default behavior returns <see langword="false"/>.
            </summary>
            <returns>Returns <see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypeCollection">
            <summary>
            Contains a collection of resource types to add localization for application view models.
            Each view model is associated with a resource type name that matches the <see langword="{ViewModelName}Localization"/> or can contains
            only one localization file in case of singe file use.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.ILocalizationResourceProvider.AvailableViewModelCultures">
            <summary>
            Returns a collection of available cultures found in the current application based on the <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes"/> definition.
            </summary>
            <returns>A collection of <see cref="T:System.Globalization.CultureInfo"/> of an empty collection if no result.</returns>
        </member>
        <member name="T:Xpandables.Net.Localization.Validations.DataAnnotations">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CheckBoxAttribute">
            <summary>
              Looks up a localized string similar to La valeur du champ {0} doit être cochée..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CompareAttribute">
            <summary>
              Looks up a localized string similar to {0} et {1} ne correspondent pas..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CreditCardAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas un numéro de carte valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.DataTypeAttribute">
            <summary>
              Looks up a localized string similar to Le type de données attendu pour le champ {0} est {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.EmailAddressAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas une adresse mail valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.EnumDataTypeAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit représenter un élément de liste attendu..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.FileExtensionsAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} accepte seulement les fichiers de type : {1}.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.MaxLengthAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit est une chaîne ou un tableau de longueur maximale {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.MinLengthAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit est une chaîne ou un tableau de longueur minimale {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.PhoneAttribute">
            <summary>
              Looks up a localized string similar to Le {0} n&apos;est pas valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RangeAttribute">
            <summary>
              Looks up a localized string similar to Le valeur du champ {0} doit être comprise entre {1} et {2}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RegularExpressionAttribute">
            <summary>
              Looks up a localized string similar to La valeur du champ {0} doit correspondre à l&apos;expression régulière &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RequiredAttribute">
            <summary>
              Looks up a localized string similar to Le {0} est obligatoire..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.StringLengthAttribute">
            <summary>
              Looks up a localized string similar to Le {0} doit contenir au moins {2} caractères et au plus {1} caractères..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.UrlAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas une url valide pour http, https ou ftp..
            </summary>
        </member>
        <member name="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1">
            <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            You can combine the use with <see cref="T:Xpandables.Net.Notifications.NotifyPropertyOnAttribute"/> to propagate notification.
            <para>This is an <see langword="abstract"/> and serializable class.</para>
            </summary>
            <typeparam name="T">Type of the derived class.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1"/> class and its <see cref="P:Xpandables.Net.Notifications.NotifyPropertyChanged`1.Dependencies"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``2(``0@,``0,System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <typeparam name="TProperty">Type of the property selector.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="selector">The expression delegate to retrieve the property name.</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>
            if the existing value matches the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="selector">The expression delegate to retrieve the property name.
            The expression expected is <see langword="nameof"/> with a delegate.</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>i
            f the existing value matched the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="selector"/> is not a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="propertyName">The name of the property. Optional (Already known at compile time).</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>
            if the existing value matches the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Notifications.NotifyPropertyChanged`1.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property name that has changed.</param>
        </member>
        <member name="P:Xpandables.Net.Notifications.NotifyPropertyChanged`1.Dependencies">
            <summary>
            Contains a collection of dependencies on property changed notification.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Notifications.NotifyPropertyChanged`1.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.GetMemberNameFromExpression(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Returns the member name from the expression.
            The expression delegate is <see langword="nameof"/>, otherwise the result is null.
            </summary>
            <param name="nameOfExpression">The expression delegate for the property : <see langword="nameof"/>
            with delegate expected.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nameOfExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="nameOfExpression"/> is
            not a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.GetMemberNameFromExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.DependencyPropertiesProvider">
            <summary>
            Provides with the collection of dependencies found in the underlying type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Notifications.NotifyPropertyOnAttribute">
            <summary>
            When used with <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1"/>, makes sure that the decorated property will be notified
            when the target specified property by <see cref="P:Xpandables.Net.Notifications.NotifyPropertyOnAttribute.Name"/> has changed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyOnAttribute.#ctor(System.String)">
            <summary>
            Specifies that the decorated property will be notified when the target specified by name has changed.
            We advise the use of <see langword="nameof(propertyName)"/> as value.
            </summary>
            <param name="name">The name of the target property which changes are notified to the decorated property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Notifications.NotifyPropertyOnAttribute.Name">
            <summary>
            Gets the name of the target property which changes are notified to the decorated property.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Optionals.Optional`1">
            <summary>
            Describes an object that can contain a value or not of a specific type.
            You can make unconditional calls to its contents using <see cref="N:System.Linq"/> without testing whether the content is there or not.
            The enumerator will only return the available value.
            If <typeparamref name="T"/> is an enumerable, use the <see cref="M:Xpandables.Net.Optionals.Optional`1.GetEnumerable"/> function to access its contain.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetEnumerable">
            <summary>
            Returns the available enumerable collection value when <typeparamref name="T"/> is an enumerable.
            If enumerable value is null, it'll return an empty enumerable.
            Otherwise, its will throw an exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <typeparamref name="T"/> is not an enumerable.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ValueIsEnumerable">
            <summary>
            Determines whether the internal value is an enumerable.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Map``1(System.ValueTuple{System.Func{``0},System.Func{`0,``0}})">
            <summary>
            Creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="pattern">The pattern to be used.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.MapAsync``1(System.ValueTuple{System.Func{System.Threading.Tasks.Task{``0}},System.Func{`0,System.Threading.Tasks.Task{``0}}})">
            <summary>
            Asynchronously creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="pattern">The pattern to be used.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Bind``1(System.Func{`0,Xpandables.Net.Optionals.Optional{``0}})">
            <summary>
            Turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.BindAsync``1(System.Func{`0,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}}})">
            <summary>
            Asynchronously turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Map(System.Func{`0,`0})">
            <summary>
            Creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.MapAsync(System.Func{`0,System.Threading.Tasks.Task{`0}})">
            <summary>
            Asynchronously creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.WhenEmpty(System.Func{`0})">
            <summary>
            Creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.WhenEmptyAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Asynchronously creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Empty">
            <summary>
            Provides with an optional of the specific type that is empty.
            </summary>
            <returns>An optional with no value nor exception.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Some(`0)">
            <summary>
            Provides with an optional that contains a value of specific type.
            </summary>
            <param name="result">The value to be used for optional.</param>
            <returns>An optional with a value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.CompareTo(Xpandables.Net.Optionals.Optional{`0})">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether
            the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
              Value
              Meaning
              Less than zero
              This instance precedes <paramref name="other" /> in the sort order.
              Zero
              This instance occurs in the same position in the sort order as <paramref name="other" />.
              Greater than zero
              This instance follows <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.CompareTo(`0)">
            <summary>Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
              Value
              Meaning
              Less than zero
              This instance precedes <paramref name="other" /> in the sort order.
              Zero
              This instance occurs in the same position in the sort order as <paramref name="other" />.
              Greater than zero
              This instance follows <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(Xpandables.Net.Optionals.Optional{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(`0)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value;
              otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ToString(System.String,System.IFormatProvider)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <param name="format">The format to use.
             -or-
             A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined
             for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.
             -or-
             A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric
             format information from the current locale setting of the operating system.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Xpandables.Net.Optionals.OptionalHelpers">
            <summary>
            Functionalities for optional pattern methods.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.AsOptional``1(``0)">
            <summary>
            Converts the specified value to an optional instance.
            </summary>
            <typeparam name="T">The Type of the value.</typeparam>
            <param name="value">The value to act on.</param>
            <returns>An optional instance.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.MapAsync``2(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.ValueTuple{System.Func{System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``1}}})">
            <summary>
            Asynchronously creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="pattern">The pattern to be used.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pattern"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.BindAsync``2(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{``0,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``1}}})">
            <summary>
            Asynchronously turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.MapAsync``1(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{``0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.WhenEmptyAsync``1(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.Default">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Xpandables.Net.Queries.IQuery`1">
            <summary>
            Defines a query that contains a specific-type result when using the query pattern.
            </summary>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Queries.IQueryHandler`2">
            <summary>
            Defines a generic method that a class implements to asynchronously handle a type-specific query and
            returns a type-specific result.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TQuery">Type of the query that will be used as argument.</typeparam>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Queries.IQueryHandlerWrapper`1">
            <summary>
            This interface allows application authors to avoid use of C# dynamics with query pattern.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IQueryHandlerWrapper`1.HandleAsync(Xpandables.Net.Queries.IQuery{`0},System.Threading.CancellationToken)">
            <summary>
            Handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Queries.QueryHandlerBuilder`2">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TQuery">Type of argument to act on.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerBuilder`2.#ctor(System.Func{Xpandables.Net.Queries.IQuery{`1},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{`1}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.QueryHandlerBuilder`2"/> with the delegate to be used
            as <see cref="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerBuilder`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been cancelled.</exception>
        </member>
        <member name="T:Xpandables.Net.Queries.QueryHandlerWrapper`2">
            <summary>
            Implementation for <see cref="T:Xpandables.Net.Queries.IQueryHandlerWrapper`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.QueryHandlerWrapper`2"/> class.
            </summary>
            <param name="decoratee">The query handler instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.HandleAsync(Xpandables.Net.Queries.IQuery{`1},System.Threading.CancellationToken)">
            <summary>
            Handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.CommandRetryBehavior`1">
            <summary>
            This class allows the application author to add retry support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Retry.IBehaviorRetry"/> interface in order to activate the behavior.
            The target command handler can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1"/> to manage retry execution.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Retry.CommandRetryBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Retry.CommandRetryBehavior`1"/> class.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.CommandRetryBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.IBehaviorRetry">
            <summary>
            A marker interface that allows the command/query class handler implementation to be decorated with the retry behavior according to
            the decorated class type :
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Retry.QueryRetryBehavior`2"/>.
            <see cref="T:System.Windows.Input.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Retry.CommandRetryBehavior`1"/>.
            The command/query class must be decorated with <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> or implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider"/>.
            The handler can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1"/> to manage the retry execution.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider">
            <summary>
            An interface representing an <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> to be dynamically applied on the implementing class.
            This interface takes priority over the <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> declaration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider.GetRetryBehaviorAttribute(System.IServiceProvider)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> to be applied on the current instance.
            </summary>
            <param name="serviceProvider">The service provider instance.</param>
            <returns>An instance of a new <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1">
            <summary>
            This interface needs to be implemented by the command/query handler to manage the retry execution.
            </summary>
            <typeparam name="TArgument">The command/query type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryBehaviorHandler`1.BeforeRetry(`0,Xpandables.Net.Retry.IRetryContext)">
            <summary>
            This method get called before the retry execution.
            </summary>
            <param name="argument">The argument used to call the method with.</param>
            <param name="context">The retry execution context.</param>
        </member>
        <member name="T:Xpandables.Net.Retry.IRetryContext">
            <summary>
            The retry behavior execution context.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.Exception">
            <summary>
            Gets the handled exception.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.TimeInterval">
            <summary>
            Gets or sets the retry interval in milliseconds.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.RetryCount">
            <summary>
            Gets the retry number to be executed.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.IRetryContext.RetryFailed">
            <summary>
            Determines whether the retry execution failed. Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.UpdateTimeInterval(System.TimeSpan)">
            <summary>
            Updates the <see cref="P:Xpandables.Net.Retry.IRetryContext.TimeInterval"/> value.
            </summary>
            <param name="timeInterval">The new value.</param>
            <returns>The instance with the new time interval.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="timeInterval"/> must be greater or equal to zero.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.UpdateException(System.Exception)">
            <summary>
            Updates the exception value.
            </summary>
            <param name="exception">The handled exception.</param>
            <returns>The instance with the new exception.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.IncreaseRetryCount">
            <summary>
            Increases the retry count value.
            </summary>
            <returns>The instance with the new value.</returns>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.RetryIsFailed">
            <summary>
            Sets the retry execution is failed.
            </summary>
            <returns>The instance with the new value.</returns>
        </member>
        <member name="M:Xpandables.Net.Retry.IRetryContext.RetryIsNotFailed">
            <summary>
            Sets that the retry execution is not failed.
            </summary>
            <returns>The instance with the new value.</returns>
        </member>
        <member name="T:Xpandables.Net.Retry.QueryRetryBehavior`2">
            <summary>
            This class allows the application author to add persistence support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Retry.IBehaviorRetry"/> interface in order to activate the behavior.
            The target command handler can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorHandler`1"/> to manage retry execution.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Retry.QueryRetryBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Retry.QueryRetryBehavior`2"/>.
            </summary>
            <param name="decoratee">The query to decorate.</param>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Retry.QueryRetryBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryBehaviorAttribute">
            <summary>
            Describes the parameters for a command/query used to apply retry behavior.
            The attribute should decorate implementations of <see cref="T:Xpandables.Net.Queries.IQuery`1"/> or <see cref="T:Xpandables.Net.Commands.ICommand"/>.
            Your class can implement the <see cref="T:Xpandables.Net.Retry.IRetryBehaviorAttributeProvider"/> to dynamically return a <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.RetryBehaviorAttribute.ExceptionTypes">
            <summary>
            Gets the collection of exception types that allow the retry behavior to occur.
            The default value is <see cref="T:System.Exception"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.RetryBehaviorAttribute.RetryNumber">
            <summary>
            Gets the number of retry. The default value is 3.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Retry.RetryBehaviorAttribute.RetryInterval">
            <summary>
            Gets the interval time between retries (in milliseconds). The default value is 500.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorAttribute.IsValid">
            <summary>
            Determines whether or not the attribute arguments are valid.
            </summary>
            <returns>Returns the current instance if so, otherwise throws an exception.</returns>
            <exception cref="T:System.ArgumentNullException">Arguments are not valid.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryBehaviorException">
            <summary>
            the retry behavior exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Xpandables.Net.Retry.RetryBehaviorException" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Xpandables.Net.Retry.RetryBehaviorException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryBehaviorException.#ctor">
            <summary>
            Initializes the default <see cref="T:Xpandables.Net.Retry.RetryBehaviorException"/> class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryContext">
            <summary>
            Provides with the retry behavior current execution context.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryContext.#ctor(System.Exception,System.TimeSpan,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Retry.RetryContext"/> class with context information.
            </summary>
            <param name="exception">The handled exception.</param>
            <param name="timeInterval">The time interval.</param>
            <param name="retryCount">The retry count.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="retryCount"/> must be greater that zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="timeInterval"/> must be greater or equal to zero.</exception>
        </member>
        <member name="T:Xpandables.Net.Retry.RetryHelpers">
            <summary>
            Provides extensions methods for behaviors.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Retry.RetryHelpers.GetRetryBehaviorAttribute``1(``0,System.IServiceProvider)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Retry.RetryBehaviorAttribute"/> from the specified argument.
            </summary>
            <typeparam name="TSource">The type of the argument.</typeparam>
            <param name="source">The source instance.</param>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1">
            <summary>
            This class allows the application author to add transaction support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Transactions.IBehaviorTransaction"/> in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/>, that you should
            provide an implementation and use the extension method <see langword="AddTransactionScopeBehavior{TTransactionScopeProvider}"/>
            for registration. The transaction scope definition comes from the
            <see cref="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)"/> method.
            if no transaction is returned, the execution is done normally.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Transactions.CommandTransactionBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},Xpandables.Net.Transactions.ITransactionScopeProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1"/>.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="transactionScopeProvider">The transaction scope provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transactionScopeProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Transactions.CommandTransactionBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Transactions.IBehaviorTransaction">
            <summary>
            A marker interface that allows the handler class implementation to be decorated with transaction behavior according to
            the decorated class type :
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2"/>.
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1"/>.
            You must implement the <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/> to provide the transaction scope.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Transactions.ITransactionScopeProvider">
            <summary>
            Provides with a method to retrieve a definition of a transaction scope to be applied to the target command/query.
            You should provide an implementation of this interface that will be used with the <see cref="T:Xpandables.Net.Transactions.CommandTransactionBehavior`1"/>
            of <see cref="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2"/> decorator to add transaction behavior to the execution flow.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)">
            <summary>
            Returns an instance that contains the transaction scope to be used when handling the target command/query.
            </summary>
            <param name="argument">The command/query instance to retrieve the transaction scope for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2">
            <summary>
            This class allows the application author to add transaction support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Transactions.IBehaviorTransaction"/> in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/>, that you should
            provide an implementation and use the extension method for registration.
            The transaction scope definition comes from the <see cref="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)"/> method.
            if no transaction is returned, the execution is done normally.
            </summary>
            <typeparam name="TQuery">The type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Transactions.QueryTransactionBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.Transactions.ITransactionScopeProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Transactions.QueryTransactionBehavior`2"/>.
            </summary>
            <param name="decoratee">The query handler to decorate.</param>
            <param name="transactionScopeProvider">The transaction scope provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transactionScopeProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Transactions.QueryTransactionBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1">
            <summary>
            This class allows the application author to add validation support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.ValidatorRules.IBehaviorValidation"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1"/>
            and applies all validators found to the target command before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> or <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRule`1"/> for validation.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},Xpandables.Net.ValidatorRules.ICompositeValidatorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1"/>.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1">
            <summary>
            The composite validator used to wrap all validators for a specific type.
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1.#ctor(System.Collections.Generic.IEnumerable{Xpandables.Net.ValidatorRules.IValidatorRule{`0}})">
            <summary>
            Initializes the composite validator with all validators for the argument.
            </summary>
            <param name="validators">The collection of validators to act with.</param>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies all validators to the argument and throws the <see langword="ValidationException" /> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IBehaviorValidation">
            <summary>
            A marker interface that allows the command/query class to be decorated with the validation behavior according to the class type :
            <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2"/> while
            <see cref="T:Xpandables.Net.Commands.ICommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.ValidatorRules.CommandValidatorBehavior`1"/>.
            The default validation behavior uses the data annotations validator on validation attributes. You can implement the interface
            <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> or derive a class from <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRule`1"/> to customize a validation behavior.
            <para></para>
            You need to register the expected behavior to the service collections using the appropriate extension method
            for the validation behavior and to register all your custom implementations.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule">
            <summary>
            Defines a method contract used to validate an argument using composition (wrapping all validators of a specific-type).
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ICompositeValidatorRule.ValidateAsync(System.Object)">
            <summary>
            Asynchronously applies all validators to the argument and throws the <see langword="ValidationException"/> if necessary.
            </summary>
            <param name="target">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1">
            <summary>
            Defines a method contract used to validate a type-specific argument using composition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies all validators to the argument and throws the <see langword="ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IValidatorRule">
            <summary>
            Defines a method contract used to validate an argument.
            The implementation must be thread-safe when working in a multi-threaded environment.
            <para>Contains default implementation. You just need to override the method.</para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IValidatorRule.ValidateAsync(System.Object)">
            <summary>
            Asynchronous applies validation process and throws the <see langword="ValidationException"/> if necessary.
            </summary>
            <param name="target">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.ValidatorRules.IValidatorRule.Order">
            <summary>
            Determines the zero-base order in which the validator will be executed.
            The default value is zero.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.IValidatorRule`1">
            <summary>
            Defines a method contract used to validate a type-specific argument.
            The implementation must be thread-safe when working in a multi-threaded environment.
            <para>Contains default implementation. You just need to override the method.</para>
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.IValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies validation the argument and throws the <see langword="ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.NullValidatorRule`1">
            <summary>
            Validator when no explicit registration exist for a given type.
            </summary>
            <typeparam name="TArgument">Type of argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.NullValidatorRule`1.ValidateAsync(`0)">
            <summary>
            Default implementation.
            </summary>
            <param name="_">The argument to be validated.</param>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2">
            <summary>
            This class allows the application author to add validation support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.ValidatorRules.IBehaviorValidation"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.ValidatorRules.ICompositeValidatorRule`1"/>
            and applies all validators found to the target query before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> or <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRule`1"/> for validation.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.ValidatorRules.ICompositeValidatorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2"/>.
            </summary>
            <param name="decoratee">The query handler to decorate.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.QueryValidatorBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ValidatorRule">
            <summary>
            Defines the default implementation for validating an argument of type-specific.
            <para>You must derive from this class to implement a custom validator that match your requirement.
            If you want to apply many validators for one argument, see <see cref="T:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1"/>.</para>
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ValidatorRule`1">
            <summary>
            Defines the default implementation for validating an argument of type-specific.
            <para>You must derive from this class to implement a custom validator that match your requirement.
            If you want to apply many validators for one argument, see <see cref="T:Xpandables.Net.ValidatorRules.CompositeValidatorRule`1"/>.</para>
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="T:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TArgument">Type of the argument.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.ValidatorRules.IValidatorRule`1"/> implementation.
            </summary>
            <param name="validator"></param>
        </member>
        <member name="M:Xpandables.Net.ValidatorRules.ValidatorRuleBuilder`1.ValidateAsync(`0)">
            <summary>
            Asynchronously applies validation the argument and throws the <see langword="ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.ValueObject">
            <summary>
            An object that represents a descriptive aspect of the domain with no conceptual identity.
            <para><see cref="T:Xpandables.Net.ValueObject"/> are instantiated to represent elements of the design that we care about only
            for what they are not who or which they are.” [Source : Evans 2003]</para>
            This is an <see langword="abstract"/> and <see langword="serializable"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueObject.GetEqualityComponents">
            <summary>
            When implemented in derived class, this method will provide the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            The comparison is done by using SequenceEqual() on the two sets of components.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.EqualOperator(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.op_Equality(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.op_Inequality(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares difference.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.NotEqualOperator(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares difference.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Xpandables.Net.ValueRange`1">
            <summary>
            Defines a pair of values, representing a segment.
            This class uses <see cref="T:Xpandables.Net.ValueRangeConverter"/> as type converter.
            </summary>
            <typeparam name="TValue">The Type of each of two values of range.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValueRange`1"/> with the specified values.
            </summary>
            <param name="min">The minimal value of range.</param>
            <param name="max">The maximal value of range.</param>
        </member>
        <member name="P:Xpandables.Net.ValueRange`1.Min">
            <summary>
            Gets the minimal value of range.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ValueRange`1.Max">
            <summary>
            Gets the maximal value of range.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.ToString">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.ValueRange`1"/> separated by ":".
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the string <see cref="T:Xpandables.Net.ValueRange`1"/> using the specified format and provider.
            The format will received address properties in the following order : <see cref="P:Xpandables.Net.ValueRange`1.Min"/> and <see cref="P:Xpandables.Net.ValueRange`1.Max"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Xpandables.Net.ValueRange`1"/> with other object.
            </summary>
            <param name="obj">Object to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.GetHashCode">
            <summary>
            Computes the hash-code for the <see cref="T:Xpandables.Net.ValueRange`1"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.op_Equality(Xpandables.Net.ValueRange{`0},Xpandables.Net.ValueRange{`0})">
            <summary>
            Applies equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.op_Inequality(Xpandables.Net.ValueRange{`0},Xpandables.Net.ValueRange{`0})">
            <summary>
            Applies non equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Equals(Xpandables.Net.ValueRange{`0})">
            <summary>
            Compares <see cref="T:Xpandables.Net.ValueRange`1"/> with the value of type <typeparamref name="TValue"/>.
            </summary>
            <param name="other">Option to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.IsEmpty">
            <summary>
            Determines whether this range is empty or not.
            Returns <see langword="true"/> if so, otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.ValueRangeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.ValueRange`1"/> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type
            to a range value object using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a range value object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRangeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1">
            <summary>
            This class allows the application author to add visitor support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1"/>
            and applies all visitors found to the target command before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.VisitorRules.IVisitorRule`1"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1.#ctor(Xpandables.Net.Commands.ICommandHandler{`0},Xpandables.Net.VisitorRules.ICompositeVisitorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1"/>.
            </summary>
            <param name="decoratee">the decorated command handler.</param>
            <param name="visitor">the visitor to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CommandVisitorBehavior`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.CompositeVisitorRule`1">
            <summary>
            The composite visitor used to wrap all visitors for a specific visitable type.
            </summary>
            <typeparam name="TElement">Type of the element to be visited</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CompositeVisitorRule`1.#ctor(System.Collections.Generic.IEnumerable{Xpandables.Net.VisitorRules.IVisitorRule{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.VisitorRules.CompositeVisitorRule`1"/> with a collection of visitors.
            </summary>
            <param name="visitors">The collection of visitors for a specific type.</param>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.CompositeVisitorRule`1.VisitAsync(`0)">
            <summary>
            Applies all found visitors to the element according to the visitor order.
            </summary>
            <param name="element">The element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element" /> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable" />.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1">
            <summary>
            Allows an application author to apply the visitor pattern using composition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1.VisitAsync(`0)">
            <summary>
            Asynchronously applies all found visitors to the element according to the visitor order.
            </summary>
            <param name="element">The element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule">
            <summary>
            Allows an application author to apply the visitor pattern using composition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.ICompositeVisitorRule.VisitAsync(System.Object)">
            <summary>
            Asynchronously applies all found visitors to the target element according to the visitor order.
            </summary>
            <param name="target">The target element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.IVisitable">
            <summary>
            Defines an Accept operation that takes a visitor as an argument.
            Visitor design pattern allows you to add new behaviors to an existing object without changing the object structure.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitable.AcceptAsync(Xpandables.Net.VisitorRules.IVisitorRule)">
            <summary>
            Defines the Accept operation.
            When overridden in derived class, this method will accept the specified visitor.
            The default behavior just call the visit method of the visitor on the current instance.
            </summary>
            <param name="visitor">The visitor to be applied on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitable.AcceptAsync(Xpandables.Net.VisitorRules.ICompositeVisitorRule)">
            <summary>
            Defines the Accept operation with <see cref="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule"/>.
            </summary>
            <param name="visitor">The composite visitor to be applied on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.IVisitorRule">
            <summary>
            Visitor allows you to add new behaviors to an existing object without changing the object structure.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior checks that the argument is not null and implements <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.
            </summary>
            <param name="target">The target element to be visited, must implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="target"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.VisitorRules.IVisitorRule.Order">
            <summary>
            Determines the zero-base order in which the visitor will be applied.
            The default value is zero.
            </summary>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.IVisitorRule`1">
            <summary>
            Allows an application author to apply the visitor pattern : The generic Visitor definition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.IVisitorRule`1.VisitAsync(`0)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior just call the non-generic <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)"/> method from base interface
            for validating the element.
            The non-generic method <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)"/> checks that the argument is not null and implements <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.
            </summary>
            <param name="element">Element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element"/> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.NullVisitorRule`1">
            <summary>
            Visitor when no explicit registration exist for a given type.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.NullVisitorRule`1.VisitAsync(`0)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior just call the non-generic <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)" /> method from base interface
            for validating the element.
            The non-generic method <see cref="M:Xpandables.Net.VisitorRules.IVisitorRule.VisitAsync(System.Object)" /> checks that the argument is not null and implements <see cref="T:Xpandables.Net.VisitorRules.IVisitable" />.
            </summary>
            <param name="element">Element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element" /> does not implement <see cref="T:Xpandables.Net.VisitorRules.IVisitable" />.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2">
            <summary>
            This class allows the application author to add visitor support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.VisitorRules.IVisitable"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.VisitorRules.ICompositeVisitorRule`1"/>
            and applies all visitors found to the target query before the query get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.VisitorRules.IVisitorRule`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.VisitorRules.ICompositeVisitorRule{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2"/>.
            </summary>
            <param name="decoratee">The query to be decorated.</param>
            <param name="visitor">The composite visitor to apply</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.VisitorRules.QueryVisitorBehavior`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
    </members>
</doc>
