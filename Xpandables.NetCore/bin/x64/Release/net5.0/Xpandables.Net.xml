<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xpandables.Net</name>
    </assembly>
    <members>
        <member name="T:Xpandables.Net.AssignExtensions">
            <summary>
            Provides with extension method similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.AssignExtensions.Assign``1(``0,System.Action{``0})">
            <summary>
            Sets properties via lambda expression scope.
            This is similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source item to act on.</param>
            <param name="action">The action to be applied.</param>
            <returns>The same object after applying the action on it.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.AssignExtensions.Assign``1(``0,System.Action{``0}[])">
            <summary>
            Sets properties via lambda expressions scope.
            This is similar to the VB.Net key word <see lanwgord="With"/>..<see lanwgord="EndWith"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source item to act on.</param>
            <param name="actions">The actions to be applied.</param>
            <returns>The same object after applying the action on it.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="actions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.AssignExtensions.Assign``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Object)">
            <summary>
            Sets properties via lambda expression. This is useful when dealing with <see cref="T:System.Linq.Expressions.Expression`1"/>.
            </summary>
            <typeparam name="TSource">Type source.</typeparam>
            <param name="source">The source instance to act on.</param>
            <param name="nameOfExpression">The expression delegate for the property.
            Just use <see langword="nameof"/> as expression for the delegate.</param>
            <param name="value">The value for the property.</param>
            <returns>The current instance with modified property.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nameOfExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="nameOfExpression"/> is not valid.</exception>
            <exception cref="T:System.Reflection.TargetInvocationException">An error occurred while setting the property value. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Asynchronous.AsyncEnumerableBuilder`1">
            <summary>
            Allows a generic collection to be asynchronously enumerated.
            This class implements <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Asynchronous.AsyncEnumerableBuilder`1"/> with the collection to be asynchronously enumerated.
            </summary>
            <param name="collection">The collection to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableBuilder`1.#ctor(System.Func{System.Threading.CancellationToken,System.Collections.Generic.IAsyncEnumerator{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Asynchronous.AsyncEnumerableBuilder`1"/> with the async enumerator.
            </summary>
            <param name="asyncEnumerator">The delegate for async enumerator.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="asyncEnumerator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableBuilder`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Returns an enumerator that iterates asynchronously through the collection.
            </summary>
            <param name="cancellationToken">A System.Threading.CancellationToken that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Asynchronous.AsyncEnumerableExtensions">
            <summary>
            Provides with methods used to execute asynchronous operation synchronously.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableExtensions.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="func">The asynchronous function to execute synchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="func"/> is null.</exception>
            <returns>An object of <typeparamref name="TResult"/> type.</returns>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableExtensions.RunSync``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
            <param name="task">The asynchronous function to execute synchronously.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> is null.</exception>
            <returns>An object of <typeparamref name="TResult"/> type.</returns>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableExtensions.RunSync(System.Threading.Tasks.Task)">
            <summary>
            Executes the target asynchronous operation synchronously.
            </summary>
            <param name="task">The operation to be synchronously executed.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="task"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumerableExtensions.Empty``1">
            <summary>
            Returns an empty async-enumerable.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
            <returns>An async-enumerable sequence with no elements.</returns>
        </member>
        <member name="T:Xpandables.Net.Asynchronous.AsyncEnumeratorBuilder`1">
            <summary>
            Add asynchronous iteration support to a generic collection.
            This class implements <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumeratorBuilder`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Asynchronous.AsyncEnumeratorBuilder`1"/> with the enumerator.
            </summary>
            <param name="inner">The enumerator to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="inner"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Asynchronous.AsyncEnumeratorBuilder`1.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumeratorBuilder`1.DisposeAsync">
            <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
        </member>
        <member name="M:Xpandables.Net.Asynchronous.AsyncEnumeratorBuilder`1.MoveNextAsync">
            <summary>
             Advances the enumerator asynchronously to the next element of the collection.
            </summary>
            <returns> A System.Threading.Tasks.ValueTask`1 that will complete with a result of true if the enumerator was successfully 
            advanced to the next element, or false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Commands.AsyncCommandHandlerBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Commands.IAsyncCommandHandler`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TCommand">Type of command to act on.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Commands.AsyncCommandHandlerBuilder`1.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Commands.AsyncCommandHandlerBuilder`1"/> class with the delegate to be used
            as <see cref="M:Xpandables.Net.Commands.IAsyncCommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Commands.IAsyncCommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Commands.AsyncCommandHandlerBuilder`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command using the delegate from the constructor.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Commands.IAsyncCommand">
            <summary>
            This interface is used as a marker for commands when using the asynchronous command pattern.
            <para>Class implementation is used with the <see cref="T:Xpandables.Net.Commands.IAsyncCommandHandler`1"/> where
            "TCommand" is <see cref="T:Xpandables.Net.Commands.IAsyncCommand"/> class implementation.</para>
            This can also be enhanced with some useful decorators.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Commands.IAsyncCommandHandler`1">
            <summary>
            Provides with a method to asynchronously handle a command of specific type that implements <see cref="T:Xpandables.Net.Commands.IAsyncCommand"/> interface.
            This interface inherits from <see cref="T:Xpandables.Net.ICanHandle`1"/> that determines whether or not the command can be handled. Its default behavior returns <see langword="true"/>.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TCommand">Type of the command to act on.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Commands.IAsyncCommandHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Correlation.AsyncCommandCorrelationDecorator`1">
            <summary>
            This class allows the application author to add post/rollback event support to command handler control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Correlation.ICorrelationDecorator"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target command handler class implementation should reference the
            <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TCommand">Type of the command to be handled.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncCommandCorrelationDecorator`1.#ctor(Xpandables.Net.Correlation.AsyncCorrelationContext,Xpandables.Net.Commands.IAsyncCommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.AsyncCommandCorrelationDecorator`1"/> class with the correlation context and the command handler to be decorated.
            </summary>
            <param name="correlationContext">The correlation context.</param>
            <param name="decoratee">The command handler to be decorated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncCommandCorrelationDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command adding post/rollback event to the decorated handler.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Correlation.AsyncCorrelationContext">
            <summary>
            The implementation of <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/>.
            Defines two tasks that can be used to follow process after a control flow with <see cref="E:Xpandables.Net.Correlation.AsyncCorrelationContext.PostEvent"/>
            and on exception during the control flow with <see cref="E:Xpandables.Net.Correlation.AsyncCorrelationContext.RollbackEvent"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncCorrelationContext.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.AsyncCorrelationContext"/>.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.AsyncCorrelationContext.PostEvent">
            <summary>
            The event that will be asynchronously raised after the main one in the same control flow only if there is no exception.
            The event will received the control flow return value for non-void method. Its default behavior does nothing.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.AsyncCorrelationContext.RollbackEvent">
            <summary>
            The event that will be asynchronously raised after the main one when exception. The event will received the control flow handled exception. Its default behavior does nothing.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncCorrelationContext.OnPostEventAsync(System.Object)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Correlation.AsyncCorrelationContext.PostEvent"/> event.
            </summary>
            <param name="returnValue">The control flow return value only for non-void method.</param>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncCorrelationContext.OnRollbackEventAsync(System.Exception)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Correlation.AsyncCorrelationContext.RollbackEvent"/> event.
            </summary>
            <param name="exception">The control flow handled exception.</param>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncCorrelationContext.Reset(System.String)">
            <summary>
            Clears the event.
            </summary>
            <param name="event">The event to reset.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.AsyncQueryCorrelationDecorator`2">
            <summary>
            This class allows the application author to add post/rollback event support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Correlation.ICorrelationDecorator"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target query handler class should reference the
            <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncQueryCorrelationDecorator`2.#ctor(Xpandables.Net.Correlation.AsyncCorrelationContext,Xpandables.Net.Queries.IAsyncQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.AsyncQueryCorrelationDecorator`2"/> class.
            </summary>
            <param name="correlationContext">the event register.</param>
            <param name="decoratee">The decorated query handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.AsyncQueryCorrelationDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.Correlation.CorrelationCollection`2">
            <summary>
            Provides with a collection of objects that need to be shared across asynchronous control flows.
            This collection implements <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationCollection`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.Correlation.CorrelationCollection`2"/>
            class that is empty, has the default concurrency level, has the default initial
            capacity, and uses the default comparer for the key type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Correlation.CorrelationCollection`2.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Returns an enumerator that iterates asynchronously through the collection.
            </summary>
            <param name="cancellationToken">A System.Threading.CancellationToken that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Correlation.AsyncCorrelationPostEvent">
            <summary>
            Represents a method signature to be used to handle post event in correlation context <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/>.
            </summary>
            <param name="returnValue">The control flow return value only for non-void method.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.AsyncCorrelationRollbackEvent">
            <summary>
            Represents a method signature to be used to handler rollback event in correlation context <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/>.
            </summary>
            <param name="exception">The control flow handled exception.</param>
        </member>
        <member name="T:Xpandables.Net.Correlation.IAsyncCorrelationContext">
            <summary>
            Defines two tasks that can be used to follow process after a control flow with <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.PostEvent"/>
            and on exception during the control flow with <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.RollbackEvent"/>.
            In order to be activated, the target class should implement the <see cref="T:Xpandables.Net.Correlation.ICorrelationDecorator"/> interface, 
            the target handling class should reference the current interface (to set the action).
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.PostEvent">
            <summary>
            The event that will be asynchronously raised after the main one in the same control flow only if there is no exception.
            The event will contain the control flow "return value" for non-void method.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.RollbackEvent">
            <summary>
            The event that will be asynchronously raised after the main one when exception. The event will contain the control flow handled exception.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.ICorrelationDecorator">
            <summary>
            A marker interface that allows the command/query class to add correlation decorator context event after control flow.
            In the class handling the query or command, you should reference
            the <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> and set the <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.PostEvent"/> and/or
            <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.RollbackEvent"/>.
            <para></para>
            Note that <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.PostEvent"/> will be raised at the end of the control only if there is no exception,
            giving you access to all data still alive on the control flow and the <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.RollbackEvent"/>
            will only be raised when exception. The exception in that case in accessible through the
            <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.RollbackEvent"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Correlation.QueryCorrelationDecorator`2">
            <summary>
            This decorator class allows the application author to add post/rollback event support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Correlation.ICorrelationDecorator"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> that
            adds an event (post event) to be raised after the main one in the same control flow only if there is no exception,
            and an event (roll back event) to be raised when exception. The target query handler class should reference the
            <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> interface in order to set the expected actions.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Correlation.QueryCorrelationDecorator`2.#ctor(Xpandables.Net.Correlation.AsyncCorrelationContext,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Correlation.QueryCorrelationDecorator`2"/> class with the correlation context and the query handler to be decorated.
            </summary>
            <param name="correlationContext">the correlation context.</param>
            <param name="decoratee">The decorated query handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="correlationContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Correlation.QueryCorrelationDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result, adding post/rollback event to the decorated handler.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Creators.IInstanceCreator">
            <summary>
            Provides with methods to create instance of specific type at runtime using delegate and cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.IInstanceCreator.Cache">
            <summary>
            Contains the instance cache that can be cleared to free memory.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.IInstanceCreator.OnException">
            <summary>
            Define an action that will be called in case of handled exception during a create method execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create(System.Type)">
            <summary>
            Returns an instance of the <paramref name="type"/> with a parameterless constructor or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <param name="type">The type to be created.</param>
            <returns>An instance of the <paramref name="type"/> if OK or null.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``1(System.Type,``0)">
            <summary>
            Returns an instance (using cache) of the <paramref name="type"/> with a constructor that takes an argument of a type-specific or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam">The type of the parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param">The parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK or null.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``2(System.Type,``0,``1)">
            <summary>
            Returns an instance (using cache) of the <paramref name="type"/> with a constructor that takes two arguments of specific-type or null if exception.
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam1">The type of the first parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam2">The type of the second parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param1">The first parameter to pass to the constructor.</param>
            <param name="param2">The first parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK or null.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.Create``3(System.Type,``0,``1,``2)">
            <summary>
            Returns an instance (using cache) of the <paramref name="type"/> with a constructor that takes three arguments of specific-type or null if exception..
            In case of exception, the <see cref="P:Xpandables.Net.Creators.IInstanceCreator.OnException"/> will be raised.
            </summary>
            <typeparam name="TParam1">The type of the first parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam2">The type of the second parameter to pass to the constructor.</typeparam>
            <typeparam name="TParam3">The type of the third parameter to pass to the constructor.</typeparam>
            <param name="type">The type to be created.</param>
            <param name="param1">The first parameter to pass to the constructor.</param>
            <param name="param2">The first parameter to pass to the constructor.</param>
            <param name="param3">The first parameter to pass to the constructor.</param>
            <returns>An instance of the <paramref name="type"/> if OK or null.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Creators.IInstanceCreator.ClearCache">
            <summary>
            Clear the creator cache.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Creators.InstanceCreator">
            <summary>
            The implementation for <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/>.
            You can customize the behavior providing your own, implementing of <see cref="T:Xpandables.Net.Creators.IInstanceCreator"/> interface.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.InstanceCreator.OnException">
            <summary>
            Define an action that will be called in case of handled exception during a create method execution.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Creators.InstanceCreator.Cache">
            <summary>
            Contains the instance cache that can be cleared to free memory.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Creators.InstanceCreator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Creators.InstanceCreator"/> settings the cache to its default value.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataConverterAttribute">
            <summary>
            Specifies what type to use as a converter for the property this attribute is bound to.
            <para>The specified type must match the <see cref="T:Xpandables.Net.Data.Elements.DataPropertyConverter"/> delegate signature.</para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataConverterAttribute.#ctor(System.Type,System.String)">
             <summary>
             Initializes a new instance of <see cref="T:Xpandables.Net.Data.Attributes.DataConverterAttribute"/> with the type converter to be used
             for the decorated property.
             </summary>
             <example>
             <list type="bullet">
             <item>
             <description>The example of decorating a property.</description>
             <code>
             The mapper will use the specified type to provide a custom converter from the data row value
             to the target type.
            
             public class Foo
             {
                 [DataConverter(typeof(DecimalPropertyConverter), nameof(DecimalPropertyConverter.Convert))]
                 public decimal Amount {get; set;}
             }
             </code>
             </item>
             </list>
             </example>
             <param name="ownerType">The type that contains the converter method.</param>
             <param name="methodName">The name of the method to be used. The method should be static.</param>
             <exception cref="T:System.ArgumentNullException">The <paramref name="ownerType"/> is null.</exception>
             <exception cref="T:System.ArgumentNullException">The <paramref name="methodName"/> is null.</exception>
             <exception cref="T:System.InvalidOperationException">Unable to get the delegate converter. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataConverterAttribute.Converter">
            <summary>
            Gets the fully delegate to use as a converter for the object this attribute is bound to.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataKeysAttribute">
            <summary>
            Denotes one or more properties that uniquely identify the decorated class.
            The properties will be used to create the class identity.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataKeysAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Attributes.DataKeysAttribute"/> with the collection of keys.
            </summary>
            <param name="keys">List of keys to be used to uniquely identify the decorated class.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="keys"/> is null or empty.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataKeysAttribute.Keys">
            <summary>
            Gets the collection of keys used to uniquely identify the decorated class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataNameAttribute">
            <summary>
            Specifies the name of the bound field on the target data source for the decorated property.
            It's useful when the decorated property/field name does not match the data source field.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataNameAttribute.#ctor(System.String)">
            <summary>
            Defines the name of the property/field to be used on a data source.
            </summary>
            <param name="name">The name value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataNameAttribute.Name">
            <summary>
            Gets the value of the name string used to map the data source column with.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute">
            <summary>
            Specifies that the decorated property should not be mapped with the target data source.
            Note that the default behavior of the process is to map all properties.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.DataPrefixAttribute">
            <summary>
            Specifies the prefix of the bound field on the target data source for the decorated property/field or class.
            When applied to a class, all the bound data source field names will be prefixed.
            Note that when applied on the property/field, this attribute takes priority over the attribute class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Attributes.DataPrefixAttribute.#ctor(System.String)">
            <summary>
            Defines the prefix of the property/field to be used on a data source.
            </summary>
            <param name="prefix">The prefix value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="prefix"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.DataPrefixAttribute.Prefix">
            <summary>
            Gets the value of the prefix string used to map the data source column with.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Attributes.IDataConverter">
            <summary>
            Allows an application author to return a data mapper property converter.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Attributes.IDataConverter.PropertyConverter">
            <summary>
            Gets the data mapper property converter instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.DataConnectionContext">
            <summary>
            Contains information of <see cref="P:Xpandables.Net.Data.Connections.DataConnectionContext.Connection"/> and <see cref="P:Xpandables.Net.Data.Connections.DataConnectionContext.DbProviderFactory"/>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContext.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Connections.DataConnectionContext"/>.
            </summary>
            <param name="dbConnection">The connection to the data base.</param>
            <param name="dbProviderFactory">The data base provider factory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dbConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dbProviderFactory"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContext.#ctor(Xpandables.Net.Data.Connections.DataConnectionContext)">
            <summary>
            Makes a copy of the current instance.
            </summary>
            <param name="source">The data connection to be copied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionContext.Connection">
            <summary>
            Gets the connection to the data base.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionContext.Command">
            <summary>
            Get the Database command instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionContext.DbProviderFactory">
            <summary>
            Gets the data base provider factory.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContext.InitializeAsync(System.Data.CommandType)">
            <summary>
            Opens the current data connection.
            </summary>
            <param name="commandType">The target command type.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContext.InitializeTransactionAsync(Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Initializes the database transaction if necessary.
            </summary>
            <param name="dataOptions">The data options.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContext.Dispose(System.Boolean)">
            <summary>
            Disposes the connection.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContext.DisposeAsync(System.Boolean)">
            <summary>
            Asynchronously disposes the connection.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.DataConnectionContextProvider">
            <summary>
            Provides with the <see cref="T:System.Data.Common.DbConnection"/> from the <see cref="T:System.Data.Common.DbProviderFactory"/> and the <see cref="T:Xpandables.Net.Data.Connections.IDataConnectionOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContextProvider.#ctor(Xpandables.Net.Data.Providers.IDataFactoryProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Connections.DataConnectionContextProvider"/>.
            </summary>
            <param name="dataFactoryProvider">The data factory provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataFactoryProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionContextProvider.GetDataConnectionContextAsync(Xpandables.Net.Data.Connections.IDataConnectionOptions)">
            <summary>
            Provides with a database connection using the provider and the connection string.
            </summary>
            <param name="dataConnection">The data connection to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.DataConnectionOptions">
            <summary>
            Contains data base connection information. Use <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build connection.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptions.#ctor(System.String,System.String,Xpandables.Net.Data.Providers.DataProviderType,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptions"/> with the provided properties.
            </summary>
            <param name="connectionStringSource">The connection string.</param>
            <param name="poolName">The pool name.</param>
            <param name="providerType">The data base provider type.</param>
            <param name="userId">The optional user identifier.</param>
            <param name="userPassword">The optional user password.</param>
            <param name="useIntegratedSecurity">Enable or not use of integrated security.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionStringSource"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="poolName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="userId"/> and/or <paramref name="userPassword"/> expected.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptions.ConnectionStringSource">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptions.PoolName">
            <summary>
            Gets the pool name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptions.ProviderType">
            <summary>
            Gets the provider type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptions.UserId">
            <summary>
            Gets the connection string user identifier.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptions.UserPassword">
            <summary>
            Gets the connection string user password.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptions.UseIntegratedSecurity">
            <summary>
            Gets the value whether or not to use integrated security.
            If <see langword="false"/>, you should provide <see cref="P:Xpandables.Net.Data.Connections.DataConnectionOptions.UserId"/> and <see cref="P:Xpandables.Net.Data.Connections.DataConnectionOptions.UserPassword"/> information.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptions.GetEqualityComponents">
            <summary>
            Provides with the list of components that comprise this class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder">
            <summary>
            Allows application author to build <see cref="T:Xpandables.Net.Data.Connections.IDataConnectionOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a data connection.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.Build">
            <summary>
            Returns a new <see cref="T:Xpandables.Net.Data.Connections.IDataConnectionOptions"/> using registered information.
            </summary>
            <exception cref="T:System.ArgumentNullException">Connection string, poll name or provider type is null.</exception>
            <exception cref="T:System.ArgumentException">User identifier and/or user password expected.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.AddConnectionString(System.String)">
            <summary>
            Adds the connection string source (without security information).
            </summary>
            <param name="connectionStringSource">The connection string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionStringSource"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.AddPoolName(System.String)">
            <summary>
            Adds the pool name to be used.
            </summary>
            <param name="poolName">The pool name.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="poolName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.AddProviderType(Xpandables.Net.Data.Providers.DataProviderType)">
            <summary>
            Adds the known provider name from the provider type.
            </summary>
            <param name="providerType">The provider type to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.AddUserId(System.String)">
            <summary>
            Adds the specified user identifier.
            </summary>
            <param name="userId">The user identifier.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="userId"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.AddUserPassword(System.String)">
            <summary>
            Adds the user password.
            </summary>
            <param name="userPassword">The user password.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="userPassword"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder.EnableIntegratedSecurity">
            <summary>
            Defines the use of integrated security. The connection string must contains the "Integrated Security=true" expression.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings">
            <summary>
            Contains data base connection information from the appsettings file.
            You can use <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build data connection instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.#ctor">
            <summary>
            Initializes a default instance of <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings"/> class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.ConnectionStringSource">
            <summary>
            Gets or sets the connection string.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.PoolName">
            <summary>
            Gets or sets the pool name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.ProviderName">
            <summary>
            Gets or sets the provider name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.ProviderType">
            <summary>
            Gets the provider type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.UserId">
            <summary>
            Gets or sets the connection string user identifier.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.UserPassword">
            <summary>
            Gets or sets the connection string user password.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.UseIntegratedSecurity">
            <summary>
            Gets the value whether or not to use integrated security.
            If <see langword="false"/>, you should provide <see cref="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.UserId"/> and <see cref="P:Xpandables.Net.Data.Connections.DataConnectionOptionsSettings.UserPassword"/> information.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.IDataConnectionContextProvider">
            <summary>
            Allows an application author to return a <see cref="T:Xpandables.Net.Data.Connections.DataConnectionContext"/> to be used with <see cref="T:Xpandables.Net.Data.IDataBase"/>.
            Note that you must register this interface as a singleton to take advantage of the caching process.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.IDataConnectionContextProvider.GetDataConnectionContextAsync(Xpandables.Net.Data.Connections.IDataConnectionOptions)">
            <summary>
            Provides with a database connection using the provider and the connection string.
            </summary>
            <param name="dataConnection">The data connection to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Connections.IDataConnectionOptions">
            <summary>
             Represents a set of values data base connection properties.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.ConnectionStringSource">
            <summary>
            Gets the connection string.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.PoolName">
            <summary>
            Gets the pool name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.ProviderType">
            <summary>
            Gets the provider type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UseIntegratedSecurity">
            <summary>
            Determines whether or not to use integrated security.
            If <see langword="false"/>, you should provide <see cref="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UserId"/> and <see cref="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UserPassword"/> information.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UserId">
            <summary>
            Gets the connection string user identifier when <see cref="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UseIntegratedSecurity"/> is false.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UserPassword">
            <summary>
            Gets the connection string user password when <see cref="P:Xpandables.Net.Data.Connections.IDataConnectionOptions.UseIntegratedSecurity"/> is false.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.IDataConnectionOptions.GetConnectionString">
            <summary>
            Returns the built connection string value.
            </summary>
            <exception cref="T:System.ArgumentException">The instance is invalid.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Connections.IDataConnectionOptions.IsValid(System.Exception@)">
            <summary>
            Determines whether or not the instance contains valid information.
            If so, returns <see langword="true"/> otherwise returns <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.DataBase">
            <summary>
            Provides with a default implementation of <see cref="T:Xpandables.Net.Data.IDataBase"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.#ctor(Xpandables.Net.Data.Connections.IDataConnectionContextProvider,Xpandables.Net.Data.Executables.IDataExecutableProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.DataBase"/>.
            </summary>
            <param name="dataConnectionContextProvider">The data context provider.</param>
            <param name="dataExecutableProvider">The data executable provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnectionContextProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutableProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.#ctor(Xpandables.Net.Data.Connections.IDataConnectionContextProvider,Xpandables.Net.Data.Executables.IDataExecutableProvider,Xpandables.Net.Data.Connections.IDataConnectionOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.DataBase"/> with a default data connection.
            </summary>
            <param name="dataConnectionContextProvider">The data context provider.</param>
            <param name="dataExecutableProvider">The data executable provider.</param>
            <param name="dataConnection">The default data connection to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnectionContextProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutableProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.#ctor(Xpandables.Net.Data.Connections.IDataConnectionContextProvider,Xpandables.Net.Data.Executables.IDataExecutableProvider,Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.DataBase"/> with a default data options.
            </summary>
            <param name="dataConnectionContextProvider">The data context provider.</param>
            <param name="dataExecutableProvider">The data executable provider.</param>
            <param name="dataOptions">The default data options to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnectionContextProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutableProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBase.#ctor(Xpandables.Net.Data.Connections.IDataConnectionContextProvider,Xpandables.Net.Data.Executables.IDataExecutableProvider,Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.DataBase"/> with a default data options and connection.
            </summary>
            <param name="dataConnectionContextProvider">The data context provider.</param>
            <param name="dataExecutableProvider">The data executable provider.</param>
            <param name="dataConnection">The default data connection to be used.</param>
            <param name="dataOptions">The default data options to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnectionContextProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutableProvider"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.DataBaseExtensions">
            <summary>
            Provides with extension methods for <see cref="T:Xpandables.Net.Data.DataBase"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.Contains(System.Data.IDataRecord,System.String)">
            <summary>
            Determines whether or not the underlying data reader contains the specified column name.
            If so, returns <see langword="true"/> otherwise returns <see langword="false"/>.
            </summary>
            <param name="source">The source of data reader to act on.</param>
            <param name="columName">The column to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="columName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.IsSqlConnection(System.Data.IDbConnection)">
            <summary>
            Determines whether or not the connection is an MSSQL Connection.
            </summary>
            <param name="connection">The connection to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ParseSql(System.String)">
            <summary>
            Parses query that uses old format.
            </summary>
            <param name="query">The query to be formatted.</param>
            <returns>A parsed query.</returns>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteProcedureTableAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name using options and returns an optional data table result.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteProcedureTableAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name using connection and returns an optional data table result.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteProcedureTableAsync(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name and returns an optional data table result.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteTransactionProcedureAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure as transactional using the options and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteTransactionProcedureAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure as transactional using the connection and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteTransactionProcedureAsync(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure as transactional and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteTransactionQueryAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the specified query as transactional using the options and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteTransactionQueryAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the specified query as transactional using the connection and returns the number of records affected.
            Use <see langword="DataOptionsBuilder().UseRetrievedIdentity()"/> to retrieve the newly created identity.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteQueryTableAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the query against the database using options and returns an optional data table result.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The command to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteQueryTableAsync(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the query against the database using connection and returns an optional data table result.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The command to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteQueryTableAsync(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes the query against the database and returns an optional data table result.
            </summary>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The command to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteSingleProcedureAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes a stored procedure against the database that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteSingleProcedureAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes a stored procedure against the database that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteSingleProcedureAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes a stored procedure against the database that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteSingleQueryAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes a query against the database that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteSingleQueryAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes a query against the database that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteSingleQueryAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes a query against the database that returns a single value of specific type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query/stored procedure to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedProcedureAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name using options and returns an asynchronous collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="dataOptions">The database options.</param>       
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedProcedureAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name using options and returns an asynchronous collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedProcedureAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name using connection and returns an asynchronous collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedProcedureAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes the stored procedure by its name returns an asynchronous collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedQueryAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the specify query against the database using connection, options and returns a collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database connection.</param>
            <param name="dataOptions">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedQueryAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the specify query against the database using options and returns a collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataOptions">The database connection.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedQueryAsync``1(Xpandables.Net.Data.IDataBase,Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Object[])">
            <summary>
            Asynchronously executes the specify query against the database using connection and returns a collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="dataConnection">The database options.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseExtensions.ExecuteMappedQueryAsync``1(Xpandables.Net.Data.IDataBase,System.String,System.Object[])">
            <summary>
            Asynchronously executes the specify query against the database and returns a collection of results of
            the specific-type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataBase">The target database.</param>
            <param name="commandText">The query to be executed.</param>
            <param name="parameters">The parameters to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.DataBaseOptions">
            <summary>
            Defines options to configure <see cref="T:Xpandables.Net.Data.DataBase"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseOptions.UseDataOptions(Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Uses the specified data options as the default for the target instance of <see cref="T:Xpandables.Net.Data.IDataBase"/>.
            </summary>
            <param name="dataOptions">The data options to be used.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="dataOptions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.DataBaseOptions.UseDataConnection(Xpandables.Net.Data.Connections.IDataConnectionOptions)">
            <summary>
            Uses the specified data connection as the default for the target instance of <see cref="T:Xpandables.Net.Data.IDataBase"/>.
            </summary>
            <param name="dataConnection">The data connection to be used.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="dataConnection"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.DataParameterBuilder">
            <summary>
            Defines a method to add parameters to a command.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataParameterBuilder.Build(System.Data.Common.DbCommand,System.Object[])">
            <summary>
            Adds the specified parameters to the current command instance.
            </summary>
            <param name="command">The command to act on.</param>
            <param name="parameters">The parameters to be added.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="parameters"/> can not be a mix of DbParameters and values.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.DataParameterBuilderExtensions">
            <summary>
            Helper for builder.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.DataParameterBuilderExtensions.RemoveExtraChars(System.String)">
            <summary>
            Remove extra characters from the specified string.
            </summary>
            <param name="source">The string to act on.</param>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataIdentityBuilder">
            <summary>
            Defines a delegate to be used to build entity identity.
            </summary>
            <param name="entity">The target entity to act on.</param>
            <returns>A string that uniquely identifies the specified entity.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataPropertyConverter">
            <summary>
            Defines a delegate to be used for converting data row value to a specific type.
            </summary>
            <param name="property">The data property descriptor.</param>
            <param name="rowValue">The data row value.</param>
            <returns>A converted value from the data row value.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataElement">
            <summary>
            Base implementation of a mapping with a class element.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.#ctor(System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataElement"/> class with the target element type.
            </summary>
            <param name="type">The type of the data element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.Type">
            <summary>
            Gets the type of the target element.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.IsPrimitive">
            <summary>
            Gets the value whether the element is a value type|string or reference type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.IsNullable">
            <summary>
            Gets the value whether the target element is nullable.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataElement.IsEnumerable">
            <summary>
            Gets the value whether the target element is a collection.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.GetElementType">
            <summary>
            Returns the element type.
            <para>If the element type is nullable, returns <see langword="Nullable.GetUnderlyingType(Type)"/>.</para>
            If the element type is a collection, returns <see langword="Type.GetGenericArguments()[0]"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.GetElementStronglyType">
            <summary>
            Returns the element type without looking for enumerable concern.
            If the element is a collection, returns <see langword="Type.GetGenericArguments()[0]"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.CreateElement(Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Creates an instance of the <see cref="P:Xpandables.Net.Data.Elements.DataElement.Type"/>. The type must contains a parameterless constructor.
            </summary>
            <param name="instanceCreator">The instance creator to be used.</param>
            <returns>A new instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create an instance. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.CreateStronglyElement(Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Creates an instance of the exactly value to <see cref="P:Xpandables.Net.Data.Elements.DataElement.Type"/>.
            </summary>
            <param name="instanceCreator">The instance creator to be used.</param>
            <returns>An new instance of <see cref="T:System.Type"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create an instance. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.CreateElementInstance(System.Type,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Creates an instance of the specified type using the instance creator.
            </summary>
            <param name="targetType">The type to be instantiated</param>
            <param name="instanceCreator">The instance creator.</param>
            <returns>A new instance of the target type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to create an instance. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataElement.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataEntity">
            <summary>
            Implementation of a mapping associated with a class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.#ctor(System.Type,System.Collections.Generic.IEnumerable{Xpandables.Net.Data.Elements.DataProperty})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> that contains a type and a collection of properties.
            </summary>
            <param name="type">the type of the entity.</param>
            <param name="properties">The collection of properties.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="properties"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.Entity">
            <summary>
            Gets the entity instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.ParentProperty">
            <summary>
            Gets the property on parent entity if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.ParentEntity">
            <summary>
            Gets the parent entity if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.Properties">
            <summary>
            Gets the collection of properties from the type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.Identity">
            <summary>
            Gets the identity that is unique for the entity.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.IsNestedEntity">
            <summary>
            Gets the value whether the current entity is a nested entity.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntity.IsIdentified">
            <summary>
            Gets the value whether or not the underlying object is already signed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.BuildIdentity">
            <summary>
            Builds the identity using the current entity instance.
            The entity must be already assigned.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.SetParent(System.Object,Xpandables.Net.Data.Elements.DataProperty)">
            <summary>
            Sets the parent properties of the current entity.
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="parentProperty">The property parent.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentProperty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntity.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target entity with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataProperty">
            <summary>
            Provides with custom information for a mapping associated with a property.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.#ctor(System.Type,System.String,System.String,System.String,System.Boolean,System.Delegate,System.Delegate,Xpandables.Net.Data.Elements.DataPropertyConverter)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/> with all arguments using cache.
            </summary>
            <param name="type">The property type.</param>
            <param name="propertyName">The property name.</param>
            <param name="dataName">The data name from the source.</param>
            <param name="dataPrefix">The data prefix from the source.</param>
            <param name="isIdentity">Whether the property is an identity key or not.</param>
            <param name="getter">The property getter delegate.</param>
            <param name="setter">The property setter delegate.</param>
            <param name="converter">The property converter.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataPrefix"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="getter"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="setter"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.PropertyName">
            <summary>
            Gets the target property name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.DataName">
            <summary>
            Gets the name of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.DataPrefix">
            <summary>
            Gets the prefix of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.DataFullName">
            <summary>
            Gets the full name of the column in the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.IsIdentity">
            <summary>
            Gets the value whether the property is used for uniquely identify the data source.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.Setter">
            <summary>
            Gets the setter delegate for the property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.Getter">
            <summary>
            Gets the getter delegate for the property.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataProperty.Converter">
            <summary>
            Gets the delegate used to convert the data row value to the expected type of property.
            The default behavior just returns the value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.SetData(System.Data.IDataRecord,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the data record value.
            </summary>
            <param name="dataRecord">The data record row to be used.</param>
            <param name="target">The target instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRecord"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataProperty.SetElement(System.Object,System.Object,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Sets the target element with the value.
            </summary>
            <param name="value">The value to be used.</param>
            <param name="target">The target element instance to act on.</param>
            <param name="instanceCreator">The instance creator to be used.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instanceCreator" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Setting the element failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataPropertySource">
            <summary>
            Provides with information to build a property.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataPropertySource.#ctor(System.Reflection.PropertyInfo,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataPropertySource"/>.
            </summary>
            <param name="propertyInfo"></param>
            <param name="options"></param>
            <param name="identyProperties"></param>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataPropertySource.PropertyInfo">
            <summary>
            Gets the property information.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataPropertySource.Options">
            <summary>
            Gets the current execution options.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataPropertySource.IdentyProperties">
            <summary>
            Gets a collection of properties defined as identifiers.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataEntityBuilder">
            <summary>
            Defines a method to build instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.Build(System.Type,Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Builds an implementation of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.
            </summary>
            <param name="type">The type of the class.</param>
            <param name="options"></param>
            <returns>An instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to build an instance. See inner exception.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntityBuilder.Cache">
            <summary>
            Gets the builder cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntityBuilder.PropertyBuilder">
            <summary>
            Gets the property builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.IDataEntityBuilder.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.BuildKey(System.Type)">
            <summary>
            Builds the key used for caching delegate.
            </summary>
            <param name="type">The type of the entity.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetEntityBuilder(System.Type,Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Builds the <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> from the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="options"></param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetEntityBuilderDelegate``1(System.Type)">
            <summary>
            Provides with the <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> builder delegate from type.
            </summary>
            <typeparam name="TDelegate">The type of the delegate to return.</typeparam>
            <param name="type">The type of the entity.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.BuildEntityDelegate``1">
            <summary>
            Constructs the delegate for an entity type.
            </summary>
            <typeparam name="TDelegate">The type of delegate.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.Builder(System.Type,Xpandables.Net.Data.Options.IDataExecutableOptions,Xpandables.Net.Data.Elements.IDataPropertyBuilder,Xpandables.Net.Creators.IInstanceCreator)">
            <summary>
            Builds the <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/> with provided arguments.
            </summary>
            <param name="source">The type of entity.</param>
            <param name="options">The execute options.</param>
            <param name="propertyBuilder">the property builder.</param>
            <param name="instanceCreator">The instance creator.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetEntityType(System.Type)">
            <summary>
            Gets the entity from the specified type.
            </summary>
            <param name="source">The type to act on.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataEntityBuilder.GetIdentityProperties(System.Type)">
            <summary>
            Gets the identities properties from the specified type.
            </summary>
            <param name="type">The type to act on.</param>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataEntityBuilder">
            <summary>
            Provides with a method to build implementations of <see cref="T:Xpandables.Net.Data.Elements.DataEntity"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.DataEntityBuilder.#ctor(Xpandables.Net.Data.Elements.IDataPropertyBuilder,Xpandables.Net.Creators.IInstanceCreator,Xpandables.Net.Correlation.CorrelationCollection{System.String,System.Lazy{System.Delegate}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Elements.DataEntityBuilder"/> class.
            </summary>
            <param name="propertyBuilder">The property builder.</param>
            <param name="instanceCreator">The instance creator.</param>
            <param name="cache">the dedicated cache.</param>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntityBuilder.Cache">
            <summary>
            Gets the builder cache.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntityBuilder.PropertyBuilder">
            <summary>
            Gets the property builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Elements.DataEntityBuilder.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.IDataPropertyBuilder">
            <summary>
            Defines a method to build instances of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Elements.IDataPropertyBuilder.Build(Xpandables.Net.Data.Elements.DataPropertySource)">
            <summary>
            Builds an instance of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.
            </summary>
            <param name="source">The property info source.</param>
            <returns>An implementation of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.</returns>
            <exception cref="T:System.ArgumentNullException">the <paramref name="source"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Elements.DataPropertyBuilder">
            <summary>
            Provides with a method to build instances of <see cref="T:Xpandables.Net.Data.Elements.DataProperty"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutable`1">
            <summary>
            Provides with a base definition of an executable process for <see cref="T:Xpandables.Net.Data.DataBase"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutable`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action against the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableArgument">
            <summary>
            Contains the argument execution for <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableArgument.#ctor(Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableArgument"/>.
            </summary>
            <param name="options">The execution options.</param>
            <param name="commandText">The string command to act with.</param>
            <param name="parameters">The parameters for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableArgument.Options">
            <summary>
            Get the execution options.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableArgument.CommandText">
            <summary>
            Gets the string command : can be stored procedure name, query or other command.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableArgument.Parameters">
            <summary>
            Gets the parameters to be used with the <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableBuilder`1.#ctor(System.Func{Xpandables.Net.Data.Executables.DataExecutableContext,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{`0}}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/> implementation.
            </summary>
            <param name="executable">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executable"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableBuilder`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableContext">
            <summary>
            Defines the context of an executable.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.#ctor(Xpandables.Net.Data.Executables.DataExecutableArgument,Xpandables.Net.Data.Connections.DataConnectionContext)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableContext"/> class with the argument and connection.
            </summary>
            <param name="argument">The context argument.</param>
            <param name="connectionContext">The component argument.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="connectionContext"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.Argument">
            <summary>
            Gets the argument for the executable.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Executables.DataExecutableContext.ConnectionContext">
            <summary>
            Gets the component needed by the executable.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.Dispose(System.Boolean)">
            <summary>
            Disposes the connection.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableContext.DisposeAsync(System.Boolean)">
            <summary>
            Asynchronously disposes the connection.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1">
            <summary>
            Provides with a base definition of an executable process for <see cref="T:Xpandables.Net.Data.DataBase"/> that maps the result to the target type.
            </summary>
            <typeparam name="TResult">The type of the result to map to.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapper`1.ExecuteMappedAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns the result mapped to the specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>An asynchronous enumeration of <typeparamref name="TResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableMapperBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapperBuilder`1.#ctor(System.Func{Xpandables.Net.Data.Executables.DataExecutableContext,System.Collections.Generic.IAsyncEnumerable{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/> implementation.
            </summary>
            <param name="executable">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="executable"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapperBuilder`1.ExecuteMappedAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns the result mapped to the specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>An asynchronous enumeration of <typeparamref name="TResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableMapperFuncProc`1">
            <summary>
             Executes a stored procedure or query and return the result mapped to specific type.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapperFuncProc`1.#ctor(Xpandables.Net.Data.Mappers.IDataMapper)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapperFuncProc`1"/>.
            </summary>
            <param name="dataMapper">the mapper to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableMapperFuncProc`1.ExecuteMappedAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns the result mapped to the specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>An asynchronous enumeration of <typeparamref name="TResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableProcedure">
            <summary>
            Executes a stored procedure and return number or records affected.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableProcedure.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableQuery`1">
            <summary>
            Executes a query and return one record of specific type.
            </summary>
            <typeparam name="TResult">The type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableQuery`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableSingle`1">
            <summary>
             Executes a stored procedure or query and return a single result.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableSingle`1.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableTable">
            <summary>
             Executes a stored procedure or query and return a data table.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableTable.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableTransaction">
            <summary>
            Executes a transaction and return number or records affected.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableTransaction.ExecuteAsync(Xpandables.Net.Data.Executables.DataExecutableContext)">
            <summary>
            Asynchronously executes an action to the database and returns a result of specific-type.
            </summary>
            <param name="context">The target executable context instance.</param>
            <returns>A task representing the asynchronous operation</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="context"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.IDataExecutableProvider">
            <summary>
            Allows application author to provide with an executable of a specific type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.IDataExecutableProvider.GetDataExecutable``2">
            <summary>
            Returns the executable that matches the specific type if found.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutable">The type of the executable.</typeparam>
            <returns>An instance of the executable type if found, otherwise null.</returns>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.IDataExecutableProvider.GetDataExecutableMapper``2">
            <summary>
            Returns the executable mapper that matches the specific type if found.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutableMapper">The type of the executable.</typeparam>
            <returns>An instance of the executable type if found, otherwise null.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Executables.DataExecutableProvider">
            <summary>
            Provides with a method to retrieve data executable instance using the <see cref="T:System.IServiceProvider"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Executables.DataExecutableProvider"/> with the service provider.
            </summary>
            <param name="serviceProvider">The service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableProvider.GetDataExecutable``2">
            <summary>
            Returns the executable that matches the specific type if found.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutable">The type of the executable.</typeparam>
            <returns>An instance of the executable type if found, otherwise null.</returns>
        </member>
        <member name="M:Xpandables.Net.Data.Executables.DataExecutableProvider.GetDataExecutableMapper``2">
            <summary>
            Returns the executable mapper that matches the specific type if found.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutableMapper">The type of the executable.</typeparam>
            <returns>An instance of the executable type if found, otherwise null.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.IDataBase">
            <summary>
            Provides with methods to execute command against a database using an implementation of <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1"/> or <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.IDataBase.DataConnection">
            <summary>
            May contains the data connection used from initialization.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.IDataBase.DataOptions">
            <summary>
            May contains the data options used from initialization.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``1(Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions,Xpandables.Net.Data.Executables.DataExecutable{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection, options and executable against the database
            and returns a result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="dataExecutable">The data executable instance to be used.</param>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutable" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``1(Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions,Xpandables.Net.Data.Executables.DataExecutableMapper{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection, options and executable mapper against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="dataExecutableMapper">the data executable mapper.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutableMapper" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``2(Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection, options and executable <typeparamref name="TDataExecutable" /> type against the database
            and returns a result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutable" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutable">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.</typeparam>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``2(Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified options and executable <typeparamref name="TDataExecutable" /> type against the database
            and returns a result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutable" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutable">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.</typeparam>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``2(Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection and executable <typeparamref name="TDataExecutable" /> type against the database
            and returns a result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutable" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutable">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.</typeparam>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``2(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified executable <typeparamref name="TDataExecutable" /> type against the database
            and returns a result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutable" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutable">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutable`1" />.</typeparam>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``1(Xpandables.Net.Data.Options.IDataExecutableOptions,Xpandables.Net.Data.Executables.DataExecutable{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified options and executable against the database
            and returns a result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataExecutable">The data executable instance to be used.</param>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutable" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``1(Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Executables.DataExecutable{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection and executable against the database
            and returns a result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataExecutable">The data executable instance to be used.</param>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutable" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteAsync``1(Xpandables.Net.Data.Executables.DataExecutable{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified executable against the database
            and returns a result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataExecutable">The data executable instance to be used.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataExecutable" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``2(Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection, options and executable <typeparamref name="TDataExecutableMapped" /> type against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutableMapped" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutableMapped">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1" />.</typeparam>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``2(Xpandables.Net.Data.Options.IDataExecutableOptions,System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified options and executable <typeparamref name="TDataExecutableMapped" /> type against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutableMapped" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutableMapped">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1" />.</typeparam>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataOptions" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``2(Xpandables.Net.Data.Connections.IDataConnectionOptions,System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified connection and executable <typeparamref name="TDataExecutableMapped" /> type against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutableMapped" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutableMapped">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1" />.</typeparam>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataConnection" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``2(System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified executable <typeparamref name="TDataExecutableMapped" /> type against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            The <typeparamref name="TDataExecutableMapped" /> type inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableMapper`1" />.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <typeparam name="TDataExecutableMapped">The type of the executable. The class inherits from <see cref="T:Xpandables.Net.Data.Executables.DataExecutableBuilder`1" />.</typeparam>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``1(Xpandables.Net.Data.Options.IDataExecutableOptions,Xpandables.Net.Data.Executables.DataExecutableMapper{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified executable mapper against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataExecutableMapper">The data executable mapper instance to be used.</param>
            <param name="dataOptions">The database options. You can use the <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``1(Xpandables.Net.Data.Connections.IDataConnectionOptions,Xpandables.Net.Data.Executables.DataExecutableMapper{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified executable mapper against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataExecutableMapper">The data executable mapper instance to be used.</param>
            <param name="dataConnection">The data connection. You can use the <see cref="T:Xpandables.Net.Data.Connections.DataConnectionOptionsBuilder"/> to build a new instance.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.IDataBase.ExecuteMappedAsync``1(Xpandables.Net.Data.Executables.DataExecutableMapper{``0},System.String,System.Data.CommandType,System.Object[])">
            <summary>
            Asynchronously executes a command/query with the specified executable mapper against the database
            and asynchronously returns result of <typeparamref name="TResult" /> type.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="dataExecutableMapper">The data executable mapper instance to be used.</param>
            <param name="commandText">The text command to run against the database.</param>
            <param name="commandType">The command type.</param>
            <param name="parameters">A collection of parameter objects for the command.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="commandText" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">the execution failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.IDataMapper">
            <summary>
            Provides with methods to map a source to entities.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.IDataMapper.MapAsync``1(System.Collections.Generic.IAsyncEnumerable{System.Data.IDataRecord},Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Asynchronously maps the data source to the specified type.
            </summary>
            <typeparam name="TEntity">The type of expected result.</typeparam>
            <param name="source">The data source to act on.</param>
            <param name="options">Defines the execution options.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.IDataMapper.MapAsync``1(System.Collections.Generic.IEnumerable{System.Data.IDataRecord},Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Asynchronously maps the data source collection to the specified type.
            </summary>
            <typeparam name="TEntity">The type of expected result.</typeparam>
            <param name="source">The data source collection to act on.</param>
            <param name="options">Defines the execution options.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.IDataMapper.MapAsync``1(System.Data.IDataRecord,Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Asynchronously maps the record to the specified type.
            </summary>
            <typeparam name="TEntity">The type of expected result.</typeparam>
            <param name="record">The data source to act on.</param>
            <param name="options">Defines the execution options.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="record"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapper.DataMapperRow">
            <summary>
            Gets the data mapper row.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapper.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.DataMapper">
            <summary>
            Implementation of <see cref="T:Xpandables.Net.Data.Mappers.IDataMapper"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.DataMapper.#ctor(Xpandables.Net.Data.Mappers.IDataMapperRow,Xpandables.Net.Correlation.CorrelationCollection{System.String,Xpandables.Net.Data.Elements.DataEntity})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Mappers.DataMapper"/> class.
            </summary>
            <param name="dataMapperRow">The data mapper for row.</param>
            <param name="entities">The shared entities collection.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataMapperRow"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapper.DataMapperRow">
            <summary>
            Gets the data mapper row.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapper.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.IDataMapperRow">
            <summary>
            Provides with a method to map a record to an entity.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.IDataMapperRow.MapAsync``1(System.Data.IDataRecord,Xpandables.Net.Data.Options.IDataExecutableOptions)">
            <summary>
            Asynchronously maps an entity with the record value.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="dataRecord">The record to be used.</param>
            <param name="options">The execution options to act with.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataRecord"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapperRow.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapperRow.EntityBuilder">
            <summary>
            Gets the entity builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.IDataMapperRow.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Mappers.DataMapperRow">
            <summary>
            Default implementation of <see cref="T:Xpandables.Net.Data.Mappers.IDataMapperRow"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Mappers.DataMapperRow.#ctor(Xpandables.Net.Creators.IInstanceCreator,Xpandables.Net.Data.Elements.IDataEntityBuilder,Xpandables.Net.Correlation.CorrelationCollection{System.String,Xpandables.Net.Data.Elements.DataEntity})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Mappers.DataMapperRow"/>.
            </summary>
            <param name="instanceCreator"></param>
            <param name="entityBuilder"></param>
            <param name="entities"></param>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapperRow.Entities">
            <summary>
            Gets the collection of built entities.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapperRow.EntityBuilder">
            <summary>
            Gets the entity builder.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Mappers.DataMapperRow.InstanceCreator">
            <summary>
            Gets the instance creator.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Options.DataExecutableOptions">
            <summary>
            Contains execution behaviors. Use <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> to build options.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.IsTransactionEnabled">
            <summary>
            Gets the value indicating whether or not to use transaction. The default value is <see langword="false"/>.
            if so, contains <see langword="true"/>, otherwise contains <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.IsolationLevel">
            <summary>
            Gets the isolation level for transaction. Only used if <see cref="P:Xpandables.Net.Data.Options.DataExecutableOptions.IsTransactionEnabled"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.ConditionalMapping">
            <summary>
            Defines the delegate that determines whether or not a property should be mapped.
            Its default behavior return <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.IsConditionalMappingEnabled">
            <summary>
            Gets the value indicating whether or not the conditional mapping has been defined. The default value is <see langword="false"/>.
            if so, contains <see langword="true"/>, otherwise contains <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.MappedNames">
            <summary>
            Contains a collection of manual names mapping.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.NotMappedNames">
            <summary>
            Contains a collection of manual names from types that should not to be mapped.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.Converters">
            <summary>
            Contains a collection of converters.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.CancellationToken">
            <summary>
            Contains the cancellation token to be used.
            The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.ContainsNotMappedNames">
            <summary>
            Gets the value indicating whether or not the filtered delegate has been defined. The default value is <see langword="false"/>
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.IsIdentityRetrieved">
            <summary>
            Gets the value indicating whether or not to retrieve the newly created identity from SQL command.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.DataExecutableOptions.IsOnExceptionDefined">
            <summary>
            Gets the value indicating whether <see cref="E:Xpandables.Net.Data.Options.DataExecutableOptions.OnException"/> event is defined.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Data.Options.DataExecutableOptions.OnException">
            <summary>
            Contains the event to raise when exception is handled.
            If defined, the process do not throws exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptions.OnExceptionHandled(System.Exception)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Data.Options.DataExecutableOptions.OnException"/> event.
            </summary>
            <param name="exception">The handled exception.</param>
        </member>
        <member name="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder">
            <summary>
            Allows application author to build <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder"/> class
            used to build a <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.Build">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptions"/> using registered information.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.BuildDefault">
            <summary>
            Returns a the default instance of <see cref="T:Xpandables.Net.Data.Options.DataExecutableOptions"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddTransaction(System.Data.IsolationLevel)">
            <summary>
            Enables use of transaction. The transaction will be closed just after the current execution.
            </summary>
            <param name="isolationLevel">The isolation level to be used. The default value used by the server is <see cref="F:System.Data.IsolationLevel.ReadCommitted"/> </param>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddExceptionEvent(System.Action{System.Exception})">
            <summary>
            Adds the event action that will be raised on exception.
            </summary>
            <param name="onException">The action that get called on exception.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddMappable(System.Func{Xpandables.Net.Data.Elements.DataProperty,System.Boolean})">
            <summary>
            This is the highest level of mapping.
            Adds a delegate that determines whether or not a property should be mapped.
            The delegate will received an instance of the processing property and should return <see langword="true"/> if the property should be
            mapped, otherwise <see langword="false"/>. This action should be used for complex mapping and be aware of the performance impact.
            <para>The definition here takes priority over all attributes <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/>
            and other <see cref="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddNotMappedName``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})"/>.</para>
            </summary>
            <param name="mappable">The delegate that determine if a property is used or not.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="mappable"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddDataName``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
            <summary>
            Bounds the specified model property name to the column data row specific name.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNameAttribute"/> attribute but takes priority over this attribute
            and <see cref="T:Xpandables.Net.Data.Attributes.DataPrefixAttribute"/> attribute.
            Does not works for nested type, you have to provide mapper name for nested properties.
            You can add many mappers for various properties.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertySelector">The model property selector. We advise use of <see langword="nameof(model.PropertyName)"/>
            The property name must match a real property name.</param>
            <param name="sourceColumnName">The name of the column in the data row.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertySelector"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="sourceColumnName"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The property can no be bound to the data row property.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddNotMappedName``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Specifies that selected property of the model must not be bound to the result.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/> attribute but takes priority over this attribute.
            You can add many mappers for various properties.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertySelector">The model property selector. We advise use of <see langword="nameof(model.PropertyName)"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertySelector"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The property can no be found in the target type.</exception>
            <exception cref="T:System.ArgumentException">The property already exist in the filter of target type.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddNotMappedNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}}[])">
            <summary>
            Specifies that selected properties of the model must not be bound to the result.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/> attribute but takes priority over this attribute.
            Does not works for nested type, you have to provide not mapped for nested types.
            You can add many mappers for various types.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertySelectors">The collection of model properties selector. We advise use of <see langword="nameof(model.PropertyName)"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertySelectors"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The property already exist in the filter of target type.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddNotMappedNames``1(System.String[])">
            <summary>
            Specifies that collection of property names of the model must not be bound to the result.
            Behaves like the <see cref="T:Xpandables.Net.Data.Attributes.DataNotMappedAttribute"/> attribute but takes priority over this attribute.
            Does not works for nested type, you have to provide not mapped for nested types.
            You can add many mappers for various types.
            </summary>
            <typeparam name="T">The type of the target model.</typeparam>
            <param name="propertyNames">A collection of string property names that shouldn't be bound to the result.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="propertyNames"/> is null or empty.</exception>
            <exception cref="T:System.ArgumentException">The model does not contains the specified property.</exception>
            <exception cref="T:System.ArgumentException">The property already exist in the filter of target type.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddConverter``1(Xpandables.Net.Data.Elements.DataPropertyConverter)">
            <summary>
            Adds a delegate to be used for converting data row value to the target type.
            The delegate will receive an instance of the target property and the value from the data row.
            You can add many converters for various type.
            <para>The <typeparamref name="TType"/> should be a primitive type, <see cref="T:System.DateTime"/> or a <see cref="T:System.String"/> type.</para>
            The definition here takes priority over the <see cref="T:Xpandables.Net.Data.Attributes.DataConverterAttribute"/> attribute.
            </summary>
            <typeparam name="TType">The type of the property the converter should be applied to its value.</typeparam>
            <param name="converter">The delegate to be used to convert a data row value for the target <typeparamref name="TType"/> type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="converter"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.AddCancellationToken(System.Threading.CancellationToken)">
            <summary>
            Defines the cancellation token for the execution.
            The default used value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
            <param name="cancellationToken">The cancellation token to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.UseRetrievedIdentity">
            <summary>
            Defines that the current execution should retrieve the last identity from the query.
            Be aware of the fact that the query must be an insertion, otherwise you will face an exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.DataExecutableOptionsBuilder.GetMemberNameFromExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="T">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
        </member>
        <member name="T:Xpandables.Net.Data.Options.IDataExecutableOptions">
            <summary>
             Represents a set of values data base executable options properties.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.IsTransactionEnabled">
            <summary>
            Gets the value indicating whether or not to use transaction. The default value is <see langword="false"/>.
            if so, contains <see langword="true"/>, otherwise contains <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.IsolationLevel">
            <summary>
            Gets the isolation level for transaction. Only used if <see cref="P:Xpandables.Net.Data.Options.IDataExecutableOptions.IsTransactionEnabled"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.ConditionalMapping">
            <summary>
            Defines the delegate that determines whether or not a property should be mapped.
            Its default behavior return <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.IsConditionalMappingEnabled">
            <summary>
            Gets the value indicating whether or not the conditional mapping has been defined. The default value is <see langword="false"/>.
            if so, contains <see langword="true"/>, otherwise contains <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.MappedNames">
            <summary>
            Contains a collection of manual names mapping.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.NotMappedNames">
            <summary>
            Contains a collection of manual names from types that should not to be mapped.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.Converters">
            <summary>
            Contains a collection of converters.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.CancellationToken">
            <summary>
            Contains the cancellation token to be used.
            The default value is <see cref="P:System.Threading.CancellationToken.None"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.ContainsNotMappedNames">
            <summary>
            Gets the value indicating whether or not the filtered delegate has been defined. The default value is <see langword="false"/>
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.IsIdentityRetrieved">
            <summary>
            Gets the value indicating whether or not to retrieve the newly created identity from SQL command.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Options.IDataExecutableOptions.IsOnExceptionDefined">
            <summary>
            Gets the value indicating whether <see cref="E:Xpandables.Net.Data.Options.IDataExecutableOptions.OnException"/> event is defined.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Data.Options.IDataExecutableOptions.OnException">
            <summary>
            Contains the event to raise when exception is handled.
            If defined, the process do not throws exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Options.IDataExecutableOptions.OnExceptionHandled(System.Exception)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Data.Options.IDataExecutableOptions.OnException"/> event.
            </summary>
            <param name="exception">The handled exception.</param>
        </member>
        <member name="T:Xpandables.Net.Data.Providers.DataFactoryProvider">
            <summary>
            The default implementation to return data provider factory from provider type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Providers.DataFactoryProvider.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Data.Providers.DataFactoryProvider"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Providers.DataProviderType">
            <summary>
            Defines the properties for data base access provider and derives from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            Its contains information about the <see cref="P:Xpandables.Net.Data.Providers.DataProviderType.ProviderFactoryTypeName"/> used to build the target provider and
            the <see cref="P:Xpandables.Net.Data.Providers.DataProviderType.DisplayName"/> that matches the assembly name of the target provider.
            <para>
            You can extend this class and provide with a list of data providers.
            </para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Providers.DataProviderType.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Construct a new data provider type with an index and the invariant name.
            </summary>
            <param name="index">The index for the date provider.</param>
            <param name="assemblyName">The invariant assembly name to be used.</param>
            <param name="providerFactoryTypeName">The provider factory type name.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="assemblyName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerFactoryTypeName"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.DisplayName">
            <summary>
            Gets the invariant (assembly) name that can be used pro grammatically to refer to the data provider type.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.ProviderFactoryTypeName">
            <summary>
            Gets the provider factory type name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.IsInstance">
            <summary>
            Determines whether or not the provider type refers to an instance factory.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.MSSQL">
            <summary>
            Provides data access for Microsoft SQL Server.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.ORACLE">
            <summary>
            For Oracle data sources version 8.1.7 and later.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.OLEDB">
            <summary>
            For data sources exposed by using OLE DB.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.ODBC">
            <summary>
            For data sources exposed by using ODBC.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.ENTITY">
            <summary>
            Provides data access for Entity Data Model (EDM) applications.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.SQLITE">
            <summary>
             Provides data access for Microsoft SQL Lite.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.MYSQL">
            <summary>
            Provides data access for MySQL.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Data.Providers.DataProviderType.NPGSQL">
            <summary>
            Provides data access for PostgreSQL.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Data.Providers.IDataFactoryProvider">
            <summary>
            Allows an application author to return a data provider factory from the specified provider type.
            The default implementation class is <see cref="T:Xpandables.Net.Data.Providers.DataFactoryProvider"/>.
            Contains default implementation.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Data.Providers.IDataFactoryProvider.GetProviderFactory(Xpandables.Net.Data.Providers.DataProviderType)">
            <summary>
            Returns an instance of the data provider factory matching the specified provider type.
            </summary>
            <param name="providerType">The provider type to find factory.</param>
            <returns>An instance of <see cref="T:System.Data.Common.DbProviderFactory" /> if found, otherwise an empty or exception.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="providerType" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.Dispatcher">
            <summary>
            The implementation for <see cref="T:Xpandables.Net.Dispatchers.IDispatcher"/>.
            Implements methods to execute the <see cref="T:Xpandables.Net.Queries.IAsyncQueryHandler`2"/>, <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> and
            <see cref="T:Xpandables.Net.Commands.IAsyncCommandHandler`1"/> process dynamically.
            This class can not be inherited.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Dispatchers.Dispatcher.DispatcherHandlerProvider">
            <summary>
            Gets the handlers service provider.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.Dispatcher.#ctor(Xpandables.Net.Dispatchers.IDispatcherHandlerProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Dispatchers.Dispatcher"/> with the handlers service provider.
            </summary>
            <param name="dispatcherHandlerProvider">The handler service provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dispatcherHandlerProvider"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.DispatcherHandlerProvider">
            <summary>
            An implementation of <see cref="T:Xpandables.Net.Dispatchers.IDispatcherHandlerProvider"/> that uses a instance of <see cref="T:System.IServiceProvider"/> to retrieve the handler.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.DispatcherHandlerProvider.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Dispatchers.DispatcherHandlerProvider"/> with a service provider.
            </summary>
            <param name="serviceProvider">The service provider to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="serviceProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.DispatcherHandlerProvider.GetHandler``1">
            <summary>
            Gets the handler of the <typeparamref name="THandler"/> type.
            </summary>
            <typeparam name="THandler">The type of the handler to look for.</typeparam>
            <returns>A handler of the <typeparamref name="THandler"/> type -or- null if there is no <typeparamref name="THandler"/> type.</returns>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.DispatcherHandlerProvider.GetHandler(System.Type)">
            <summary>
            Gets the handler of the specified type.
            </summary>
            <param name="handlerType">An object that specifies the type of handler object to get.</param>
            <returns>A handler of the <paramref name="handlerType"/> -or- null if there is no <paramref name="handlerType"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.IDispatcher">
            <summary>
            Defines a set of methods to automatically handle <see cref="T:Xpandables.Net.Commands.IAsyncCommand"/>, <see cref="T:Xpandables.Net.Queries.IQuery`1"/> and <see cref="T:Xpandables.Net.Queries.IAsyncQuery`1"/>
            when targeting <see cref="T:Xpandables.Net.Queries.IAsyncQueryHandler`2"/>, <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> or/and <see cref="T:Xpandables.Net.Commands.IAsyncCommandHandler`1"/>.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Dispatchers.IDispatcher.DispatcherHandlerProvider">
            <summary>
            Gets the handlers service provider.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.InvokeAsync``1(Xpandables.Net.Queries.IAsyncQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes the query handler (<see cref="T:Xpandables.Net.Queries.IAsyncQueryHandler`2"/> implementation) on the specified query and returns an asynchronous enumerable of <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The handler is unable to handle the <paramref name="query"/>.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.InvokeQueryAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes the query handler (<see cref="T:Xpandables.Net.Queries.IAsyncQueryHandler`2"/> implementation) on the specified query and returns an asynchronous enumerable of <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The handler is unable to handle the <paramref name="query"/>.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.InvokeAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes the command handler (<see cref="T:Xpandables.Net.Commands.IAsyncCommandHandler`1"/> implementation) on the specified command.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
            <param name="command">The command to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The handler is unable to handle the <paramref name="command"/>.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.InvokeAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes the query handler(<see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> implementation) on the specified query
            and returns a result of <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The handler is unable to handle the <paramref name="query"/>.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcher.InvokeAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously invokes the query handler(<see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> implementation) on the specified query
            and returns a result of <typeparamref name="TResult"/> type.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The handler is unable to handle the <paramref name="query"/>.</exception>
            <exception cref="T:System.NotImplementedException">The corresponding handler is missing.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Dispatchers.IDispatcherHandlerProvider">
            <summary>
            Defines set of methods to retrieve handlers of specific type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcherHandlerProvider.GetHandler``1">
            <summary>
            Gets the handler of the <typeparamref name="THandler"/> type.
            </summary>
            <typeparam name="THandler">The type of the handler to look for.</typeparam>
            <returns>A handler of the <typeparamref name="THandler"/> type -or- null if there is no <typeparamref name="THandler"/> type.</returns>
        </member>
        <member name="M:Xpandables.Net.Dispatchers.IDispatcherHandlerProvider.GetHandler(System.Type)">
            <summary>
            Gets the handler of the specified type.
            </summary>
            <param name="handlerType">An object that specifies the type of handler object to get.</param>
            <returns>A handler of the <paramref name="handlerType"/> -or- null if there is no handler of <paramref name="handlerType"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Disposable">
            <summary>
            The default implementation for <see cref="T:System.IDisposable"/> and <see cref="T:System.IAsyncDisposable"/> interfaces.
            Every derived class should override the <see cref="M:Xpandables.Net.Disposable.Dispose(System.Boolean)"/> or <see cref="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)"/> to match its requirement.
            This is an <see langword="abstract"/> and serializable class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Disposable.Disposed">
            <summary>
            Gets or sets a value indicating whether this instance is disposed.
            </summary>
            <value>
             <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
            <remarks>Default initialization for a <see cref="T:System.Boolean"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.Dispose">
            <summary>
            Public Implementation of Dispose according to .NET Framework Design Guidelines
            callable by consumers.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
            <remarks>
            <para>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
            and prevent finalization code for this object from executing a second time.
            </para>
            <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.DisposeAsync">
            <summary>
            Public Implementation of DisposeAsync according to .NET Framework Design Guidelines
            callable by consumers.
            Do not make this method virtual.
            A derived class should not be able to override this method.
            </summary>
            <remarks>
            <para>
            This object will be cleaned up by the Dispose method.
            Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
            and prevent finalization code for this object from executing a second time.
            </para>
            <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            When overridden in derived classes, this method get called when the instance will be disposed.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.Disposable.DisposeAsync(System.Boolean)"/> executes in two distinct scenarios.
            <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="M:Xpandables.Net.Disposable.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            When overridden in derived classes, this method get called when the instance will be disposed.
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
            <see langword="false"/> to release only unmanaged resources.
            </param>
            <remarks>
            <list type="bulle ted">
            <see cref="M:Xpandables.Net.Disposable.Dispose(System.Boolean)"/> executes in two distinct scenarios.
            <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
            <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
            by the runtime from inside the finalizer and you should not reference other objects.
            Only unmanaged resources can be disposed.</item></list>
            </remarks>
        </member>
        <member name="T:Xpandables.Net.Entity">
            <summary>
            The domain object base implementation that provides an identifier and a key generator for derived class.
            This is an <see langword="abstract"/>class.
            <para>You have to decorate the <see cref="P:Xpandables.Net.Entity.Id"/> property with key attributes or use another one.</para>
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.#ctor">
            <summary>
            Initializes the Id key.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.Id">
            <summary>
            Gets the domain object identity.
            The value comes from <see cref="M:Xpandables.Net.Entity.KeyGenerator"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.IsNew">
            <summary>
            Determines whether or not the underlying instance is new.
            The default implementation just compare the <see cref="P:Xpandables.Net.Entity.Id"/> value to its default one.
            You must override this property in order to match your request.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.IsDeleted">
            <summary>
            Gets a value indicating whether or not the underlying instance is marked as deleted.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.IsActive">
            <summary>
            Gets a value indicating whether or not the underlying instance is marked as active.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.CreatedOn">
            <summary>
            Gets the creation date of the underlying instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.UpdatedOn">
            <summary>
            Gets the last update date of the underlying instance if exist.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Entity.DeletedOn">
            <summary>
            Gets the deleted date of the underlying instance if exist.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.Deactivate">
            <summary>
            Deactivates the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.Delete">
            <summary>
            Deletes the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.Activate">
            <summary>
            Activates the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Entity.SetCreationDate(System.DateTime)">
            <summary>
            Sets the creation date time for underlying instance.
            </summary>
            <param name="dateTime">the creation date.</param>
        </member>
        <member name="M:Xpandables.Net.Entity.SetUpdateDate(System.DateTime)">
            <summary>
            Sets the last update date time for underlying instance.
            </summary>
            <param name="dateTime">the last updated date.</param>
        </member>
        <member name="M:Xpandables.Net.Entity.SetDeleteDate(System.DateTime)">
            <summary>
            Sets the deletion date time for underlying instance.
            </summary>
            <param name="dateTime">the deletion date.</param>
        </member>
        <member name="M:Xpandables.Net.Entity.KeyGenerator">
            <summary>
            Returns the unique signature of string type for an instance.
            This signature value will be used as identifier for the underlying instance.
            <para>When overridden in the derived class, it will set or get the concrete identity for the domain object.</para>
            </summary>
            <returns>A string value as identifier.</returns>
        </member>
        <member name="M:Xpandables.Net.Entity.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Entity.op_Equality(Xpandables.Net.Entity,Xpandables.Net.Entity)">
            <summary>
            Applies equal operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Entity.op_Inequality(Xpandables.Net.Entity,Xpandables.Net.Entity)">
            <summary>
            Applies non equal operator.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Entity.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current entity.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.AsyncCommandPersistenceDecorator`1">
            <summary>
            This class allows the application author to add persistence support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.EntityFramework.IPersistenceDecorator"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and executes the
            the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> after the main one in the same control flow only
            if there is no exception. You can set the <see cref="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler"/> with the
            <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> command, in order to manage
            the exception.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.AsyncCommandPersistenceDecorator`1.#ctor(Xpandables.Net.EntityFramework.IDataContext,Xpandables.Net.Commands.IAsyncCommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.AsyncCommandPersistenceDecorator`1"/> class.
            </summary>
            <param name="dataContext">The data context to act on.</param>
            <param name="decoratee">The decorated command handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.AsyncCommandPersistenceDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.DataContext`1">
            <summary>
            This is the generic db context class that implements <see cref="T:Xpandables.Net.EntityFramework.IDataContext`1"/>.
            </summary>
            <typeparam name="TEntity">The Domain object type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.DataContext`1.#ctor(Xpandables.Net.EntityFramework.IDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.EntityFramework.DataContext`1"/> class
            using the original data context.
            </summary>
            <param name="dataContext">The original data context.</param>
            <exception cref="T:System.ArgumentNullException">the <paramref name="dataContext"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContext">
            <summary>
            Allows an application author to manage domain objects using EntityFrameworkCore.
            When argument is null, an <see cref="T:System.ArgumentNullException"/> will be thrown.
            When a value is not found, a default value of the expected type should be returned.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.FindAsync``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns an entity of the <typeparamref name="T"/> type specified by the selector.
            If not found, returns the <see langword="default"/> value of the type.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents an object of <typeparamref name="T"/> type or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.FindAsync``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Threading.CancellationToken)">
            <summary>
            Returns an anonymous type of <typeparamref name="TResult"/> specified by the selector.
            If not found, returns the <see langword="default"/> value of the type.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TResult">Anonymous type to be returned.</typeparam>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents an object of <typeparamref name="TResult"/> type or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.FindAllAsync``1(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns an asynchronous enumerable of <typeparamref name="T"/> entities specified by the selector.
            If no result found, returns an empty enumerable.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A collection of <typeparamref name="T"/> that can be asynchronously enumerated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.FindAllAsync``2(System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``1}},System.Threading.CancellationToken)">
            <summary>
            Returns an asynchronous enumerable of <typeparamref name="TResult"/> anonymous type specified by the selector.
            If no result found, returns an empty enumerable.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TResult">Anonymous type to be returned.</typeparam>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A collection of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.AddEntityRangeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Adds a collection of domain objects to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entities">The domain objects collection to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.AddEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Adds a domain object to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="entity">The domain object to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entity"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.DeleteEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Deletes the domain object matching the specified entity that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/>
            is called.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="deletedEntity">The entity to be deleted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="deletedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.DeleteEntityAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes the domain objects matching the predicate that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/>
            is called. You can use a third party library for performance.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Updates the domain object matching the specify entity.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <param name="updatedEntity">the updated entity.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityRangeAsync``2(System.Collections.Generic.IEnumerable{``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the collection of entities.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="updatedEntities">Contains the collection of updated values.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntities"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.UpdateEntityAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the predicate by using the updater.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="T">The Domain object type.</typeparam>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="updater">The delegate to be used for updating domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updater"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)">
            <summary>
            Persists all pending domain objects to the data storage.
            You can use the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> to manage exception.
            </summary>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous persist all operation.</returns>
            <exception cref="T:System.InvalidOperationException">All exceptions related to the operation.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
        </member>
        <member name="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler">
            <summary>
            May contain a delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null exception.
            If there's not delegate, the handled exception will be re-thrown normally.
            </summary>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})">
            <summary>
            Allows the application author to set or unset the delegate that get called on persistence exception.
            If you want the exception to be re-thrown, the delegate should return an exception, otherwise null.
            To disable the delegate, just set the handler to <see langword="null"/>.
            </summary>
            <param name="persistenceExceptionHandler">The optional delegate instance.</param>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IDataContext`1">
            <summary>
            Allows an application author to manage a specific-type domain objects using EntityFrameworkCore.
            This interface inherits from <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/>.
            When argument is null, an <see cref="T:System.ArgumentNullException"/> will be thrown.
            When a value is not found, a default value of the expected type should be returned.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TEntity">The Domain object type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.FindAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Returns an entity of the <typeparamref name="TEntity"/> type specified by the selector.
            If not found, returns the <see langword="default"/> value of the type.
            </summary>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents an object of <typeparamref name="TEntity"/> type or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.FindAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns an anonymous type of <typeparamref name="TResult"/> specified by the selector.
            If not found, returns the <see langword="default"/> value of the type.
            </summary>
            <typeparam name="TResult">Anonymous type to be returned.</typeparam>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents an object of <typeparamref name="TResult"/> type or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.FindAllAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Returns an asynchronous enumerable of <typeparamref name="TEntity"/> entities specified by the selector.
            If no result found, returns an empty enumerable.
            </summary>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A collection of <typeparamref name="TEntity"/> that can be asynchronously enumerated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.FindAllAsync``1(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{``0}},System.Threading.CancellationToken)">
            <summary>
            Returns an asynchronous enumerable of <typeparamref name="TResult"/> anonymous type specified by the selector.
            If no result found, returns an empty enumerable.
            </summary>
            <typeparam name="TResult">Anonymous type to be returned.</typeparam>
            <param name="selector">Expression used for selecting entities.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A collection of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.AddEntityRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Adds a collection of domain objects to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="entities">The domain objects collection to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entities"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.AddEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a domain object to the data storage that will be inserted
            into the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> is called.
            </summary>
            <param name="entity">The domain object to be added and persisted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="entity"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.DeleteEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Deletes the domain object matching the specified entity that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/>
            is called.
            </summary>
            <param name="deletedEntity">The entity to be deleted.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="deletedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.DeleteEntityAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Deletes the domain objects matching the predicate that will be removed from the database when <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/>
            is called. You can use a third party library for performance.
            </summary>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.UpdateEntityAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Updates the domain object matching the specify entity.
            </summary>
            <param name="updatedEntity">the updated entity.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntity"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.UpdateEntityRangeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the collection of entities.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="updatedEntities">Contains the collection of updated values.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updatedEntities"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.IDataContext`1.UpdateEntityAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`0,``0},System.Threading.CancellationToken)">
            <summary>
            Updates the domain objects matching the predicate by using the updater.
            Only the columns corresponding to properties you set in the object will be updated -- any properties
            you don't set will be left alone. If you have property you want to set to its default,
            then you must explicitly set that property's value.
            </summary>
            <typeparam name="TUpdated">Type of the object that contains updated values.</typeparam>
            <param name="predicate">The predicate to be used to filter domain objects.</param>
            <param name="updater">The delegate to be used for updating domain objects.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="updater"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.IPersistenceDecorator">
            <summary>
            A marker interface that allows the command handler class implementation to use persistence data across the control flow.
            The behavior makes use of an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> in the handler class implementation
            to persist data at the end of the control flow only if there is no exception.
            In order to control the behavior, you can add the <see cref="T:Xpandables.Net.Correlation.ICorrelationDecorator"/> to the command/query class and reference
            the <see cref="T:Xpandables.Net.Correlation.IAsyncCorrelationContext"/> in the handler class implementation, to defines actions to be applied after the control flow with
            <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.PostEvent"/> on success and <see cref="E:Xpandables.Net.Correlation.IAsyncCorrelationContext.RollbackEvent"/> on exception.
            </summary>
        </member>
        <member name="T:Xpandables.Net.EntityFramework.QueryPersistenceDecorator`2">
            <summary>
            This class allows the application author to add persistence support to query control flow.
            The target command should implement the <see cref="T:Xpandables.Net.EntityFramework.IPersistenceDecorator"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.EntityFramework.IDataContext"/> and executes the
            the <see cref="M:Xpandables.Net.EntityFramework.IDataContext.PersistAsync(System.Threading.CancellationToken)"/> after the main one in the same control flow only
            if there is no exception. You can set the <see cref="P:Xpandables.Net.EntityFramework.IDataContext.PersistenceExceptionHandler"/> with the
            <see cref="M:Xpandables.Net.EntityFramework.IDataContext.OnPersistenceException(System.Func{System.Exception,System.Exception})"/> command, in order to manage
            the exception.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.QueryPersistenceDecorator`2.#ctor(Xpandables.Net.EntityFramework.IDataContext,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.EntityFramework.QueryPersistenceDecorator`2"/> class.
            </summary>
            <param name="dataContext">The data context to act on.</param>
            <param name="decoratee">The decorated query handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dataContext"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.EntityFramework.QueryPersistenceDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Enumerables.EnumerableExtensions">
            <summary>
            Provides with extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates the collection source and performs the specified action on each element.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="action">Action to invoke for each element.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously enumerates the collection source and performs the specified action on each element.
            </summary>
            <typeparam name="TSource">Type of the element in the sequence.</typeparam>
            <param name="source">The source of the sequence.</param>
            <param name="action">Action to invoke for each element.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="action"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.ToReadOnlyCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a read only collection.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">An instance of the collection to be converted.</param>
            <returns>A new <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of the specified sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <returns>The first element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.FirstOrEmptyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of the specified sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>The first element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.FirstOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <returns>The first element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.FirstOrEmptyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the first element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>The first element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.LastOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last elements of a sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <returns>The last element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.LastOrEmptyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Returns the last elements of a sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>The last element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.LastOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of the sequence that satisfies the predicate or an empty optional if no such element is found.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>
            <returns>The last element that satisfies the predicate or an empty optional.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.LastOrEmptyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the last elements of a sequence or an empty optional if the sequence contains no elements.
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="predicate">A function to test each element to a condition.</param>/// 
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>The last element from the sequence or an empty result if the sequence contains no elements.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.ElementAtOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at the specified index in a sequence or an empty optional if the index is out of range
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerables.EnumerableExtensions.ElementAtOrEmptyAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Returns the element at the specified index in a sequence or an empty optional if the index is out of range
            </summary>
            <typeparam name="TSource">The type of the element in the sequence.</typeparam>
            <param name="source">the source of the sequence.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Enumerations.EnumerationType">
            <summary>
            Helper class used to implement enumeration. You can use the <see cref="T:Xpandables.Net.Enumerations.EnumerationTypeConverter"/> for conversion.
            This is an <see langword="abstract"/> and serializable class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Enumerations.EnumerationType.Value">
            <summary>
            Gets the value of the enumeration.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Enumerations.EnumerationType.DisplayName">
            <summary>
            Gets the name of the enumeration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetAll``1">
            <summary>
            Gets the list of all enumeration found in the current instance.
            If you want to return all enumerations from base classes, use the non-generic method.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <returns>List of enumerations.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetAll(System.Type)">
            <summary>
            Gets the list of all enumeration found in the instance of the specified type and base classes.
            The type must derived from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            </summary>
            <param name="enumerationType">Type of enumeration.</param>
            <returns>List of enumerations.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerationType"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="enumerationType"/> must derive from <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/>.
            </exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromDisplayName``1(System.String)">
            <summary>
            Gets the enumeration matching the specified display name.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <param name="displayName">The display name to find.</param>
            <returns>An instance of <typeparamref name="TEnumeration"/> type or default value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromDisplayName(System.Type,System.String)">
            <summary>
            Gets the enumeration matching the specified type and display name.
            </summary>
            <param name="enumerationType">Type of derived class enumeration.</param>
            <param name="displayName">The display name to find.</param>
            <returns>An instance of <paramref name="enumerationType"/> type or default value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="enumerationType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromValue``1(System.Int32)">
            <summary>
            Gets the enumeration matching the specified value.
            </summary>
            <typeparam name="TEnumeration">Type of derived class enumeration.</typeparam>
            <param name="value">Value to find.</param>
            <returns>An instance of <typeparamref name="TEnumeration"/> type or default value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.TryParse``1(System.String,``0@)">
            <summary>
            Converts the string representation of a enumeration to its <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> equivalent. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnumeration">The target enumeration type to convert to.</typeparam>
            <param name="displayName">A string containing a enumeration to convert.</param>
            <param name="enumeration">When this method returns, contains the <typeparamref name="TEnumeration"/> value equivalent
            of the string contained in <paramref name="displayName"/>, if the conversion succeeded.</param>
            <returns><see langword="true"/> if <paramref name="displayName"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.TryParse``1(System.Int32,``0@)">
            <summary>
            Converts the integer representation of a enumeration to its <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> equivalent. 
            A return value indicates whether the conversion succeeded.
            </summary>
            <typeparam name="TEnumeration">The target enumeration type to convert to.</typeparam>
            <param name="value">An integer of an enumeration to convert.</param>
            <param name="enumeration">When this method returns, contains the <typeparamref name="TEnumeration"/> value equivalent
            of the integer contained in <paramref name="value"/>, if the conversion succeeded.</param>
            <returns><see langword="true"/> if <paramref name="value"/> was converted successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.FromValue(System.Type,System.Int32)">
            <summary>
            Gets the enumeration matching the specified type and value.
            </summary>
            <param name="enumerationType">Type of derived class enumeration.</param>
            <param name="value">Value to find.</param>
            <returns>An instance of <paramref name="enumerationType"/> type or default value.</returns>
            <exception cref="T:System.InvalidOperationException">The <paramref name="value"/> does not exist.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.AbsoluteDifference(Xpandables.Net.Enumerations.EnumerationType,Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the absolute difference of both enumerations.
            </summary>
            <param name="first">The first instance to act on.</param>
            <param name="second">The second instance to act on.</param>
            <returns>An integer that represents an absolute comparison value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="first"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="second"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetDescriptionAttributeValue">
            <summary>
            Returns the description string attribute of the current enumeration.
            if not found, returns the enumeration as string.
            </summary>
            <returns>The description string. If not found, returns the enumeration as string.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.CompareTo(Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="other">The other object for comparison.</param>
            <returns>An integer value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="other"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.Equals(Xpandables.Net.Enumerations.EnumerationType)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="other">The other object for comparison..</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.GetHashCode">
            <summary>
            Returns the hash-code of the current type.
            </summary>
            <returns>hash-code.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.Equals(System.Object)">
            <summary>
            Returns the comparison value of both <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects.
            </summary>
            <param name="obj">The other object for comparison.</param>
            <returns>A boolean value.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationType.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> value matching the <see cref="P:Xpandables.Net.Enumerations.EnumerationType.DisplayName"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Enumerations.EnumerationTypeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> objects to and from <see cref="T:System.String"/> and value type representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:System.ComponentModel.EnumConverter"></see> class for the given type.</summary>
            <param name="type">A <see cref="T:System.Type"></see> that represents the type of enumeration to associate
            with this enumeration converter.</param>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object in the given source type
            to an enumeration object using the specified context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified value object to an enumeration object.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.Enumerations.EnumerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given value object to the specified destination type.</summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpandableQuery`1">
            <summary>
            An IQueryable wrapper that allows us to visit the query's expression tree just before LINQ to SQL gets to it.
            This is based on the excellent work of Tomas Petricek: http://tomasp.net/blog/linq-expand.aspx
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionComparer">
            <summary>
            Compare two expressions to determine if they are equivalent
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionExpander">
            <summary>
            Custom expression visitor for ExpandableQuery. This expands calls to Expression.Compile() and
            collapses captured lambda references in sub-queries which LINQ to SQL can't otherwise handle.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionExpander.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Flatten calls to Invoke so that Entity Framework can understand it. Calls to Invoke are generated
            by PredicateBuilder.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionExtensions">
            <summary>Refer to http://www.albahari.com/nutshell/linqkit.html and
            http://tomasp.net/blog/linq-expand.aspx for more information.</summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionHelpers">
            <summary>
            Provides with extension methods for <see cref="T:System.Linq.Expressions.Expression"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionHelpers.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="TSource">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.ExpressionHelpers.CreateAccessorFor``2(System.String)">
            <summary>
            Returns a property or field access-or expression for the specified name that matches a property or a field in the model.
            </summary>
            <typeparam name="TSource">The type of the model class.</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyOrFieldName">The name of the property or field.</param>
            <returns>An expression tree.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyOrFieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException">No property or field named propertyOrFieldName is
            defined in expression.Type or its base types.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.ExpressionVisitor">
            <summary>
            This comes from Matt Warren's sample:
            http://blogs.msdn.com/mattwar/archive/2007/07/31/linq-building-an-iqueryable-provider-part-ii.aspx
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.IQueryExpression`1">
            <summary>
            Defines a methods that returns an <see cref="T:System.Linq.Expressions.Expression`1"/> that can be used to query
            the <typeparamref name="TSource"/> instance.
            This can significantly improve the use of the command/query pattern, allowing class conversion to an expression tree.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Expressions.IQueryExpression`2">
            <summary>
            Defines a methods that returns an <see cref="T:System.Linq.Expressions.Expression`1"/> that can be used to query
            the <typeparamref name="TSource"/> instance.
            This can significantly improve the use of the command/query pattern, allowing class conversion to an expression tree.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.IQueryExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.Linq">
            <summary>
            Another good idea by Tomas Petricek.
            See http://tomasp.net/blog/dynamic-linq-queries.aspx for information on how it's used.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.Linq.Expr``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Returns the given anonymous method as a lambda expression
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.Linq.Func``2(System.Func{``0,``1})">
            <summary>
            Returns the given anonymous function as a Func delegate
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="T:Xpandables.Net.Expressions.PredicateBuilder">
            <summary>
            See http://www.albahari.com/expressions for information and examples.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.PredicateBuilder.True``1">
            <summary>
            Returns a <see langword="true"/> predicate.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <returns>A true lambda expression.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.PredicateBuilder.False``1">
            <summary>
            Returns a <see langword="false"/> predicate.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <returns>A false lambda expression.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.PredicateBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns "Or" combination of two expression.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <param name="left">The first expression to act on.</param>
            <param name="right">The second expression to act on.</param>
            <returns>A lambda expression which "Or" combination of the two expressions.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.PredicateBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns "And" combination of two expression.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <param name="left">The first expression to act on.</param>
            <param name="right">The second expression to act on.</param>
            <returns>A lambda expression which "And" combination of the two expressions.</returns>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpression`2">
            <summary>
            The base class to define a class expression.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.GetHashCode">
            <summary>
            Returns the unique hash code for the current instance.
            </summary>
            <returns><see cref="T:System.Int32"/> value.</returns>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`2.Equals(System.Object)">
            <summary>
            Determines whether the current instance equals the specified one.
            </summary>
            <param name="obj">The object to be compared to.</param>
            <returns><see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpression`1">
            <summary>
            This class is a helper that provides a default implementation for <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> with <see cref="T:System.Boolean"/> as result.
            </summary>
            <typeparam name="TSource">The data source type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpression`1.GetExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionAnd`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "And" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionAnd`2"/> class with the query expressions for composition.
            </summary>
            <param name="left">The query expression for the left side.</param>
            <param name="right">The query expression for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionAnd`2"/> class with the expressions for composition.
            </summary>
            <param name="left">The query expression  for the left side.</param>
            <param name="rightExpression">The expression for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rightExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionAnd`2.GetExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionBuilder`2">
            <summary>
            Provides the generic class to build <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> instance.
            </summary>
            <typeparam name="TSource">the target instance type.</typeparam>
            <typeparam name="TResult">The property type to be used for result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionBuilder`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Returns  new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionBuilder`2"/> class with the specified expression.
            </summary>
            <param name="expression">The expression to be used by the instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> can not be null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionBuilder`2.GetExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionFactory">
            <summary>
            Provides the query expression factory that contains methods to create generic query expressions.
            </summary>   
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory.Create``1">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> with <see cref="T:System.Boolean"/> result that return <see langword="true"/>.
            </summary>
            <typeparam name="TSource">The data type source.</typeparam>
            <returns>an new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> with boolean result.</returns>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionFactory`1">
            <summary>
            Provides the query expression factory that contains methods to create generic query expressions.
            </summary>
            <typeparam name="TResult">The result type.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Create``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Creates a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> with the specified expression.
            </summary>
            <typeparam name="TSource">The data type source.</typeparam>
            <param name="expression">The expression to be used by the instance.</param>
            <returns>an new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.And``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the And form of two expressions.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="left">The expression value  for left side.</param>
            <param name="right">The expression value for right side.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Or``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the Or form of two expressions.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="left">The expression value  for left side.</param>
            <param name="right">The expression value for right side.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionFactory`1.Not``1(System.Linq.Expressions.Expression{System.Func{``0,`0}})">
            <summary>
            Returns the <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the Not form of an expression.
            </summary>
            <typeparam name="TSource">The type of the expression parameter.</typeparam>
            <param name="expression">The expression value.</param>
            <returns><see cref="T:System.Linq.Expressions.Expression`1"/> result</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/>is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionHelpers">
            <summary>
            Provides extensions methods for <see cref="T:Xpandables.Net.Expressions.IQueryExpression`2"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.And``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the AND operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.And``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the AND operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Or``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the OR operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Or``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the OR operator to both query expressions and returns a new one.
            </summary>
            <param name="left">The expression left side.</param>
            <param name="right">The expression right side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Not``2(Xpandables.Net.Expressions.IQueryExpression{``0,``1})">
            <summary>
            Applies the NOT operator to the query expression and returns a new one.
            </summary>
            <param name="queryExpression">The expression left side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionHelpers.Not``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Applies the NOT operator to the query expression and returns a new one.
            </summary>
            <param name="queryExpression">The expression left side.</param>
            <returns><see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> object</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionNot`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "Not" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionNot`2"/> class with the query expression.
            </summary>
            <param name="expression">The query expression  for the left side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="expression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionNot`2"/> class with the expression.
            </summary>
            <param name="leftExpression">The query expression  for the left side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="leftExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionNot`2.GetExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Expressions.QueryExpressionOr`2">
            <summary>
            Provides the <see cref="T:Xpandables.Net.Expressions.QueryExpression`2"/> "Or" profile.
            </summary>
            <typeparam name="TSource">The data type to apply expression to.</typeparam>
            <typeparam name="TResult">The type of the result of expression.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},Xpandables.Net.Expressions.IQueryExpression{`0,`1})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionOr`2"/> class with the query expressions for composition.
            </summary>
            <param name="left">The query expression for the left side.</param>
            <param name="right">The query expression for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="right"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.#ctor(Xpandables.Net.Expressions.IQueryExpression{`0,`1},System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Expressions.QueryExpressionOr`2"/> class with the expressions for composition.
            </summary>
            <param name="left">The query expression for the left side.</param>
            <param name="rightExpression">The expression for the right side.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="left"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rightExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Expressions.QueryExpressionOr`2.GetExpression">
            <summary>
            Returns the expression to be used for the clause <see langword="Where"/> in a query.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute">
            <summary>
            Describes the parameters for a request used with <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/>.
            The attribute should decorate implementations of <see cref="T:Xpandables.Net.Queries.IAsyncQuery`1"/> or <see cref="T:Xpandables.Net.Commands.IAsyncCommand"/>
            in order to be used with <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/>.
            Your class can implement the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> to dynamically return a <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.#ctor">
            <summary>
            Initializes the default instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Path">
            <summary>
            Gets or sets the Uri path.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.In">
            <summary>
            Gets or sets the location of data.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Body"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.HeaderCookieName">
            <summary>
            Gets or sets the header / cookie name for <see cref="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.In"/> = <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Cookie"/> or <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Header"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Method">
            <summary>
            Gets or sets the method name.
            The default value is <see langword="HttpMethod.Post.Method"/>
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.DataFormat">
            <summary>
            Gets or sets the format of the data.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.DataFormat.Json"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.BodyFormat">
            <summary>
            Gets or sets the body format for data.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.String"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.ContentType">
            <summary>
            Gets or sets the content type.
            The default value is <see cref="F:Xpandables.Net.HttpRestClient.ContentType.Json"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Accept">
            <summary>
            Gets or sets the accept content.
            The default value is 'application/json'.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.IsSecured">
            <summary>
            Gets the value indicating whether or not the request needs authorization.
            The default value is <see langword="true"/>.
            In this case, an <see cref="T:System.Net.Http.Headers.AuthenticationHeaderValue"/> with the <see cref="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Scheme"/> value will be initialized and filled
            using one of the <see langword="ConfigureXPrimaryAuthorizationTokenHandler(IHttpClientBuilder)"/> methods extension.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.IsNullable">
            <summary>
            Gets the value indicating whether or not the query/command should be added to the request content.
            If <see langword="true"/> the query/command will not be added.
            The default value is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Scheme">
            <summary>
            Gets or sets the authorization scheme.
            The default value is "Bearer".
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientAttribute.Uri">
            <summary>
            Gets or sets the built in Uri.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.ParameterLocation">
            <summary>
            The location of the parameter, can be combined.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ParameterLocation.Query">
            <summary>
            Parameters that are appended to the URL. You must implement <see cref="T:Xpandables.Net.HttpRestClient.IQueryStringLocationRequest"/> to provide with content.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ParameterLocation.Header">
            <summary>
            Custom headers that are expected as part of the request. You must implement <see cref="T:Xpandables.Net.HttpRestClient.IHeaderLocationRequest"/> to provide with content.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ParameterLocation.Path">
            <summary>
            Used together with Path Templating, where the parameter value is actually part of the operation's URL. You must implement <see cref="T:Xpandables.Net.HttpRestClient.IPathStringLocationRequest"/> to provide with content.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ParameterLocation.Cookie">
            <summary>
            Used to pass a specific cookie value to the API. You must <see cref="T:Xpandables.Net.HttpRestClient.ICookieLocationRequest"/> to provide with content.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ParameterLocation.Body">
            <summary>
            Used in the content of the request.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.BodyFormat">
            <summary>
            Determines the body format of the request.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.String">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.StringContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IStringRequest"/>, otherwise the hole class will be serialized.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.ByteArray">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.ByteArrayContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IByteArrayRequest"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.Multipart">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.MultipartFormDataContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IMultipartRequest"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.Stream">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.StreamContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IStreamRequest"/>.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.BodyFormat.FormUrlEncoded">
            <summary>
            Body content matching the <see cref="T:System.Net.Http.FormUrlEncodedContent"/>.
            The target class should implement <see cref="T:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.ContentType">
            <summary>
            Provides with the content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Json">
            <summary>
            Returns the application json content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Xml">
            <summary>
            Returns the application XML content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Pdf">
            <summary>
            Returns the application pdf content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Jpeg">
            <summary>
            Returns the image jpeg content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Png">
            <summary>
            Returns the image png content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Multipart">
            <summary>
            Returns the multi part form data content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.Text">
            <summary>
            Returns the text plain content type.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.FromDataFormat">
            <summary>
            Collections of content type from data format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.JsonAccept">
            <summary>
            Returns the json accept header.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.ContentType.XmlAccept">
            <summary>
            Returns the XML accept header.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.DataFormat">
            <summary>
            Determines the format of the target data.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Json">
            <summary>
            Uses for the JSON format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Xml">
            <summary>
            uses for XML format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Pdf">
            <summary>
            uses for Pdf format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Jpeg">
            <summary>
            uses for Jpeg format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Png">
            <summary>
            uses for Png format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Text">
            <summary>
            uses for Text format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.Multipart">
            <summary>
            uses for Multi part format.
            </summary>
        </member>
        <member name="F:Xpandables.Net.HttpRestClient.DataFormat.None">
            <summary>
            No specified format.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientAttributeDescriptionProvider`1">
            <summary>
            A generic custom type descriptor that returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1"/>
            for the specified type request.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeDescriptionProvider`1.#ctor(System.ComponentModel.TypeDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> class using a parent type description provider.
            </summary>
            <param name="parent">The parent type description provider.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeDescriptionProvider`1.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">The type of object for which to retrieve the type descriptor.</param>
            <param name="instance">An instance of the type. Can be <see langword="null" /> if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
            <returns>An <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> that can provide meta-data for the type.</returns>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1">
            <summary>
            A custom descriptor which attaches a <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> to an instance of a request type
            which implements <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/>
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> class using a parent custom type descriptor.
            </summary>
            <param name="parent">The parent custom type descriptor.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientAttributeTypeDescriptor`1.GetAttributes">
            <summary>
            Returns a collection of custom attributes for the type represented by this type descriptor.
            </summary>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection" /> containing the attributes for the type. The default is <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientException">
            <summary>
            Represents an HTTP Rest API exception.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientException.#ctor">
            <summary>
            Initializes the default instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientException"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException"> The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientHandler">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/> interface.
            You must derive from this class in order to customize its behaviors.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientHandler.HttpClient">
            <summary>
            Gets the <see cref="T:System.Net.Http.HttpClient"/> current instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.#ctor(System.Net.Http.HttpClient,Xpandables.Net.HttpRestClient.IHttpRestClientEngine)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientHandler"/> class with the HTTP typed client.
            </summary>
            <param name="httpClient">The HTTP client type to be used.</param>
            <param name="httpRestClientEngine">The HTTP rest client engine.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpClient"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpRestClientEngine"/> is null.</exception>/// 
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.HandleAsync``1(Xpandables.Net.Queries.IAsyncQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            Make use of <see langword="using"/> key work when call.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.HandleAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            Make use of <see langword="using"/> key work when call.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.HandleAsync(Xpandables.Net.Commands.IAsyncCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the command as asynchronous operation.
            </summary>
            <param name="command">The command to act with. The command must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.HandleAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the HTTP client instance.
            </summary>
            <param name="disposing">Determine whether the dispose has already been called.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse">
            <summary>
            Represents an HTTP Rest client response. Implements <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Success(System.Net.HttpStatusCode)">
            <summary>
            Returns a success HTTP status response.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Failure(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Returns a failure HTTP status response.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Failure(System.Net.HttpStatusCode)">
            <summary>
            Returns a failure HTTP status response.
            </summary>
            <param name="statusCode">The status code of the response.</param>        
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with the status code.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.#ctor(Xpandables.Net.HttpRestClient.HttpRestClientException,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.#ctor(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Exception">
            <summary>
            Gets the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientException"/> that holds the handled exception.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Version">
            <summary>
            Gets the HTTP response version.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.ReasonPhrase">
            <summary>
            Gets  the reason phrase which typically is sent by servers together with the status code.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.Headers">
            <summary>
            Gets all headers of the HTTP response.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse.StatusCode">
            <summary>
            Gets the response status code.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.IsValid">
            <summary>
            Determines whether or not the response status is valid.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.AddReasonPhrase(System.String)">
            <summary>
            Adds the reason phrase.
            </summary>
            <param name="reason">the reason phrase to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.AddHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the response headers.
            </summary>
            <param name="headers">the headers to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse.AddVersion(System.Version)">
            <summary>
            Adds the version.
            </summary>
            <param name="version">the version to be used.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1">
            <summary>
             Represents an HTTP Rest client response of a specific type result. Implements <see cref="T:System.IDisposable"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Convert(Xpandables.Net.HttpRestClient.HttpRestClientResponse,`0)">
            <summary>
            Converts the source <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> to the generic of <typeparamref name="TResult"/> type.
            </summary>
            <param name="source">The response to act on.</param>
            <param name="result">The result content if exist.</param>
            <returns>A new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Success(`0,System.Net.HttpStatusCode)">
            <summary>
             Returns a success HTTP status response.
            </summary>
            <param name="result">The result instance.</param>
            <param name="statusCode">The status response code.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Success(System.Net.HttpStatusCode)">
            <summary>
             Returns a success HTTP status response.
            </summary>
            <param name="statusCode">The status response code.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Failure(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Returns a failure HTTP status response.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Failure(System.Net.HttpStatusCode)">
            <summary>
            Returns a failure HTTP status response.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Failure(Xpandables.Net.HttpRestClient.HttpRestClientException,System.Net.HttpStatusCode)">
            <summary>
             Returns a failure HTTP status response.
            </summary>
            <param name="exception">The handled exception.</param>
            <param name="statusCode">The status response code.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/> class with the status code.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(Xpandables.Net.HttpRestClient.HttpRestClientException,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/> class with exception and status code.
            </summary>
            <param name="exception">The handled exception of the response.</param>
            <param name="statusCode">The status code of the response.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="exception"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.#ctor(`0,System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/> class with the status code.
            </summary>
            <param name="result">The result instance.</param>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.Result">
            <summary>
            Gets the HTTP response content.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.AddReasonPhrase(System.String)">
            <summary>
            Adds the reason phrase.
            </summary>
            <param name="reason">the reason phrase to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.AddHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the response headers.
            </summary>
            <param name="headers">the headers to be used.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1.AddVersion(System.Version)">
            <summary>
            Adds the version.
            </summary>
            <param name="version">the version to be used.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation">
            <summary>
            Contains HTTP Rest API validation model result that contains member name with its list of error messages.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.Add(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the specified member name and list of error messages to the dictionary.
            </summary>
            <param name="memberName">The member name of the list to add.</param>
            <param name="errorMessages">The list of the error messages to add.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">the <paramref name="errorMessages"/> is null.</exception>
            <exception cref="T:System.ArgumentException">A member with the same name already exists in the dictionary.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.HttpRestClientValidation.Item(System.String)">
            <summary>
            Gets or sets the list of error messages associated with the specified member name.
            </summary>
            <param name="memberName">The member name of the list of error messages to get or set.</param>
            <returns>The list of messages associated with the specified member. If the specified member name is not found,
            a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and
            a set operation creates a new list of error messages with the specified member name.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and key does not exist in the collection.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> class
            that is empty, has the default initial capacity, and uses the default equality
            comparer for the member name.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.Dictionary`2"/>
            and uses the default equality comparer for the member name type.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/> whose elements are copied to the
            new <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="dictionary"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="dictionary"/> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.HttpRestClientValidation.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Collections.Generic.IEnumerable{System.String}}})">
            <summary>
            Initializes a new instance of the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and uses the default equality comparer for the member name type.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider">
            <summary>
            An interface representing an <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> to be dynamically applied on the implementing class.
            This interface takes priority over the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> declaration.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider.ReadHttpRestClientAttribute">
            <summary>
            Returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> to be applied on the current instance.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientEngine">
            <summary>
            Provides with helper methods for <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.WriteHttpRequestMessageAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Returns an <see cref="T:System.Net.Http.HttpRequestMessage"/> from the source.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="source">The source object.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A tack that represents an <see cref="T:System.Net.Http.HttpRequestMessage"/> object.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadHttpRequestMessageAsync``1(Xpandables.Net.HttpRestClient.HttpRestClientAttribute,``0,System.Threading.CancellationToken)">
            <summary>
            Returns the <see cref="T:System.Net.Http.HttpRequestMessage"/> from the attribute.
            </summary>
            <typeparam name="TSource">the type of the source.</typeparam>
            <param name="attribute">The <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> attribute.</param>
            <param name="source">The source of data.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.AddPathString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Appends the given path keys and values to the Uri.
            </summary>
            <param name="path">The base Uri.</param>
            <param name="pathString">A collection of name value path pairs to append.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="pathString"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Appends the given query keys and values to the Uri.
            </summary>
            <param name="path">The base Uri.</param>
            <param name="queryString">A collection of name value query pairs to append.</param>
            <returns>The combined result.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="path"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.WriteLocationPath``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute)">
            <summary>
            Writes location path using <see cref="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.AddPathString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="attribute">The target attribute.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.WriteLocationQuery``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute)">
            <summary>
            Writes location query using <see cref="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.AddQueryString(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="attribute">The target attribute.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.WriteLocationCookie``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute,System.Net.Http.HttpRequestMessage)">
            <summary>
            Writes location cookies.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="attribute">The target attribute.</param>
            <param name="httpRequestMessage">The target request message.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.WriteLocationHeader``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute,System.Net.Http.HttpRequestMessage)">
            <summary>
            Writes location headers.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="attribute">The target attribute.</param>
            <param name="httpRequestMessage">The target request message.</param>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadByteArrayContent``1(``0)">
            <summary>
            Returns the source as byte array content.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <returns>A byte array content.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadFormUrlEncodedContent``1(``0)">
            <summary>
            Returns the source as URL encoded content.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <returns>An URL encoded content.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadStringContent``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute)">
            <summary>
            Returns the source as string content.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="attribute">The target attribute.</param>
            <returns>A string content.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadStreamContentAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Returns the source as stream content.
            The default implementation used the <see cref="N:System.Text.Json"/> API.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>A stream content.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadMultipartContent``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute)">
            <summary>
            Returns the source as multi part content.
            The default implementation used <see cref="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadByteArrayContent``1(``0)"/> and <see cref="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadStringContent``1(``0,Xpandables.Net.HttpRestClient.HttpRestClientAttribute)"/>.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <param name="attribute">The target attribute.</param>
            <returns>A multi part content.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadHttpClientAttribute``1(``0)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> found in the source.
            </summary>
            <typeparam name="TSource">The type of source object.</typeparam>
            <param name="source">The source object instance.</param>
            <returns>A <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> attribute.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadHttpResponseHeaders(System.Net.Http.HttpResponseMessage)">
            <summary>
            Returns headers from the http response.
            </summary>
            <param name="httpResponse">The response to act on.</param>
            <returns>A collection of keys/values.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ValidateInterfaceImplementation``1(System.Object,System.Boolean)">
            <summary>
            Checks whether if the target source implements the specified interface.
            Throws an exception if interface not found and it's not optional.
            </summary>
            <typeparam name="TInterface">The type interface to find.</typeparam>
            <param name="source">The source object to act on.</param>
            <param name="implementationIsOptional">The value indicating whether or not the interface implementation is mandatory.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="source"/> must implement <typeparamref name="TInterface"/> interface.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.DeserializeJsonFromStreamAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            De-serializes a JSON string from stream.
            The default implementation used the <see cref="N:System.Text.Json"/> API.
            </summary>
            <typeparam name="TResult">The type of the deserialized object.</typeparam>
            <param name="stream">The stream to act on.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents an object of <typeparamref name="TResult"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="stream"/> does not support reading.</exception> 
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.TryDeserialize``1(System.String,``0@,System.Exception@,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Tries to deserialize the JSON string to the specified type.
            The default implementation used the <see cref="N:System.Text.Json"/> API.
            </summary>
            <typeparam name="TResult">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="result">The deserialized object from the JSON string.</param>
            <param name="exception">The exception.</param>
            <param name="options">The JSON serializer options.</param>
            <returns><see langword="true"/> if OK, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.IsHttpRestClientValidation(Xpandables.Net.HttpRestClient.HttpRestClientException,Xpandables.Net.HttpRestClient.HttpRestClientValidation@)">
            <summary>
            Determines whether the current exception message is <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>.
            </summary>
            <param name="exception">The target exception.</param>
            <param name="validationException">The <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/> if OK.</param>
            <returns><see langword="true"/> if exception message is <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientValidation"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientEngine.ReadAsyncEnumerableFromStreamAsync``1(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Returns an async-enumerable from stream used for asynchronous result.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="stream">The stream source to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler">
            <summary>
            Provides with methods to handle HTTP Rest client queries and commands using a typed client HTTP Client.
            The queries and commands should implement one of the following interfaces :
            <see cref="T:Xpandables.Net.HttpRestClient.IStringRequest"/>, <see cref="T:Xpandables.Net.HttpRestClient.IStreamRequest"/>, <see cref="T:Xpandables.Net.HttpRestClient.IByteArrayRequest"/>, <see cref="T:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest"/>,
            <see cref="T:Xpandables.Net.HttpRestClient.IMultipartRequest"/> and <see cref="T:Xpandables.Net.HttpRestClient.IQueryStringLocationRequest"/>.
            <para>You should register the handler using one of the extension methods 
            <see langword="AddHttpClient{TClient, TImplementation}(IServiceCollection)"/> and you may add 
            <see langword="HttpClientBuilderExtensions.ConfigureHttpClient(IHttpClientBuilder, Action{HttpClient})"/> or other 
            to customize the client behaviors.</para>
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HttpClient">
            <summary>
            Contains the <see cref="T:System.Net.Http.HttpContent"/> instance for the current handler.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HttpRestClientEngine">
            <summary>
            Contains the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientEngine"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HandleAsync``1(Xpandables.Net.Queries.IAsyncQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            Make use of <see langword="using"/> key work when call.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HandleAsync``2(``0,System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            Make use of <see langword="using"/> key work when call.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HandleAsync(Xpandables.Net.Commands.IAsyncCommand,System.Threading.CancellationToken)">
            <summary>
            Handles the command as asynchronous operation.
            </summary>
            <param name="command">The command to act with. The command must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHttpRestClientHandler.HandleAsync``1(Xpandables.Net.Queries.IQuery{``0},System.Threading.CancellationToken)">
            <summary>
            Handles the query as asynchronous operation.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="query">The query to act with. The query must be decorated with the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute"/> or implements the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientAttributeProvider"/> interface.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <returns>Returns a task <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientResponse`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IStringRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.String"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IStringRequest.GetStringContent">
            <summary>
            Returns the body content that will be serialized.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IByteArrayRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.ByteArray"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IByteArrayRequest.GetByteContent">
            <summary>
            Returns the body content.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IMultipartRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.Multipart"/> type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IStreamRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.Stream"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IStreamRequest.GetStreamContent">
            <summary>
            Returns the body content.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.BodyFormat.FormUrlEncoded"/> type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IFormUrlEncodedRequest.GetFormContent">
            <summary>
            Returns the body content.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.ICookieLocationRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Cookie"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.ICookieLocationRequest.GetCookieSource">
            <summary>
            Returns the keys and values for the cookie content.
            If a key is already present, its value will be replaced with the new one.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IHeaderLocationRequest">
            <summary>
            Provides with a method to retrieve the request content for <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Header"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHeaderLocationRequest.GetHeaderSource">
            <summary>
            Returns the keys and values for the header content.
            If a key is already present, its value will be replaced with the new one.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IHeaderLocationRequest.GetHeadersSource">
            <summary>
            Returns the keys and values for the header content.
            If a key is already present, its value will be replaced with the new one.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IQueryStringLocationRequest">
            <summary>
            Provides with a method to retrieve the query string content for query string Uri when using <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Query"/>.
            This can be combined with other locations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IQueryStringLocationRequest.GetQueryStringSource">
            <summary>
            Returns the keys and values for the query string Uri.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.IPathStringLocationRequest">
            <summary>
            Provides with a method to retrieve the path string content for query string Uri when using <see cref="F:Xpandables.Net.HttpRestClient.ParameterLocation.Path"/>.
            This can be combined with other locations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.IPathStringLocationRequest.GetPathStringSource">
            <summary>
            Returns the keys and values for the path string Uri.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.GeoLocation">
            <summary>
            Defines the IP Geo-location response.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Ip">
            <summary>
            Returns the requested IP address.
            </summary>        
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.HostName">
            <summary>
            Returns the host-name the requested IP resolves to, only returned if Host-name Lookup is enabled.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Type">
            <summary>
            Returns the IP address type IPv4 or IPv6.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Continent_Code">
            <summary>
            Returns the 2-letter continent code associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Continent_Name">
            <summary>
            Returns the name of the continent associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Country_Code">
            <summary>
            Returns the 2-letter country code associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Country_Name">
            <summary>
            Returns the name of the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Region_Code">
            <summary>
            Returns the region code of the region associated with the IP (e.g. CA for California).
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Region_Name">
            <summary>
            Returns the name of the region associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.City">
            <summary>
            Returns the name of the city associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Zip">
            <summary>
            Returns the ZIP code associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Latitude">
            <summary>
            Returns the latitude value associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Longitude">
            <summary>
            Returns the longitude value associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Location">
            <summary>
             Returns multiple location-related objects
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Time_Zone">
            <summary>
            Returns an object containing timezone-related data.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Currency">
            <summary>
            Returns an object containing currency-related data.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Connection">
            <summary>
            Returns an object containing connection-related data.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocation.Security">
            <summary>
            Returns an object containing security-related data.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IPLocation">
            <summary>
            The location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.GeoName_Id">
            <summary>
            Returns the unique geoname identifier in accordance with the Geonames Registry.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Capital">
            <summary>
            Returns the capital city of the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Languages">
            <summary>
            Returns an object containing one or multiple sub-objects per language spoken in the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Country_Flag">
            <summary>
            Returns an HTTP URL leading to an SVG-flag icon for the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Country_Flag_Emoji">
            <summary>
            Returns the emoji icon for the flag of the country associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Country_Flag_Emoji_Unicode">
            <summary>
            Returns the unicode value of the emoji icon for the flag of the country associated with the IP. (e.g. U+1F1F5 U+1F1F9 for the Portuguese flag)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Calling_Code">
            <summary>
            Returns the calling/dial code of the country associated with the IP. (e.g. 351) for Portugal.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLocation.Is_EU">
            <summary>
            Returns true or false depending on whether or not the county associated with the IP is in the European Union.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IPLanguage">
            <summary>
            The location language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLanguage.Code">
            <summary>
            Returns the 2-letter language code for the given language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLanguage.Name">
            <summary>
            Returns the name (in the API request's main language) of the given language. (e.g. Portuguese)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPLanguage.Native">
            <summary>
            Returns the native name of the given language. (e.g. Português)
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IPTimeZone">
            <summary>
            The time zone location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPTimeZone.Id">
            <summary>
            Returns the ID of the time zone associated with the IP. (e.g. America/Los_Angeles for PST)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPTimeZone.Current_Time">
            <summary>
            Returns the current date and time in the location associated with the IP. (e.g. 2018-03-29T22:31:27-07:00)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPTimeZone.Gmt_Offset">
            <summary>
            Returns the GMT offset of the given time zone in seconds. (e.g. -25200 for PST's -7h GMT offset)
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPTimeZone.Code">
            <summary>
            Returns the universal code of the given time zone.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPTimeZone.Is_Daylight_Saving">
            <summary>
            Returns true or false depending on whether or not the given time zone is considered daylight saving time.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IPCurrency">
            <summary>
            The currency location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPCurrency.Code">
            <summary>
            Returns the 3-letter code of the main currency associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPCurrency.Name">
            <summary>
            Returns the name of the given currency.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPCurrency.Plural">
            <summary>
            Returns the plural name of the given currency.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPCurrency.Symbol">
            <summary>
            Returns the symbol letter of the given currency.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPCurrency.Symbol_Native">
            <summary>
            Returns the native symbol letter of the given currency.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IPConnection">
            <summary>
            The connexion location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPConnection.ASN">
            <summary>
            Returns the Autonomous System Number associated with the IP.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPConnection.ISP">
            <summary>
            Returns the name of the ISP associated with the IP.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IPSecurity">
            <summary>
            The security location
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Is_Proxy">
            <summary>
            Returns true or false depending on whether or not the given IP is associated with a proxy.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Proxy_Type">
            <summary>
            Returns the type of proxy the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Is_Crawler">
            <summary>
            Returns true or false depending on whether or not the given IP is associated with a crawler.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Crawler_Name">
            <summary>
            Returns the name of the crawler the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Crawler_Type">
            <summary>
            Returns the type of crawler the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Is_Tor">
            <summary>
            Returns true or false depending on whether or not the given IP is associated with the anonymous Tor system.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Threat_Level">
            <summary>
            Returns the type of threat level the IP is associated with.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.IPSecurity.Threat_Types">
            <summary>
            Returns an object containing all threat types associated with the IP.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.GetIP">
            <summary>
            Defines the location IP request.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.GetLocation">
            <summary>
            The IPAddress Geo-location request.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.GetLocation.#ctor(System.String,System.String,System.Int32,System.Int32,Xpandables.Net.HttpRestClient.Network.GeoLocationOutput,Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.Network.GetLocation"/> class.
            </summary>
            <param name="ipAddress">The target IP address.</param>
            <param name="accessKey">The security access key.</param>
            <param name="enableSecurity">Enable the security mode = 1 for professional subscription.</param>
            <param name="enableHostName">Enable host-name = 1</param>
            <param name="output">The output format, the default is <see cref="P:Xpandables.Net.HttpRestClient.Network.GeoLocationOutput.Json"/>.</param>
            <param name="language">The output language, the default is <see cref="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.EnglishUS"/></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="ipAddress"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="accessKey"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GetLocation.IpAddress">
            <summary>
            Gets the IPAddress to search for location.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GetLocation.AccessKey">
            <summary>
            Gets the access key to be used.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GetLocation.EnableSecurity">
            <summary>
            Gets the security value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GetLocation.EnableHostName">
            <summary>
            Determine whether or not to use host-name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GetLocation.Output">
            <summary>
            Gets the request output format.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GetLocation.Language">
            <summary>
            Gets the request language.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.GetLocation.ReadHttpRestClientAttribute">
            <summary>
            Returns the <see cref="T:Xpandables.Net.HttpRestClient.HttpRestClientAttribute" /> to be applied on the current instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.GetLocation.GetQueryStringSource">
            <summary>
            Returns the keys and values for the Uri.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.GeoLocationOutput">
            <summary>
            The location output format.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.GeoLocationOutput.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.Network.GeoLocationOutput" /> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName" /> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationOutput.Xml">
            <summary>
            The XML output.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationOutput.Json">
            <summary>
            The JSON output.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage">
            <summary>
            The location language.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage" /> with the specified value and display name.
            </summary>
            <param name="displayName">The enumeration display name.</param>
            <param name="language">The language name.</param>
            <param name="value">The enumeration value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="displayName" /> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.Language">
            <summary>
            Gets the language name.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.EnglishUS">
            <summary>
            The English language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.Germain">
            <summary>
            The Germain language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.Spanish">
            <summary>
            The Spanish language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.French">
            <summary>
            The French language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.Japanese">
            <summary>
            The Japanese language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.PortugeseBrazil">
            <summary>
            The Portuguese Brazil language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.Russian">
            <summary>
            The Russian language.
            </summary>
        </member>
        <member name="P:Xpandables.Net.HttpRestClient.Network.GeoLocationLanguage.Chinese">
            <summary>
            The Chinese language.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPHandler">
            <summary>
            Default implementation for <see cref="T:Xpandables.Net.HttpRestClient.Network.IHttpRestClientIPHandler"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPHandler.#ctor(System.Net.Http.HttpClient,Xpandables.Net.HttpRestClient.IHttpRestClientEngine)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPHandler"/> class with the client to be used.
            </summary>
            <param name="httpClient">The client to be used to get the IP address.</param>
            <param name="httpRestClientEngine">The HTTP Rest client engine.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpClient"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpRestClientEngine"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPHandler.ReadIPAddressAsync">
            <summary>
            Asynchronously gets the IPAddress of the current caller using https://ipinfo.io/ip.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/> instance.
            </summary>
            <param name="disposing">Determine whether the dispose has already been called.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPMessageHandler">
            <summary>
            Provides with a handler that is used with <see cref="T:System.Net.Http.HttpClient"/> to format IpLocation result before returning response.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientIPMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The token is not available. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.HttpRestClientLocationHandler">
            <summary>
            Default implementation for <see cref="T:Xpandables.Net.HttpRestClient.Network.IHttpRestClientLocationHandler"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientLocationHandler.#ctor(System.Net.Http.HttpClient,Xpandables.Net.HttpRestClient.IHttpRestClientEngine)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.HttpRestClient.Network.HttpRestClientLocationHandler"/> class with the client to be used.
            </summary>
            <param name="httpClient">The HTTP client to be used to request Geo location.</param>
            <param name="httpRestClientEngine">The HTTP Rest client engine.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpClient"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientLocationHandler.ReadLocationAsync(Xpandables.Net.HttpRestClient.Network.GetLocation)">
            <summary>
            Asynchronously gets the IPAddress Geo-location of the specified IPAddress request using http://api.ipstack.com.
            </summary>
            <param name="request">The request to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.HttpRestClientLocationHandler.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Xpandables.Net.HttpRestClient.IHttpRestClientHandler"/> instance.
            </summary>
            <param name="disposing">Determine whether the dispose has already been called.</param>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IHttpRestClientIPHandler">
            <summary>
            Provides with a method to request IP address.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.IHttpRestClientIPHandler.ReadIPAddressAsync">
            <summary>
            Asynchronously gets the IPAddress of the current caller.
            </summary>
        </member>
        <member name="T:Xpandables.Net.HttpRestClient.Network.IHttpRestClientLocationHandler">
            <summary>
            Provides with methods to request Geo-location using a typed client HTTP Client.
            </summary>
        </member>
        <member name="M:Xpandables.Net.HttpRestClient.Network.IHttpRestClientLocationHandler.ReadLocationAsync(Xpandables.Net.HttpRestClient.Network.GetLocation)">
            <summary>
            Asynchronously gets the IPAddress Geo-location of the specified IPAddress request using http://api.ipstack.com.
            </summary>
            <param name="request">The request to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.AuthorizationHttpTokenDelegateHandler">
            <summary>
            Provides with a handler that can be used with <see cref="T:System.Net.Http.HttpClient"/> to add header authorization value
            before request execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenDelegateHandler.#ctor(Xpandables.Net.Http.IHttpTokenAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler"/> class with the token accessor.
            </summary>
            <param name="httpTokenAccessor">The token accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenDelegateHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The token is not available. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler">
            <summary>
            Provides with a handler that can be used with <see cref="T:System.Net.Http.HttpClient"/> to add header authorization value
            before request execution.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenHandler.#ctor(Xpandables.Net.Http.IHttpTokenDelegateAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.AuthorizationHttpTokenHandler"/> class with the token accessor.
            </summary>
            <param name="httpTokenAccessor">The token accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.AuthorizationHttpTokenHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Creates an instance of System.Net.Http.HttpResponseMessage based on the information
            provided in the System.Net.Http.HttpRequestMessage as an operation that will not block.
            </summary>
            <param name="request">The HTTP request message.</param>
            <param name="cancellationToken">A cancellation token to cancel the operation.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="request"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The token is not available. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessor">
            <summary>
            The default implementation for <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessor.#ctor(Xpandables.Net.Http.IHttpHeaderAccessor)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenAccessor"/> class.
            </summary>
            <param name="securedHeaderAccessor">The header accessor to act with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="securedHeaderAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessor.ReadToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessorDelegate">
            <summary>
            The delegate that is used to return the token from the specified header key.
            </summary>
            <param name="key">The key to read the token from.</param>
            <returns>A string token value if found or null.</returns>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenAccessorBuilder">
            <summary>
            A helper class used to implement the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessorBuilder.#ctor(Xpandables.Net.Http.HttpTokenAccessorDelegate)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Http.HttpTokenAccessorBuilder"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> implementation.
            </summary>
            <param name="tokenAccessor">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenAccessor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.HttpTokenAccessorBuilder.ReadToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            If not found, returns an empty value.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.HttpTokenDelegateAccessor">
            <summary>
            The default implementation for <see cref="T:Xpandables.Net.Http.IHttpTokenDelegateAccessor"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Http.HttpTokenDelegateAccessor.HttpTokenAccessorDelegate">
            <summary>
            Gets or sets the delegate use to retrieve the token value.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpFormFileEngine">
            <summary>
            Provides with methods to validate an instance of IFormFile.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileName(System.Object)">
            <summary>
            Checks that the HTTP request file name is a valid one.
            </summary>
            <param name="formFile">The sent file.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileExtension(System.Object,System.String[])">
            <summary>
            Checks that the HTTP request file extension matches one of the specified extensions.
            </summary>
            <param name="formFile">The sent file.</param>
            <param name="extensions">The extensions to compare to.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileSize(System.Object,System.Int32)">
            <summary>
            Checks that the HTTP request file size is lower or equal to the specified size.
            </summary>
            <param name="formFile">The sent file.</param>
            <param name="size">The file size to compare to.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileContent(System.Object)">
            <summary>
            Checks that the HTTP request file content matches its extension signature.
            </summary>
            <param name="formFile">the sent file.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpFormFileEngine.IsValidFileContent(System.Object,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.Byte[]}})">
            <summary>
            Checks that the HTTP request file content matches extension signatures provided.
            </summary>
            <param name="formFile">the sent file.</param>
            <param name="fileSignatures">The file signatures dictionary.</param>
            <returns>Returns <see langword="true"/> is valid, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpHeaderAccessor">
            <summary>
            Provides with methods to retrieve an HTTP request header value matching a specific key.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.ReadValue(System.String)">
            <summary>
            Gets the HTTP header value from the current HTTP request matching the specified key.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.ReadValues(System.String)">
            <summary>
            Gets all HTTP header values from the current HTTP request matching the specified key.
            If not found, returns an empty enumerable.
            </summary>
            <param name="key">The key of the value to match.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpHeaderAccessor.ReadValues">
            <summary>
            Gets all HTTP header values from the current HTTP request.
            If not found, returns an empty dictionary.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenAccessor">
            <summary>
            Defines a method used to retrieve the ambient token string from the current HTTP request header.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenAccessor.ReadToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenAccessor.ReadToken">
            <summary>
            Returns the current token value from the current HTTP request matching the "Authorization" key.
            If not found, returns an empty value.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenDelegateAccessor">
            <summary>
            Defines a method delegate used to retrieve the ambient token string from the current HTTP request header.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Http.IHttpTokenDelegateAccessor.HttpTokenAccessorDelegate">
            <summary>
            Gets or sets the delegate use to retrieve the token value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenDelegateAccessor.ReadToken(System.String)">
            <summary>
            Returns the current token value from the current HTTP request with the specified key.
            </summary>
            <param name="key">The token key to find.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Http.IHttpTokenEngine">
            <summary>
             Defines a set of methods that can be used to build a token from a collection of claims
             and return back this collection from that token.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.WriteToken(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Uses the collection of claims to build a token.
            </summary>
            <param name="claims">collection of claims to be used to build token string.</param>
            <returns>An instance of string token if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="claims"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to write token from claims. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.WriteToken(System.Object)">
            <summary>
            Uses the source object to build a string token. The default behavior throws <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="source">The source to be used.</param>
            <returns>An instance of string token if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to write token from source. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.ReadToken(System.String)">
            <summary>
            Returns the collection of claims from the specified token.
            </summary>
            <param name="token">The token string.</param>
            <returns>An collection of claims if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to read claims from token. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.ReadToken(Xpandables.Net.Types.Token)">
            <summary>
            Returns the collection of claims from the specified token.
            </summary>
            <param name="token">The token string.</param>
            <returns>An collection of claims if OK.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to read claims from token object. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.ReadTokenClaim(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Returns an object claims from the specify collection of claims. This method get used with <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/>.
            The default behavior throws <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="claims">The collection of claims to act on.</param>
            <returns>An object that represents the security identity, otherwise throw <see cref="T:System.InvalidOperationException"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="claims"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to read from claims. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Http.IHttpTokenEngine.ReadTokenClaim(System.String)">
            <summary>
            Returns an object claims from the specify token. The default behavior throws <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="token">The token string to act on.</param>
            <returns>An object that represents the security identity, otherwise throw <see cref="T:System.InvalidOperationException"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="token"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Unable to read from claims. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.IAddable`1">
            <summary>
            Represents collection which allows adding items.
            This interface is useful when implementing a serializable custom collection with JSON.
            </summary>
            <typeparam name="TItem">Type of items in collection.</typeparam>
        </member>
        <member name="M:Xpandables.Net.IAddable`1.Add(`0)">
            <summary>
            Adds item to collection.
            </summary>
            <param name="item">Item to be added.</param>
        </member>
        <member name="T:Xpandables.Net.ICanHandle">
            <summary>
            Provides a method that determines whether or not an argument can be handled.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ICanHandle.CanHandle(System.Object)">
            <summary>
            Determines whether or not a an argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if the argument can be handled, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Xpandables.Net.ICanHandle`1">
            <summary>
            Provides a method that determines whether or not a generic argument can be handled.
            </summary>
            <typeparam name="TArgument">Type of the argument to handle.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ICanHandle`1.CanHandle(`0)">
            <summary>
            Determines whether or not a type specific argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if the argument can be handled, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.ICanHandle`1.CanHandle(System.Object)">
            <summary>
            Determines whether or not a an argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior calls the <see cref="M:Xpandables.Net.ICanHandle`1.CanHandle(`0)"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if the argument can be handled, otherwise <see langword="false"/></returns>
        </member>
        <member name="T:Xpandables.Net.Identities.AsyncCommandTokenClaimDecorator`1">
            <summary>
            This class allows the application author to add secured data support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and inherit from <see cref="T:Xpandables.Net.Identities.TokenClaim"/>,
            <see cref="T:Xpandables.Net.Identities.TokenClaim`1"/> or <see cref="T:Xpandables.Net.Identities.TokenClaimExpression`2"/> in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/>, that you should
            provide an implementation and use an extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.TokenClaim.Claims"/> property with the
            <see cref="M:Xpandables.Net.Identities.ITokenClaimProvider.ReadTokenClaim"/> before the handler execution.
            </summary>
            <typeparam name="TCommand">Type of command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.AsyncCommandTokenClaimDecorator`1.#ctor(Xpandables.Net.Identities.ITokenClaimProvider,Xpandables.Net.Commands.IAsyncCommandHandler{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.AsyncCommandTokenClaimDecorator`1"/> class.
            </summary>
            <param name="tokenClaimProvider">The secured data provider.</param>
            <param name="decoratee">The decorated command handler.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenClaimProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.AsyncCommandTokenClaimDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Identities.AsyncQueryTokenClaimDecorator`2">
            <summary>
            This class allows the application author to add secured information support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and inherit from <see cref="T:Xpandables.Net.Identities.TokenClaim"/>,
            <see cref="T:Xpandables.Net.Identities.TokenClaim`1"/> or <see cref="T:Xpandables.Net.Identities.TokenClaimExpression`2"/> in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/>, that you should
            provide an implementation and use the extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.TokenClaim.Claims"/> property with the
            <see cref="M:Xpandables.Net.Identities.ITokenClaimProvider.ReadTokenClaim"/> before the handler execution.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.AsyncQueryTokenClaimDecorator`2.#ctor(Xpandables.Net.Identities.ITokenClaimProvider,Xpandables.Net.Queries.IAsyncQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.AsyncQueryTokenClaimDecorator`2"/>.
            </summary>
            <param name="tokenClaimProvider">The secured data provider.</param>
            <param name="decoratee">The query handler to decorate with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenClaimProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.AsyncQueryTokenClaimDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.Identities.ITokenClaim">
            <summary>
            Provides with a protected property that holds token claims information of any type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and its decorator class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Identities.ITokenClaim.Claims">
            <summary>
            Contains an instance of claims.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.ITokenClaim.SetClaims(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.ITokenClaim.Claims"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="claims">The claims to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.ITokenClaim`1">
            <summary>
            Provides with a protected property that holds token claims information of generic type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and its decorator class.
            </summary>
            <typeparam name="TClaims">The type of claims.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Identities.ITokenClaim`1.Claims">
            <summary>
            Contains an instance of claims.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.ITokenClaim`1.SetClaims(`0)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.ITokenClaim`1.Claims"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="claims">The claims to be used.</param>
        </member>
        <member name="M:Xpandables.Net.Identities.ITokenClaim`1.SetClaims(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.ITokenClaim`1.Claims"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="claims">The claims to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.ITokenClaimDecorator">
            <summary>
            A marker interface that allows the command/query class to be filled with claims identity. The class should derive from
            <see cref="T:Xpandables.Net.Identities.TokenClaim"/>, <see cref="T:Xpandables.Net.Identities.TokenClaim`1"/> or <see cref="T:Xpandables.Net.Identities.TokenClaimExpression`2"/>
            for a query-bale class. You need to provide with an
            implementation for <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.ITokenClaimExpression`2">
            <summary>
            Provides with a protected property that holds token claims information of generic type in a security context.
            This interface derives from <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> interface.
            This interface is used with <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and its decorator class.
            </summary>
            <typeparam name="TClaims">The type of claims.</typeparam>
            <typeparam name="TSource">The type of the data source</typeparam>
        </member>
        <member name="T:Xpandables.Net.Identities.ITokenClaimProvider">
            <summary>
            Provides with a method to retrieve token claims.
            You should provide an implementation of this interface that will be used with the <see cref="T:Xpandables.Net.Identities.AsyncCommandTokenClaimDecorator`1"/>
            or <see cref="T:Xpandables.Net.Identities.AsyncQueryTokenClaimDecorator`2"/> decorator to fill the target instance with the token claims.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.ITokenClaimProvider.ReadTokenClaim">
            <summary>
            Returns an instance that contains token claims or throw an exception if not found.
            </summary>
            <exception cref="T:System.InvalidOperationException">Failed to find claims</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.ITokenClaimProvider.ReadTokenClaim``1">
            <summary>
            Returns an instance that contains token claims of the specified type or null if not found.
            </summary>
            <typeparam name="TTokenClaim">The type of the token claims.</typeparam>
            <returns>An object of <typeparamref name="TTokenClaim"/> type or null.</returns>
            <exception cref="T:System.InvalidOperationException">Failed to find claims.</exception>
        </member>
        <member name="T:Xpandables.Net.Identities.QueryTokenClaimDecorator`2">
            <summary>
            This class allows the application author to add secured information support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and inherit from <see cref="T:Xpandables.Net.Identities.TokenClaim"/>,
            <see cref="T:Xpandables.Net.Identities.TokenClaim`1"/> or <see cref="T:Xpandables.Net.Identities.TokenClaimExpression`2"/> in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/>, that you should
            provide an implementation and use the extension method for registration.
            The decorator will set the <see cref="P:Xpandables.Net.Identities.TokenClaim.Claims"/> property with the
            <see cref="M:Xpandables.Net.Identities.ITokenClaimProvider.ReadTokenClaim"/> before the handler execution.
            </summary>
            <typeparam name="TQuery">Type of the query.</typeparam>
            <typeparam name="TResult">Type of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.QueryTokenClaimDecorator`2.#ctor(Xpandables.Net.Identities.ITokenClaimProvider,Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.QueryTokenClaimDecorator`2"/>.
            </summary>
            <param name="tokenClaimProvider">The secured data provider.</param>
            <param name="decoratee">The query handler to decorate with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokenClaimProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.QueryTokenClaimDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Identities.TokenClaim">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaim"/> with a protected property that holds token claims information
            of any type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and its decorator class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Identities.TokenClaim.Claims">
            <summary>
            Contains the protected instance of token claims.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider" /> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.TokenClaim.SetClaims(System.Object)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.ITokenClaim.Claims" /> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="claims">The claims data to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.TokenClaim`1">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaim`1"/> with a protected property that holds token claims information
            of generic type in a security context.
            This class is used with <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and its decorator class.
            </summary>
            <typeparam name="TClaims">The type of the token claims.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Identities.TokenClaim`1.Claims">
            <summary>
            Contains the protected instance of claims of <typeparamref name="TClaims"/> type.
            This value is provided by an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider" /> using a decorator.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.TokenClaim`1.SetClaims(`0)">
            <summary>
            Sets the <see cref="P:Xpandables.Net.Identities.TokenClaim`1.Claims"/> with the specified value.
            This method get called by the decorator class.
            </summary>
            <param name="claims">The claims to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Identities.TokenClaimExpression`2">
            <summary>
            Defines an implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimExpression`2"/> with a protected property that holds token claims information
            of generic type in a security context.
            This class implements the <see cref="T:Xpandables.Net.Expressions.IQueryExpression`1"/> interface and derives from <see cref="T:Xpandables.Net.Identities.TokenClaim`1"/>.
            You must override the <see cref="M:Xpandables.Net.Identities.TokenClaimExpression`2.BuildExpression"/> method in order to provide a custom behavior.
            This class is used with <see cref="T:Xpandables.Net.Identities.ITokenClaimDecorator"/> and its decorator class.
            </summary>
            <typeparam name="TClaims">The type of the claims data.</typeparam>
            /// <typeparam name="TSource">The type of the data source</typeparam>
        </member>
        <member name="M:Xpandables.Net.Identities.TokenClaimExpression`2.GetExpression">
            <summary>
            Gets the expression tree for the underlying instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.TokenClaimExpression`2.BuildExpression">
            <summary>
            When implemented in derived class, this method will return the expression
            to be used for the <see langword="Where"/> clause in a query to a db context.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Identities.TokenClaimProvider">
            <summary>
            Provides with a default implementation of <see cref="T:Xpandables.Net.Identities.ITokenClaimProvider"/> that uses <see cref="T:Xpandables.Net.Http.IHttpTokenAccessor"/> and <see cref="T:Xpandables.Net.Http.IHttpTokenEngine"/> to retrieve the token claims object.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Identities.TokenClaimProvider.#ctor(Xpandables.Net.Http.IHttpTokenAccessor,Xpandables.Net.Http.IHttpTokenEngine)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Identities.TokenClaimProvider"/> with the token accessor and token engine.
            </summary>
            <param name="httpTokenAccessor">The accessor to get the token value.</param>
            <param name="httpTokenEngine">The engine to read and write token.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenAccessor"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="httpTokenEngine"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Identities.TokenClaimProvider.ReadTokenClaim">
            <summary>
            Returns an instance that contains token claims or throw an exception if not found.
            </summary>
            <exception cref="T:System.InvalidOperationException">Failed to find claims.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IInterceptor">
            <summary>
            Base interface for types and instances for interception.
            Interceptors implementing this interface are called for each invocation of the pipelines that they're included in.
            We advise the use of decorator instead of interceptor.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.IInterceptor.CanHandle(Xpandables.Net.Interception.IInvocation)">
            <summary>
            Returns a flag indicating if this behavior will actually do anything when invoked.
            This is used to optimize interception. If the behaviors won't actually do anything then the interception
            mechanism can be skipped completely.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if it can handle the argument, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInterceptor.Intercept(Xpandables.Net.Interception.IInvocation)">
            <summary>
            Method used to intercept the parameter method call.
            You have to call the <see cref="M:Xpandables.Net.Interception.IInvocation.Proceed"/> to execute the intercepted method.
            The default implementation just call the <see cref="M:Xpandables.Net.Interception.IInvocation.Proceed"/> method.
            </summary>
            <param name="invocation">The method argument to be called.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="invocation"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IInterceptorDecorator">
            <summary>
            A marker interface that allows the class implementation to be intercepted.
            You need to register the expected behavior using the appropriate interceptor extension method and provide an implementation for <see cref="T:Xpandables.Net.Interception.IInterceptor"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Interception.IInvocation">
            <summary>
            Provides the structure for an interception event.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.InvocationMethod">
            <summary>
            Contains the invocation target method info.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.InvocationInstance">
            <summary>
            Contains the invocation target instance.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.Arguments">
            <summary>
            Contains the arguments (position in signature, names and values) with which the method has been invoked.
            This argument is provided only for target element with parameters.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.Exception">
            <summary>
            Gets the exception handled on executing a method.
            You can edit this value in order to return a custom exception or null.
            If you set this value to null, the process will resume normally and
            take care to provide a <see cref="P:Xpandables.Net.Interception.IInvocation.ReturnValue"/> if necessary.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ReturnValue">
            <summary>
            Gets the executed method return value, only provided for non-void method and when no exception handled.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ElapsedTime">
            <summary>
            Get the elapsed time execution for the underlying method.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IInvocation.ReturnType">
            <summary>
            Gets the invocation method return type.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddException(System.Exception)">
            <summary>
            Sets the exception value.
            If you set this value to null, the process will resume normally and
            take care to provide a <see cref="P:Xpandables.Net.Interception.IInvocation.ReturnValue" /> if necessary.
            </summary>
            <param name="exception">The exception value.</param>
            <returns>The current instance with exception value.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddReturnValue(System.Object)">
            <summary>
            Sets the executed method return value, only for non-void method.
            Be aware to match the return value type.
            Otherwise it will throw an exception.
            </summary>
            <param name="returnValue">The return value to be used.</param>
            <returns>The current instance with return value.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.AddElapsedTime(System.TimeSpan)">
            <summary>
            Sets the executed method elapsed time.
            </summary>
            <param name="elapsedTime">The method elapsed.</param>
            <returns>The current instance with the new elapsed time.</returns>
        </member>
        <member name="M:Xpandables.Net.Interception.IInvocation.Proceed">
            <summary>
            Executes the underlying method.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorAttribute">
            <summary>
            Interceptors base attribute that allows developers to apply handlers to classes and class members directly.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorAttribute.Create(System.IServiceProvider)">
            <summary>
            Derived classes implement this method. When called, it creates a new call handler as specified in the attribute configuration.
            The parameter <paramref name="serviceProvider"/> specifies the <see cref="T:System.IServiceProvider"/> to be used when creating
            handlers, if necessary.
            Returns a new interceptor handler object.
            </summary>
            <param name="serviceProvider">The current instance of the collection of services.</param>
            <returns>An implementation of <see cref="T:Xpandables.Net.Interception.IInterceptor"/> interface.</returns>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorFactory">
            <summary>
            The interceptor class factory.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorFactory.CreateProxy``1(Xpandables.Net.Interception.IInterceptor,``0)">
            <summary>
            Creates an instance of <typeparamref name="TInterface"/> that will be intercepted with the specified interceptor.
            </summary>
            <typeparam name="TInterface">The type of the interface.</typeparam>
            <param name="interceptor">An interceptor instance to apply.</param>
            <param name="instance">The real instance of the interface type.</param>
            <returns><typeparamref name="TInterface"/> proxy instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorFactory.CreateProxy(System.Type,Xpandables.Net.Interception.IInterceptor,System.Object)">
            <summary>
            Creates an instance that will be intercepted with the specified interceptor.
            </summary>
            <param name="interfaceType">The type of the instance</param>
            <param name="interceptor">An interceptor instance to apply</param>
            <param name="instance">The real instance of the type</param>
            <returns><see cref="T:System.Object"/> proxy instance.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.InterceptorProxy`1">
            <summary>
            The base implementation for interceptor.
            This implementation uses the <see cref="T:System.Reflection.DispatchProxy" /> process to apply customer behaviors to a method.
            </summary>
            <typeparam name="TInterface">Type of interface.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Create(`0,Xpandables.Net.Interception.IInterceptor)">
            <summary>
            Returns a new instance of <typeparamref name="TInterface"/> wrapped by a proxy.
            </summary>
            <param name="instance">the instance to be wrapped.</param>
            <param name="interceptor">The instance of the interceptor.</param>
            <returns>An instance that has been wrapped by a proxy.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Interception.InterceptorProxy`1"/> with default values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.SetParameters(`0,Xpandables.Net.Interception.IInterceptor)">
            <summary>
            Initializes the decorated instance and the interceptor with the provided arguments.
            </summary>
            <param name="instance">The instance to be intercepted.</param>
            <param name="interceptor">The instance of interceptor.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interceptor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Invoke(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Executes the method specified in the <paramref name="targetMethod" />.
            Applies the interceptor behavior to the called method.
            </summary>
            <param name="targetMethod">The target method.</param>
            <param name="args">The expected arguments.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetMethod" /> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.InterceptorProxy`1.Bypass(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Bypass the interceptor application because the method is a system method (GetType).
            </summary>
            <param name="targetMethod">Contains all information about the method being executed</param>
            <param name="args">Arguments to be used.</param>
            <returns><see cref="T:System.Object"/> instance</returns>
        </member>
        <member name="T:Xpandables.Net.Interception.Invocation">
            <summary>
            Provides the implementation of the <see cref="T:Xpandables.Net.Interception.IInvocation" /> interface.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Invocation.#ctor(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Interception.Invocation"/> with the arguments needed for invocation.
            </summary>
            <param name="targetMethod">The target method.</param>
            <param name="targetInstance">The target instance being called.</param>
            <param name="argsValue">Arguments for the method, if necessary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetMethod"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetInstance"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.IParameterCollection">
            <summary>
            This interface represents a list of either input or output
            parameters. It implements a fixed size list.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.IParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>value of the named parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterName"/> does not exist</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.IParameterCollection.Item(System.Int32)">
            <summary>
            Fetches a parameter's value by index.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>Value of the indexed parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterIndex"/> does not exist</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.IParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.Parameter">
            <summary>
            Defines the structure of a argument of a method at runtime.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.Build(System.Int32,System.Reflection.ParameterInfo,System.Object)">
            <summary>
            Builds a new instance of <see cref="T:Xpandables.Net.Interception.Parameter"/> with the position, name , value...
            </summary>
            <param name="position">The parameter position in the method signature</param>
            <param name="source">The parameter info to act on.</param>
            <param name="value">The value of the parameter.</param>
            <returns>An instance of new <see cref="T:Xpandables.Net.Interception.Parameter"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="position"/> must be greater
            or equal to zero.</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Position">
            <summary>
            Gets the index position of the parameter in the method signature.
            The value must be greater or equal to zero, otherwise the interface contract
            will throw an <see cref="T:System.ArgumentOutOfRangeException"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Name">
            <summary>
            Gets the name of the parameter as defined in the method signature.
            The value can not be null, otherwise the interface contract will throw an <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Value">
            <summary>
            Gets the value of the parameter at runtime.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.Type">
            <summary>
            Gets the type of the argument.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Interception.Parameter.PassingBy">
            <summary>
            Determines whether the argument is <see langword="out"/>, <see langword="in"/>
            or by <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.ChangeValueTo(System.Object)">
            <summary>
            Sets a new value to the parameter.
            The new value type must match the argument <see cref="P:Xpandables.Net.Interception.Parameter.Type"/>,
            otherwise it will throw a <see cref="T:System.FormatException"/>
            </summary>
            <param name="newValue">The new value to be used.</param>
        </member>
        <member name="T:Xpandables.Net.Interception.Parameter.PassingState">
            <summary>
            Determines whether the argument is <see langword="out"/>, <see langword="in"/>
            or <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.In">
            <summary>
            Standard parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.Out">
            <summary>
            <see langword="out"/> parameter.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Interception.Parameter.PassingState.Ref">
            <summary>
            <see langword="ref"/> parameter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.GetPassedStatusFromParameterInfo(System.Reflection.ParameterInfo)">
            <summary>
            Returns the <see cref="T:Xpandables.Net.Interception.Parameter.PassingState"/> of the parameter.
            </summary>
            <param name="parameterInfo">The parameter to act on.</param>
            <returns>A <see cref="T:Xpandables.Net.Interception.Parameter.PassingState"/> that matches the parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.Parameter.GetTypeFromParameterInfo(System.Reflection.ParameterInfo)">
            <summary>
            Returns the type of the parameter.
            </summary>
            <param name="parameterInfo">The parameter to act on.</param>
            <returns>The parameter type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterInfo"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Interception.ParameterCollection">
            <summary>
            An implementation of <see cref="T:Xpandables.Net.Interception.IParameterCollection"/> that wraps a provided array
            containing the argument values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.#ctor(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Construct a new <see cref="T:Xpandables.Net.Interception.ParameterCollection"/> class that wraps the given array of arguments.
            </summary>
            <param name="methodInfo">The target method.</param>
            <param name="arguments">Arguments for the method, if necessary.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.ParameterCollection.Item(System.String)">
            <summary>
            Fetches a parameter's value by name.
            </summary>
            <param name="parameterName">The parameter name.</param>
            <returns>value of the named parameter.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterName" /> does not exist</exception>
        </member>
        <member name="P:Xpandables.Net.Interception.ParameterCollection.Item(System.Int32)">
            <summary>
            Fetches a parameter's value by index.
            </summary>
            <param name="parameterIndex">The parameter index.</param>
            <returns>Value of the indexed parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="parameterIndex" /> does not exist</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.ContainsParameter(System.String)">
            <summary>
            Does this collection contain a parameter value with the given name?
            </summary>
            <param name="parameterName">Name of parameter to find.</param>
            <returns>True if the parameter name is in the collection, false if not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Interception.ParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns> An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Xpandables.Net.Localization.ILocalizationResourceProvider">
            <summary>
            Gives access to properties resources types to be used for localization.
            The resource type is identified by its string type name and behave as the data annotations attributes localization.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes">
            <summary>
            Contains the collection of resource types used to add localization for application page models (razor style).
            Each page is associated with a resource type name that matches the <see langword="{PageName}Localization"/> following the framework name convention.
            if a localization file is not defined, the default data annotation behavior is used.
            <para></para>
            Example :
            pageName.cshtml.cs contains the pageNameModel and the localization file is named pageNameLocalization.resx.
            <para></para>
            This behavior is available for the following attributes :
            <para><see langword="DisplayAttribute"/> :</para>
            <see langword="DisplayAttribute.Name"/> (just set to any value) will be bounded to the <see langword="Display{PropertyName}"/>
            as key in the resource file.
            <see langword="DisplayAttribute.Prompt"/> (just set to any value) will be bounded to the <see langword="Prompt{PropertyName}"/>
            as key in the resource file.
            <see langword="DisplayAttribute.Description"/> (just set to any value) will be bound to the <see langword="Description{PropertyName}"/>
            as key in the resource file.
            <para><see langword="LocalizedDisplayFormatAttribute"/> :</para>
            <see langword="LocalizedDisplayFormatAttribute.DataFormatString"/> (just set to any value) will be bounded to the <see langword="Format{PropertyName}"/>
            as key in the resource file.
            <see langword="LocalizedDisplayFormatAttribute.NullDisplayText"/> (just set to any value) will be bounded to the
            <see langword="NullDisplay{PropertyName}"/> as key in the resource file.
            <para>
            You can use the <see cref="T:Xpandables.Net.Enumerations.EnumerationType"/> class to build custom enumeration and use the tag helper <see langword="asp-enum"/> that expects the enumeration value for localization in label and the enumeration value will be bound to the <see langword="Enum{EnumerationValue}"/> as key in the resource file.
            </para>
            You can use the <see langword="ILocalizationResourceProviderExtended"/> for custom model binder and validator attributes for localization.
            You can use <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.IsSingleFileUsed"/> for single culture resource for all pages.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ValidationType">
            <summary>
            Contains the resource type for all data annotation validation attributes localization using the attribute name as a key.
            <para>For example :</para>
            The <see langword="RequiredAttribute.ErrorMessageResourceName"/> will be bounded to the <see langword="RequiredAttribute"/>
            as key in the resource file.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.IsSingleFileUsed">
            <summary>
            Determines whether to use a single resource page for culture. If so, the <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes"/> may contain 
            a unique type that will be used for all the page models. 
            Otherwise, you must provide a file for each page. The default behavior returns <see langword="false"/>.
            </summary>
            <returns>Returns <see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypeCollection">
            <summary>
            Contains a collection of resource types to add localization for application view models.
            Each view model is associated with a resource type name that matches the <see langword="{ViewModelName}Localization"/> or can contains
            only one localization file in case of singe file use.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.ILocalizationResourceProvider.AvailableViewModelCultures">
            <summary>
            Returns a collection of available cultures found in the current application based on the <see cref="P:Xpandables.Net.Localization.ILocalizationResourceProvider.ViewModelResourceTypes"/> definition.
            </summary>
            <returns>A collection of <see cref="T:System.Globalization.CultureInfo"/> of an empty collection if no result.</returns>
        </member>
        <member name="T:Xpandables.Net.Localization.LocalizableString">
            <summary>
                A helper class for providing a localizable string property.
                This class is currently compiled in both System.Web.dll and System.ComponentModel.DataAnnotations.dll.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizableString.#ctor(System.String)">
            <summary>
                Constructs a localizable string, specifying the property name associated
                with this item.  The <paramref name="propertyName" /> value will be used
                within any exceptions thrown as a result of localization failures.
            </summary>
            <param name="propertyName">
                The name of the property being localized.  This name
                will be used within exceptions thrown as a result of localization failures.
            </param>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizableString.Value">
            <summary>
                Gets or sets the value of this localizable string.  This value can be
                either the literal, non-localized value, or it can be a resource name
                found on the resource type supplied to <see cref="M:Xpandables.Net.Localization.LocalizableString.GetLocalizableValue" />.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizableString.ResourceType">
            <summary>
                Gets or sets the resource type to be used for localization.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizableString.ClearCache">
            <summary>
                Clears any cached values, forcing <see cref="M:Xpandables.Net.Localization.LocalizableString.GetLocalizableValue" /> to
                perform evaluation.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizableString.GetLocalizableValue">
            <summary>
                Gets the potentially localized value.
            </summary>
            <remarks>
                If <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> has been specified and <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" /> is not
                null, then localization will occur and the localized value will be returned.
                <para>
                    If <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> is null then <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" /> will be returned
                    as a literal, non-localized string.
                </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
                Thrown if localization fails.  This can occur if <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> has been
                specified, <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" /> is not null, but the resource could not be
                accessed.  <see cref="P:Xpandables.Net.Localization.LocalizableString.ResourceType" /> must be a public class, and <see cref="P:Xpandables.Net.Localization.LocalizableString.Value" />
                must be the name of a public static string property that contains a getter.
            </exception>
            <returns>
                Returns the potentially localized value.
            </returns>
        </member>
        <member name="T:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute">
            <summary>
            Specifies how data fields are localized, displayed and formatted by ASP.NET Dynamic Data.
             Allows overriding various display-related options for a given field. The options have the same meaning as in BoundField.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString">
            <summary>
             Gets or sets the format string, which may be a resource key string.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType">
            <summary>
            Gets or sets the type that contains the resources for <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/>.
            Using the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType"/> along with <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/>,
            allows the <see cref="M:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.GetDataFormatString"/> method to return localized values.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.GetDataFormatString">
            <summary>
            Returns the UI format string for <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString"/>.
            When <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> has not been specified, the value of <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" />
            will be returned. When <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> has been specified and <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" />
            represents a resource key within that resource type, then the localized value will be returned. When <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" />
            and <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> have not been set, returns <c>null</c>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            After setting both the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" /> property and the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" /> property,
            but a public static property with a name matching the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatString" /> value couldn't be found
            on the <see cref="P:Xpandables.Net.Localization.LocalizedDisplayFormatAttribute.DataFormatStringResourceType" />.
            </exception>
        </member>
        <member name="T:Xpandables.Net.Localization.Validations.DataAnnotations">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CheckBoxAttribute">
            <summary>
              Looks up a localized string similar to La valeur du champ {0} doit être cochée..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CompareAttribute">
            <summary>
              Looks up a localized string similar to {0} et {1} ne correspondent pas..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.CreditCardAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas un numéro de carte valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.DataTypeAttribute">
            <summary>
              Looks up a localized string similar to Le type de données attendu pour le champ {0} est {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.EmailAddressAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas une adresse mail valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.EnumDataTypeAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit représenter un élément de liste attendu..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.FileExtensionsAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} accepte seulement les fichiers de type : {1}.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.MaxLengthAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit est une chaîne ou un tableau de longueur maximale {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.MinLengthAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} doit est une chaîne ou un tableau de longueur minimale {1}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.PhoneAttribute">
            <summary>
              Looks up a localized string similar to Le {0} n&apos;est pas valide..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RangeAttribute">
            <summary>
              Looks up a localized string similar to Le valeur du champ {0} doit être comprise entre {1} et {2}..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RegularExpressionAttribute">
            <summary>
              Looks up a localized string similar to La valeur du champ {0} doit correspondre à l&apos;expression régulière &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.RequiredAttribute">
            <summary>
              Looks up a localized string similar to Le {0} est obligatoire..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.StringLengthAttribute">
            <summary>
              Looks up a localized string similar to Le {0} doit contenir au moins {2} caractères et au plus {1} caractères..
            </summary>
        </member>
        <member name="P:Xpandables.Net.Localization.Validations.DataAnnotations.UrlAttribute">
            <summary>
              Looks up a localized string similar to Le champ {0} n&apos;est pas une url valide pour http, https ou ftp..
            </summary>
        </member>
        <member name="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1">
            <summary>
            Implementation for <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            You can combine the use with <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChangedForAttribute"/> to propagate notification.
            <para>This is an <see langword="abstract"/> and serializable class.</para>
            </summary>
            <typeparam name="T">Type of the derived class.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1"/> class and its <see cref="P:Xpandables.Net.Notifications.NotifyPropertyChanged`1.Dependencies"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``2(``0@,``0,System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <typeparam name="TProperty">Type of the property selector.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="selector">The expression delegate to retrieve the property name.</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>
            if the existing value matches the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="selector">The expression delegate to retrieve the property name.
            The expression expected is <see langword="nameof"/> with a delegate.</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>i
            f the existing value matched the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="selector"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="selector"/> is not a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if the property does not match the old one.
            If so, sets the property and notifies listeners.
            </summary>
            <typeparam name="TValue">Type of the value.</typeparam>
            <param name="storage">The current value of the property (the back-end property).</param>
            <param name="value">The new value of the property (the value).</param>
            <param name="propertyName">The name of the property. Optional (Already known at compile time).</param>
            <returns><see langword="true"/>if the value was changed, <see langword="false"/>
            if the existing value matches the desired value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Xpandables.Net.Notifications.NotifyPropertyChanged`1.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The property name that has changed.</param>
        </member>
        <member name="P:Xpandables.Net.Notifications.NotifyPropertyChanged`1.Dependencies">
            <summary>
            Contains a collection of dependencies on property changed notification.
            </summary>
        </member>
        <member name="E:Xpandables.Net.Notifications.NotifyPropertyChanged`1.PropertyChanged">
            <summary>
            Event raised when a property has changed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.GetMemberNameFromExpression(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Returns the member name from the expression.
            The expression delegate is <see langword="nameof"/>, otherwise the result is null.
            </summary>
            <param name="nameOfExpression">The expression delegate for the property : <see langword="nameof"/>
            with delegate expected.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="nameOfExpression"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="nameOfExpression"/> is
            not a <see cref="T:System.Linq.Expressions.ConstantExpression"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.GetMemberNameFromExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the member name from the expression if found, otherwise returns null.
            </summary>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="propertyExpression">The expression that contains the member name.</param>
            <returns>A string that represents the name of the member found in the expression.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="propertyExpression"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChanged`1.DependencyPropertiesProvider">
            <summary>
            Provides with the collection of dependencies found in the underlying type.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Notifications.NotifyPropertyChangedForAttribute">
            <summary>
            When used with <see cref="T:Xpandables.Net.Notifications.NotifyPropertyChanged`1"/>, makes sure that the decorated property will be notified
            when the target specified property by <see cref="P:Xpandables.Net.Notifications.NotifyPropertyChangedForAttribute.Name"/> has changed.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Notifications.NotifyPropertyChangedForAttribute.#ctor(System.String)">
            <summary>
            Specifies that the decorated property will be notified when the target specified by name has changed.
            We advise the use of <see langword="nameof(propertyName)"/> as value.
            </summary>
            <param name="name">The name of the target property which changes are notified to the decorated property.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Notifications.NotifyPropertyChangedForAttribute.Name">
            <summary>
            Gets the name of the target property which changes are notified to the decorated property.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Optionals.Optional`1">
            <summary>
            Describes an object that can contain a value or not of a specific type.
            You can make unconditional calls to its content using <see cref="N:System.Linq"/> without testing whether the content is there or not.
            The enumerator will only return the available value.
            If <typeparamref name="T"/> is an enumerable, use the <see cref="M:Xpandables.Net.Optionals.Optional`1.GetEnumerable"/> function to access its content.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetEnumerable">
            <summary>
            Returns the available enumerable collection value when <typeparamref name="T"/> is an enumerable.
            If enumerable value is null, it'll return an empty enumerable.
            Otherwise, its will throw an exception.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <typeparamref name="T"/> is not an enumerable.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ValueIsEnumerable">
            <summary>
            Gets a state whether the internal value is an enumerable or asynchronous enumerable.
            </summary>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
            Returns an enumerator that iterates asynchronously through the collection.
            </summary>
            <param name="cancellationToken">A System.Threading.CancellationToken that may be used to cancel the asynchronous iteration.</param>
            <returns>An enumerator that can be used to iterate asynchronously through the collection.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Map``1(System.Func{``0},System.Func{`0,``0})">
            <summary>
            Creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="empty">The empty action.</param>
            <param name="some">The some action.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.MapAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="empty">The empty action.</param>
            <param name="some">The some action.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Bind``1(System.Func{`0,Xpandables.Net.Optionals.Optional{``0}})">
            <summary>
            Turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.BindAsync``1(System.Func{`0,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}}})">
            <summary>
            Asynchronously turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Map(System.Func{`0,`0})">
            <summary>
            Creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.MapAsync(System.Func{`0,System.Threading.Tasks.Task{`0}})">
            <summary>
            Asynchronously creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.WhenEmpty(System.Func{`0})">
            <summary>
            Creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.WhenEmptyAsync(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Asynchronously creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Empty">
            <summary>
            Provides with an optional of the specific type that is empty.
            </summary>
            <returns>An optional with no value.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Some(`0)">
            <summary>
            Provides with an optional that contains a value of specific type.
            </summary>
            <param name="result">The value to be used for optional.</param>
            <returns>An optional with a value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="result"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.CompareTo(Xpandables.Net.Optionals.Optional{`0})">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether
            the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
              Value
              Meaning
              Less than zero
              This instance precedes <paramref name="other" /> in the sort order.
              Zero
              This instance occurs in the same position in the sort order as <paramref name="other" />.
              Greater than zero
              This instance follows <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.CompareTo(`0)">
            <summary>Compares the current instance with another object of the same type and returns an integer
            that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="other">An object to compare with this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has these meanings:
              Value
              Meaning
              Less than zero
              This instance precedes <paramref name="other" /> in the sort order.
              Zero
              This instance occurs in the same position in the sort order as <paramref name="other" />.
              Greater than zero
              This instance follows <paramref name="other" /> in the sort order.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(Xpandables.Net.Optionals.Optional{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(`0)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value;
              otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.Optional`1.ToString(System.String,System.IFormatProvider)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <param name="format">The format to use.
             -or-
             A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined
             for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
            <param name="formatProvider">The provider to use to format the value.
             -or-
             A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric
             format information from the current locale setting of the operating system.</param>
            <returns>The value of the current instance in the specified format.</returns>
        </member>
        <member name="T:Xpandables.Net.Optionals.OptionalHelpers">
            <summary>
            Functionalities for optional pattern methods.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.AsOptional``1(``0)">
            <summary>
            Converts the specified value to an optional instance.
            </summary>
            <typeparam name="T">The Type of the value.</typeparam>
            <param name="value">The value to act on.</param>
            <returns>An optional instance.</returns>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.MapAsync``2(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Asynchronously creates a new optional that is the result of applying the given functions to the element.
            The some delegate get called only if the instance contains a value,
            otherwise returns the empty delegate.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="empty">The empty action.</param>
            <param name="some">The some action.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.BindAsync``2(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{``0,System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``1}}})">
            <summary>
            Asynchronously turns the current optional to a new optional one using the specified binding.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <typeparam name="TOutput">The type of the result.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="binder">The binding function.</param>
            <returns>A new optional that could contain a value or not.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="binder"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.MapAsync``1(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{``0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new optional that is the result of calling the given function.
            The delegate get called only if the instance contains a value, otherwise returns the current instance.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="some">The function to call.</param>
            <returns>An optional of <typeparamref name="T"/> type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="some"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Optionals.OptionalHelpers.WhenEmptyAsync``1(System.Threading.Tasks.Task{Xpandables.Net.Optionals.Optional{``0}},System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously creates a new value that is the result of applying the given function when the instance is empty.
            The delegate get called only if the instance is empty, otherwise returns the current instance.
            </summary>
            <typeparam name="T">The type of the optional value.</typeparam>
            <param name="optional">The optional to act on.</param>
            <param name="empty">The empty map.</param>
            <returns>The replacement value.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="empty"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Properties.Resources.Default">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:Xpandables.Net.Queries.AsyncQueryHandlerBuilder`2">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Queries.IAsyncQueryHandler`2"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TQuery">Type of argument to act on.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.AsyncQueryHandlerBuilder`2.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Collections.Generic.IAsyncEnumerable{`1}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.AsyncQueryHandlerBuilder`2"/> with the delegate to be used
            as <see cref="M:Xpandables.Net.Queries.IAsyncQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Queries.IAsyncQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.AsyncQueryHandlerBuilder`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.AsyncQueryHandlerWrapper`2">
            <summary>
            Implementation for <see cref="T:Xpandables.Net.Queries.IAsyncQueryHandlerWrapper`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.AsyncQueryHandlerWrapper`2.#ctor(Xpandables.Net.Queries.IAsyncQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.AsyncQueryHandlerWrapper`2"/> class.
            </summary>
            <param name="decoratee">The query handler instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.AsyncQueryHandlerWrapper`2.CanHandle(System.Object)">
            <summary>
            Determines whether or not a an argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if the argument can be handled, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Queries.AsyncQueryHandlerWrapper`2.HandleAsync(Xpandables.Net.Queries.IAsyncQuery{`1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.IAsyncQuery`1">
            <summary>
            This interface is used as a marker for queries when using the asynchronous query pattern that contains a specific-type result.
            <para>Class implementation is used with the <see cref="T:Xpandables.Net.Queries.IAsyncQueryHandler`2"/> where
            "TQuery" is <see cref="T:Xpandables.Net.Queries.IAsyncQuery`1"/> class implementation.</para>
            This can also be enhanced with some useful decorators.
            </summary>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Queries.IAsyncQueryHandler`2">
            <summary>
            Defines a generic method that a class implements to asynchronously handle a type-specific query and
            returns an asynchronous enumerable type-specific result.
            The implementation must be thread-safe when working in a multi-threaded environment.
            This interface inherits from <see cref="T:Xpandables.Net.ICanHandle`1"/> that determines whether or not the query can be handled. Its default behavior returns <see langword="true"/>.
            </summary>
            <typeparam name="TQuery">Type of the query that will be used as argument.</typeparam>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IAsyncQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.IAsyncQueryHandlerWrapper`1">
            <summary>
            This interface allows application authors to avoid use of C# dynamics with query pattern and allows type inference.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IAsyncQueryHandlerWrapper`1.HandleAsync(Xpandables.Net.Queries.IAsyncQuery{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerated.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.IQuery`1">
            <summary>
            This interface is used as a marker for queries when using the query pattern that contains a specific-type result.
            <para>Class implementation is used with the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/> where
            "TQuery" is <see cref="T:Xpandables.Net.Queries.IQuery`1"/> class implementation.</para>
            This can also be enhanced with some useful decorators.
            </summary>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="T:Xpandables.Net.Queries.IQueryHandler`2">
            <summary>
            Defines a generic method that a class implements to handle a type-specific query and
            returns a type-specific result.
            The implementation must be thread-safe when working in a multi-threaded environment.
            This interface inherits from <see cref="T:Xpandables.Net.ICanHandle`1"/> that determines whether or not the query can be handled. Its default behavior returns <see langword="true"/>.
            </summary>
            <typeparam name="TQuery">Type of the query that will be used as argument.</typeparam>
            <typeparam name="TResult">Type of the result of the query.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.IQueryHandlerWrapper`1">
            <summary>
            This interface allows application authors to avoid use of C# dynamics with query pattern and allows type inference.
            </summary>
            <typeparam name="TResult">Type of the result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.IQueryHandlerWrapper`1.HandleAsync(Xpandables.Net.Queries.IQuery{`0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.QueryHandlerBuilder`2">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Queries.IQueryHandler`2"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TQuery">Type of argument to act on.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerBuilder`2.#ctor(System.Func{`0,System.Threading.CancellationToken,System.Threading.Tasks.Task{`1}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.QueryHandlerBuilder`2"/> with the delegate to be used
            as <see cref="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/> implementation.
            </summary>
            <param name="handler">The delegate to be used when the handler will be invoked.
            <para>The delegate should match all the behaviors expected in
            the <see cref="M:Xpandables.Net.Queries.IQueryHandler`2.HandleAsync(`0,System.Threading.CancellationToken)"/>
            method such as thrown exceptions.</para></param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="handler"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerBuilder`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Queries.QueryHandlerWrapper`2">
            <summary>
            Implementation for <see cref="T:Xpandables.Net.Queries.IQueryHandlerWrapper`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Queries.QueryHandlerWrapper`2"/> class.
            </summary>
            <param name="decoratee">The query handler instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.CanHandle(System.Object)">
            <summary>
            Determines whether or not a an argument can be handled by the underlying context.
            Returns <see langword="true"/> if so, otherwise <see langword="false"/>.
            The default behavior returns <see langword="true"/>.
            </summary>
            <param name="argument">The argument to handle.</param>
            <returns><see langword="true"/> if the argument can be handled, otherwise <see langword="false"/></returns>
        </member>
        <member name="M:Xpandables.Net.Queries.QueryHandlerWrapper`2.HandleAsync(Xpandables.Net.Queries.IQuery{`1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Strings.IStringCryptography">
            <summary>
            Provides with methods to encrypt and decrypt string values.
            Contains an implementation of <see cref="T:Xpandables.Net.Strings.IStringGenerator"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Strings.IStringCryptography.StringGenerator">
            <summary>
            Gets the string generator for cryptography.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringCryptography.EncryptAsync(System.String,System.UInt16)">
            <summary>
            Returns an encrypted string from the value using a randomize key.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="keySize">The size of the string key to be used to encrypt the string value.</param>
            <returns>An encrypted object that contains the encrypted value and its key.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="keySize"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringCryptography.EncryptAsync(System.String,System.String,System.String)">
            <summary>
            Returns an encrypted string from the value string using the specified key and the salt value.
            If <paramref name="key"/> or <paramref name="salt"/> is not provided, a default value will be used.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="value">The value to be encrypted.</param>
            <param name="key">The optional key value to be used for encryption.</param>
            <param name="salt">The optional salt base64 string value to be used for encryption.</param>
            <returns>An encrypted object that contains the encrypted value, its key and its salt.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The encryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringCryptography.DecryptAsync(System.String,System.String,System.String)">
            <summary>
            Returns an decrypted string from the encrypted value.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="key">The key value to be used for decryption.</param>
            <param name="value">The base64 encrypted value to be decrypted.</param>
            <param name="salt">The salt base64 string value to be used for decryption.</param>
            <returns>A decrypted string from the encrypted values.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="salt"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringCryptography.DecryptAsync(Xpandables.Net.Strings.ValueEncrypted)">
            <summary>
            Returns an decrypted string from the encrypted object.
            The process uses the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> algorithm with the <see cref="T:System.Security.Cryptography.SHA256"/>.
            </summary>
            <param name="encrypted">The object that contains encrypted information.</param>
            <returns>A decrypted string from the encrypted object.</returns>
            <exception cref="T:System.InvalidOperationException">The decryption failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringCryptography.AreEqual(Xpandables.Net.Strings.ValueEncrypted,System.String)">
            <summary>
            Compares the encrypted object with the plain text one.
            Returns <see langword="true"/> if equality otherwise <see langword="false"/>.
            </summary>
            <param name="encrypted">The encrypted object.</param>
            <param name="value">The value to compare with.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The comparison failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Strings.StringCryptography">
            <summary>
            String cryptography engine.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Strings.StringCryptography.StringGenerator">
            <summary>
            Gets the string generator for the cryptography.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.StringCryptography.#ctor(Xpandables.Net.Strings.IStringGenerator)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Strings.StringCryptography"/> class with the string generator.
            </summary>
            <param name="stringGenerator">The string generator.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stringGenerator"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Strings.IStringGenerator">
            <summary>
            Provides with methods to generate strings.
            Contains a default implementation.
            </summary>
        </member>
        <member name="F:Xpandables.Net.Strings.IStringGenerator.LookupCharacters">
            <summary>
            The lookup characters used to generate random string.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringGenerator.Generate(System.UInt16,System.String)">
            <summary>
            Generates a string of the specified length that contains random characters from the lookup characters.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <param name="lookupCharacters">The string to be used to pick characters from or default one.</param>
            <returns>A new string of the specified length with random characters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="lookupCharacters"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringGenerator.GenerateSalt(System.UInt16)">
            <summary>
            Generates a salt base64 string of the specified byte length.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <returns>A new base64 string from the salt bytes.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Generating the salt failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.IStringGenerator.Generate(System.UInt16)">
            <summary>
            Generates a string of the specified length that contains random characters.
            <para>The implementation uses the <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/>.</para>
            </summary>
            <param name="length">The length of the expected string value.</param>
            <returns>A new string of the specified length with random characters.</returns>
            <exception cref="T:System.ArgumentException">The <paramref name="length"/> must be greater than zero
            and lower or equal to <see cref="F:System.UInt16.MaxValue"/>.</exception>
        </member>
        <member name="T:Xpandables.Net.Strings.StringGenerator">
            <summary>
            Provides with <see cref="T:Xpandables.Net.Strings.IStringGenerator"/> implementation.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Strings.StringExtensions">
            <summary>
            Provides with methods to extend use of <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.StringFormat(System.String,System.Object[])">
            <summary>
            Replaces the argument object into the current text equivalent <see cref="T:System.String"/>
            using the default <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The format string.</param>
            <param name="args">The object to be formatted.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null or <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The format is invalid.</exception>
            <returns>value <see cref="T:System.String"/> filled with <paramref name="args"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.StringFormat(System.String,System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Replaces the argument object into the current text equivalent <see cref="T:System.String"/> using the specified culture.
            </summary>
            <param name="value">The format string.</param>
            <param name="cultureInfo">CultureInfo to be used.</param>
            <param name="args">The object to be formatted.</param>
            <returns>value <see cref="T:System.String"/> filled with <paramref name="args"/></returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="cultureInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="args"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The format is invalid.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.ToJsonString``1(``0)">
            <summary>
            Serializes the current instance to JSON string.
            </summary>
            <param name="source">The object to act on.</param>
            <returns>A JSOn string representation of the object.</returns>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates all the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified string separator between each element.
            </summary>
            <typeparam name="TSource">The generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="separator">The string to use as a separator.
            Separator is included in the returned string only if value has more than one element.</param>
            <returns>A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns String.Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.StringJoin``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            Concatenates all the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            using the specified char separator between each element.
            </summary>
            <typeparam name="TSource">The generic type parameter.</typeparam>
            <param name="collection">The collection to act on.</param>
            <param name="separator">The string to use as a separator.
            Separator is included in the returned string only if value has more than one element.</param>
            <returns>A string that consists of the elements in value delimited by the separator string.
            If value is an empty array, the method returns String.Empty.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.TryToValueType``1(System.String,``0@,System.Exception@)">
            <summary>
            Tries to convert a string to the specified value type.
            </summary>
            <typeparam name="TResult">Type source.</typeparam>
            <param name="value">The string value.</param>
            <param name="result">The string value converted to the specified value type.</param>
            <param name="valueTypeException">The handled exception during conversion.</param>
            <returns>Returns <see langword="true"/> if conversion OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null or empty.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.StringExtensions.TryToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@,System.Exception@,System.String[])">
            <summary>
            Converts string date to <see cref="T:System.DateTime"/> type.
            If error, returns an exception.
            </summary>
            <param name="source">A string containing a date and time to convert.</param>
            <param name="provider">An object that supplies culture-specific format information about string.</param>
            <param name="styles"> A bitwise combination of enumeration values that indicates the permitted format
            of string. A typical value to specify is System.Globalization.DateTimeStyles.None.</param>
            <param name="result">An object that is equivalent to the date and time contained in <paramref name="source"/> as specified
            by formats, provider, and style.</param>
            <param name="dateTimeException">The handled exception during conversion.</param>
            <param name="formats">An array of allowable formats of strings.</param>
            <returns>Returns <see langword="true"/> if conversion OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="provider"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Strings.ValueEncrypted">
            <summary>
            Defines a representation of an encrypted value, its key and its salt.
            This class uses the <see cref="T:Xpandables.Net.Strings.ValueEncryptedTypeConverter"/> type converter.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.#ctor(System.String,System.String,System.String)">
            <summary>
            Returns a new instance of <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> with the key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The encrypted value.</param>
            <param name="salt">The salt value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="key"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="salt"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.#ctor(Xpandables.Net.Strings.ValueEncrypted)">
            <summary>
            Makes a copy of the value encrypted source.
            </summary>
            <param name="source">The encrypted value to be copied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.Deconstruct(System.String@,System.String@,System.String@)">
            <summary>
            Provides with deconstruction for <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/>.
            </summary>
            <param name="key">The output key.</param>
            <param name="value">The output value.</param>
            <param name="salt">the output salt value.</param>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.IsEqualTo(System.String,Xpandables.Net.Strings.IStringCryptography)">
            <summary>
            Compares the encrypted value with the specified one.
            Returns <see langword="true"/> if equality otherwise <see langword="false"/>.
            </summary>
            <param name="value">The value to compare with.</param>
            <param name="stringCryptography">The cryptography instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stringCryptography"/> is null.</exception>
        </member>
        <member name="P:Xpandables.Net.Strings.ValueEncrypted.Key">
            <summary>
            Contains the encryption key.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Strings.ValueEncrypted.Value">
            <summary>
            Contains the base64 encrypted value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Strings.ValueEncrypted.Salt">
            <summary>
            Contains the base64 salt value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> with other object.
            </summary>
            <param name="obj">Object to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.op_Equality(Xpandables.Net.Strings.ValueEncrypted,Xpandables.Net.Strings.ValueEncrypted)">
            <summary>
            Applies equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.op_Inequality(Xpandables.Net.Strings.ValueEncrypted,Xpandables.Net.Strings.ValueEncrypted)">
            <summary>
            Applies non equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.Equals(Xpandables.Net.Strings.ValueEncrypted)">
            <summary>
            Compares <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> with the value.
            </summary>
            <param name="other">Option to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.GetHashCode">
            <summary>
            Computes the hash-code for the <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.ToString">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> using the specified format and provider.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncrypted.op_Implicit(Xpandables.Net.Strings.ValueEncrypted)~System.String">
            <summary>
            Implicit converter from <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="valueEncrypted">The target value to act on.</param>
        </member>
        <member name="T:Xpandables.Net.Strings.ValueEncryptedTypeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.Strings.ValueEncrypted"/> objects to <see cref="T:System.String"/>and from <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncryptedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type
            to a range value object using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncryptedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncryptedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a encrypted value object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.Strings.ValueEncryptedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified destination type.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Transactions.AsyncCommandTransactionDecorator`1">
            <summary>
            This class allows the application author to add transaction support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Transactions.ITransactionDecorator"/> in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/>, that you should
            provide an implementation and use the extension method <see langword="AddTransactionScopeDecorator{TTransactionScopeProvider}"/>
            for registration. The transaction scope definition comes from the
            <see cref="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)"/> method.
            if no transaction is returned, the execution is done normally.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Transactions.AsyncCommandTransactionDecorator`1.#ctor(Xpandables.Net.Commands.IAsyncCommandHandler{`0},Xpandables.Net.Transactions.ITransactionScopeProvider)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Transactions.AsyncCommandTransactionDecorator`1"/>.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="transactionScopeProvider">The transaction scope provider.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="transactionScopeProvider"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Transactions.AsyncCommandTransactionDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Transactions.ITransactionDecorator">
            <summary>
            A marker interface that allows the command handler class implementation to be decorated with transaction behavior according to
            the decorated class type :
            <see cref="T:Xpandables.Net.Commands.IAsyncCommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Transactions.AsyncCommandTransactionDecorator`1"/>.
            You must implement the <see cref="T:Xpandables.Net.Transactions.ITransactionScopeProvider"/> to provide the transaction scope.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Transactions.ITransactionScopeProvider">
            <summary>
            Provides with a method to retrieve a definition of a transaction scope to be applied to the target command/query.
            You should provide an implementation of this interface that will be used with the <see cref="T:Xpandables.Net.Transactions.AsyncCommandTransactionDecorator`1"/>
            decorator to add transaction behavior to the execution flow.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Transactions.ITransactionScopeProvider.GetTransactionScope``1(``0)">
            <summary>
            Returns an instance that contains the transaction scope to be used when handling the target command/query.
            </summary>
            <param name="argument">The command/query instance to retrieve the transaction scope for.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Types.Picture">
            <summary>
            Defines the <see cref="T:Xpandables.Net.Types.Picture"/> class that holds properties for an image.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.#ctor(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance <see cref="T:Xpandables.Net.Types.Picture"/> with all properties.
            </summary>
            <param name="title">The picture title.</param>
            <param name="content">The picture content.</param>
            <param name="height">The picture height.</param>
            <param name="width">The picture width.</param>
            <param name="extension">The picture extension.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="title"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="content"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="height"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="width"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="extension"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.Default">
            <summary>
            Creates a <see cref="T:Xpandables.Net.Types.Picture"/> with the default image content.
            </summary>
            <returns>A new instance of <see cref="T:Xpandables.Net.Types.Picture"/> with default image content.</returns>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.Create(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new picture with values.
            </summary>
            <param name="title">The picture title.</param>
            <param name="content">The picture content.</param>
            <param name="height">The picture height.</param>
            <param name="width">The picture width.</param>
            <param name="extension">The picture extension.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="title"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="content"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="height"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="width"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="extension"/> is null.</exception>
            <returns>A new instance of <see cref="T:Xpandables.Net.Types.Picture"/>.</returns>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.Create(Xpandables.Net.Types.Picture)">
            <summary>
            Creates a new picture from another.
            </summary>
            <param name="source">the picture source.</param>
            <returns>A new instance of <see cref="T:Xpandables.Net.Types.Picture"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.Clear">
            <summary>
            Clears the content of the picture.
            </summary>
            <returns>The current instance without content.</returns>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.Types.Picture.ToString">
            <summary>
            Returns the UTF8 encoded string of the image.
            </summary>
            <returns>An UTF8 string.</returns>
        </member>
        <member name="P:Xpandables.Net.Types.Picture.Title">
            <summary>
            Gets the picture title.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Picture.Content">
            <summary>
            Gets the picture byte content.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Picture.Height">
            <summary>
            Gets the height, in pixels, of this picture.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Picture.Width">
            <summary>
            Gets the width, in pixels, of this picture.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Picture.Extension">
            <summary>
            Gets the file format of this picture.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Types.Token">
            <summary>
            Contains a token value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Token.Value">
            <summary>
            Gets the token value.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Token.Type">
            <summary>
            Gets the type of the token : Bearer, Basic....
            </summary>
        </member>
        <member name="P:Xpandables.Net.Types.Token.Expiry">
            <summary>
            Gets the token expiry.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Types.Token.Create(System.String,System.String,System.DateTime)">
            <summary>
            Creates an instance of <see cref="T:Xpandables.Net.Types.Token"/> with the specified value.
            </summary>
            <param name="value">The token value.</param>
            <param name="type">The token type.</param>
            <param name="expiry">The token expiry.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.Token.Deconstruct(System.String@,System.String@,System.DateTime@)">
            <summary>
            Provides with deconstruction for <see cref="T:Xpandables.Net.Types.Token"/>.
            </summary>
            <param name="value">The output token value.</param>
            <param name="type">The output token type.</param>
            <param name="expiry">The output token expiry date.</param>
        </member>
        <member name="M:Xpandables.Net.Types.Token.GetEqualityComponents">
            <summary>
            Provides the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="T:Xpandables.Net.Types.TypeExtensions">
            <summary>
            Provides with methods to extend use of <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.GetDescription``1(``0)">
            <summary>
            Returns the description string attribute of the current <see cref="T:System.Enum"/> value type.
            if not found, returns the value as string.
            </summary>
            <typeparam name="TEnum">Type of enumeration.</typeparam>
            <param name="value">Enumeration field value to act on.</param>
            <returns>The description string. If not found, returns the value as string.</returns>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsOverridden(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is overridden in its current implementation.
            The method info should come from the <see cref="M:System.Object.GetType"/>.
            </summary>
            <param name="methodInfo">The method info to act on.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsAwaitable(System.Reflection.MethodInfo)">
            <summary>
            Determines whether the specified method is a <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="methodInfo">The method info to act on.</param>
            <returns><see langword="true"/> if so, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="methodInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the current type is a null-able type.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            Determines whether the current type implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsAsyncEnumerable(System.Type)">
            <summary>
            Determines whether the current type implements or it's <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <param name="type">The type to act on.</param>
            <returns><see langword="true"/> if found, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.GetNameWithoutGenericArity(System.Type)">
            <summary>
            Returns the name of the type without the generic arity '`'.
            Useful for generic types.
            </summary>
            <param name="type">The type to act on.</param>
            <returns>The name of the type without the generic arity '`'.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryLoadAssembly(System.Reflection.AssemblyName,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tries to load assembly from its assembly name.
            </summary>
            <param name="assemblyName">The assembly name to act with.</param>
            <param name="loadedAssembly">The loaded assembly if succeeded.</param>
            <param name="assemblyException">The handled exception during assembly loading if fails.</param>
            <returns>Returns <see langword="true"/> if loading OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryTypeInvokeMember(System.Type,System.Object@,System.Exception@,System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Tries to invoke the specified member, using the specified binding constraints and matching
            the specified argument list.
            </summary>
            <param name="type"></param>
            <param name="result">An object representing the return value of the invoked member
            or an empty result with handled exception.</param>
            <param name="invokeException">The handled invoke exception.</param>
            <param name="memberName">The string containing the name of the constructor, method, property, or field
            member to invoke. /// -or- /// An empty string (&quot;&quot;) to invoke the default
            member. /// -or- /// For IDispatch members, a string representing the DispID,
            for example &quot;[DispID=3]&quot;.</param>
            <param name="invokeAttr">A bit-mask comprised of one or more System.Reflection.BindingFlags that specify
            how the search is conducted. The access can be one of the BindingFlags such as
            Public, NonPublic, Private, InvokeMethod, GetField, and so on. The type of lookup
            need not be specified. If the type of lookup is omitted, BindingFlags.Public
            | BindingFlags.Instance | BindingFlags.Static are used.</param>
            <param name="binder">An object that defines a set of properties and enables binding, which can involve
            selection of an overloaded method, coercion of argument types, and invocation
            of a member through reflection. /// -or- /// A null reference (Nothing in Visual
            Basic), to use the System.Type.DefaultBinder. Note that explicitly defining a
            System.Reflection.Binder object may be required for successfully invoking method
            overloads with variable arguments.</param>
            <param name="target">The object on which to invoke the specified member.</param>
            <param name="args">An array containing the arguments to pass to the member to invoke.</param>
            <returns>Returns <see langword="true"/> if invoke OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="memberName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryMakeGenericType(System.Type,System.Type@,System.Exception@,System.Type[])">
            <summary>
            Tries to substitute the elements of an array of types for the type parameters of the
            current generic type definition and returns a System.Type object representing
            the resulting constructed type. If error, return false with exception.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="genericType">The generic type result.</param>
            <param name="typeException">The handled type exception.</param>
            <param name="typeArguments">An array of types to be substituted for the type parameters of the current generic
            type.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryGetConstructorDelegate``1(System.Type,``0@,System.Exception@,System.Type[])">
            <summary>
            Tries to get the specified delegate type associated to the constructor.
            </summary>
            <typeparam name="TDelegate"></typeparam>
            <param name="type">The type to act on.</param>
            <param name="constructorDelegate">The built constructor delegate.</param>
            <param name="constructorException">The handled exception.</param>
            <param name="parameterTypes">The collection of parameter types.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterTypes"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryGetTypeFromTypeName(System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get the type specified by its name from the loaded assemblies.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="type">The type result if found.</param>
            <param name="typeException">The handled execution exception.</param>
            <returns>Returns <see langword="true"/> if get OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryGetConstructorExpression(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression@,System.Exception@,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Tries to get an Expression representing the constructor call, passing in the constructor parameters.
            </summary>
            <param name="constructorInfo">The constructor info to act on.</param>
            <param name="constructorExpression">The built constructor expression.</param>
            <param name="constructorException">The handled constructor exception.</param>
            <param name="parameterExpressions">A collection of parameter expressions.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="constructorInfo"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterExpressions"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryGetConstructorInfo(System.Type,System.Reflection.ConstructorInfo@,System.Exception@,System.Type[])">
            <summary>
            Tries to get the constructor from the type that matches the specified arguments type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="constructorInfo">The found constructor.</param>
            <param name="constructorException">The handled constructor exception.</param>
            <param name="parameterTypes">The optional parameters types.</param>
            <returns>Returns <see langword="true"/> if make OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryLoadAssembly(System.String,System.Reflection.Assembly@,System.Exception@)">
            <summary>
            Tries to load assembly from its name.
            </summary>
            <param name="assemblyName">The full assembly name.</param>
            <param name="loadedAssembly">The loaded assembly if succeeded.</param>
            <param name="assemblyException">The handled exception during assembly loading.</param>
            <returns>Returns <see langword="true"/> if loading OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryGetType(System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get type from its string name.
            </summary>
            <param name="typeName">The name of the type to find.</param>
            <param name="foundType">The found type.</param>
            <param name="typeException">The handled type exception.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.TryGetType(System.String,System.String,System.Type@,System.Exception@)">
            <summary>
            Tries to get the type from string, if not found, try to load from the assembly.
            </summary>
            <param name="typeName">The name of the type to find.</param>
            <param name="assemblyName">The assembly to act on.</param>
            <param name="foundType">The found type.</param>
            <param name="typeException">The handled type exception.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblyName"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.GetParameterExpression(System.Type[])">
            <summary>
            Gets a set of Expressions representing the parameters which will be passed to the constructor.
            </summary>
            <param name="parameterTypes">A collection of type to be used to build parameter expressions</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parameterTypes"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.GetBaseTypes(System.Type)">
            <summary>
            Return a collection of base types found in the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsAssignableTo(System.Type,System.Type)">
            <summary>
            Determines whether or not the underlying type is assignable to the specified type.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="targetType">The type to check.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="targetType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.HasAttribute(System.Type,System.Type)">
            <summary>
            Determines whether or not the type contains the specified type attribute.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="attributeType">The type of the attribute.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="attributeType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.HasAttribute``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Determines whether or not the type contains the specified type attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="type">The type to act on.</param>
            <param name="predicate">The predicate to use.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="predicate"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsInNamespace(System.Type,System.String)">
            <summary>
            Determines whether or not the type is in the name space.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="namespace">The name space.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="namespace"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.IsInExactNamespace(System.Type,System.String)">
            <summary>
            Determines whether or not the type is in the specified namespace.
            </summary>
            <param name="type">The type to act on.</param>
            <param name="namespace">The name space.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="namespace"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.HasMatchingGenericArity(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Determines whether an interface type and a type have matching arity.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <param name="typeInfo">The target type.</param>
            <returns>Returns <see langword="true"/> if OK and <see langword="false"/> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Types.TypeExtensions.GetRegistrationType(System.Type,System.Reflection.TypeInfo)">
            <summary>
            Returns the registration type from an interface.
            </summary>
            <param name="interfaceType">the interface type to act on.</param>
            <param name="typeInfo">The type info.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="typeInfo"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Validations.AsyncCommandValidatorDecorator`1">
            <summary>
            This class allows the application author to add validation support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Validations.IValidationDecorator"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Validations.ICompositeValidation`1"/>
            and applies all validators found to the target command before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.Validations.IValidation`1"/> for validation.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.AsyncCommandValidatorDecorator`1.#ctor(Xpandables.Net.Commands.IAsyncCommandHandler{`0},Xpandables.Net.Validations.ICompositeValidation{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Validations.AsyncCommandValidatorDecorator`1"/>.
            </summary>
            <param name="decoratee">The decorated command handler.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.AsyncCommandValidatorDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Validations.AsyncQueryValidatorDecorator`2">
            <summary>
            This class allows the application author to add validation support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Validations.IValidationDecorator"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Validations.ICompositeValidation`1"/>
            and applies all validators found to the target query before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.Validations.IValidation`1"/> for validation.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.AsyncQueryValidatorDecorator`2.#ctor(Xpandables.Net.Queries.IAsyncQueryHandler{`0,`1},Xpandables.Net.Validations.ICompositeValidation{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Validations.AsyncQueryValidatorDecorator`2"/>.
            </summary>
            <param name="decoratee">The query handler to decorate.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.AsyncQueryValidatorDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerable.</returns>
        </member>
        <member name="T:Xpandables.Net.Validations.CompositeValidation`1">
            <summary>
            The composite validation class used to wrap all validators for a specific type.
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.CompositeValidation`1.#ctor(System.Collections.Generic.IEnumerable{Xpandables.Net.Validations.IValidation{`0}})">
            <summary>
            Initializes the composite validation with all validation instances for the argument.
            </summary>
            <param name="validationInstances">The collection of validators to act with.</param>
        </member>
        <member name="T:Xpandables.Net.Validations.ICompositeValidation`1">
            <summary>
            Defines method contracts used to validate a type-specific argument by composition using a decorator.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.ICompositeValidation`1.ValidateAsync(`0)">
            <summary>
            Asynchronously validates the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Validations.IMetataDescriptionProvider">
            <summary>
            Allows an application author to add type description provider for any class.
            For more information about description and others, see the <see cref="T:System.ComponentModel.TypeDescriptor"/> class.
            The implementation must be thread-safe when working in a multi-threaded environment.
            Any operation that does not deliver or do what it promises to do should throw an exception. 
            </summary>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.AddProvider``1(``0,System.String,System.Reflection.Assembly[])">
            <summary>
            Adds the type description provider specified by the meta-data description name for the current instance.
            The meta-data class must be name "{<paramref name="metadataDescriptionTypeName"/>}", must be public, and available from
            the <paramref name="instance"/> assembly or any custom loaded assembly in the current application domain.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="instance">Contains the instance to which the meta-data type description will be added.</param>
            <param name="metadataDescriptionTypeName">Contains the name of the type used to find the meta-data class for 
            the current <paramref name="instance"/>.</param>
            <param name="assemblies">The collection of assemblies to search in.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="metadataDescriptionTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.AddProvider``1(``0,System.Type)">
            <summary>
            Adds the specified type description provider to the instance.
            Any operation that does not deliver or do what it promises to do should throw an exception. 
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="instance">Contains the instance to which the meta-data type description will be added.</param>
            <param name="metadataDescriptionType">Contains the meta-data type description to add to the current <paramref name="instance"/>.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="metadataDescriptionType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.AddProvider``1(``0)">
            <summary>
            Adds the type description provider specified by its name for the current instance.
            The meta-data class must be name "{InstanceTypeName}{Metadata}", must be public, 
            and available from the <paramref name="instance"/> assembly or any custom loaded assembly in the current application domain.
            </summary>
            <typeparam name="TSource">The type of the object.</typeparam>
            <param name="instance">Contains the instance to which the meta-data type description will be added.</param>
            <exception cref="T:System.ArgumentNullException">Exception thrown when the <paramref name="instance"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.AddProviderFromType``1(``0,System.Type)">
            <summary>
            Adds the description provider from the description type.
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="descriptionType">The description type.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="descriptionType"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.AddProviderFromStringName``1(``0,System.String,System.Reflection.Assembly[])">
            <summary>
            Adds the description provider from the description type name.
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="metadataDescriptionTypeName">The meta data description type name.</param>
            <param name="assemblies">The collection of assemblies to search in.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadataDescriptionTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.GetDescriptionTypeFromName``1(``0,System.String,System.Reflection.Assembly[])">
            <summary>
            Returns the description type if found.
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="metadataDescriptionTypeName">The meta data description type name.</param>
            <param name="assemblies">The collection of assemblies to search in.</param>
            <returns>If found, returns the description type.</returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="metadataDescriptionTypeName"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="assemblies"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.IMetataDescriptionProvider.AddMetadataDescriptionType``1(``0,System.Type)">
            <summary>
            Adds the description provider to the instance, if specified or adds the description from the current type;
            </summary>
            <typeparam name="TSource">The type of the instance.</typeparam>
            <param name="instance">The instance.</param>
            <param name="descriptionType">The description <typeparamref name="TSource"/>.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="instance"/> is null.</exception>
        </member>
        <member name="T:Xpandables.Net.Validations.IValidation`1">
            <summary>
            Defines method contracts used to validate a type-specific argument using a decorator.
            The implementation must be thread-safe when working in a multi-threaded environment.
            <para>Contains default implementation. You just need to override the method.</para>
            </summary>
            <typeparam name="TArgument">Type of the argument to be validated.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Validations.IValidation`1.Order">
            <summary>
            Gets the zero-base order in which the validator will be executed.
            The default value is zero.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Validations.IValidation`1.ValidateAsync(`0)">
            <summary>
            Asynchronously validates the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            The default behavior uses <see cref="M:System.ComponentModel.DataAnnotations.Validator.ValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Boolean)"/>.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Validations.IValidationDecorator">
            <summary>
            A marker interface that allows the command/query class to be decorated with the validation behavior according to the class type :
            <see cref="T:Xpandables.Net.Queries.IAsyncQuery`1"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Validations.AsyncQueryValidatorDecorator`2"/> while
            <see cref="T:Xpandables.Net.Commands.IAsyncCommand"/> class implementation will be decorated with <see cref="T:Xpandables.Net.Validations.AsyncCommandValidatorDecorator`1"/>.
            The default validation behavior uses the data annotations validator on validation attributes. You can implement the interface
            <see cref="T:Xpandables.Net.Validations.IValidation`1"/> to customize a validation behavior.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Validations.MetadataDescriptionProvider">
            <summary>
            Default implementation of <see cref="T:Xpandables.Net.Validations.IMetataDescriptionProvider"/>.
            Defines methods used to add type description provider for any class.
            For more information about description and others, see the <see cref="T:System.ComponentModel.TypeDescriptor"/> class.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Validations.NullValidation`1">
            <summary>
            Validator when no explicit registration exist for a given type.
            </summary>
            <typeparam name="TArgument">Type of argument to be validated.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.NullValidation`1.ValidateAsync(`0)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Validations.PatternRequiredOptionalAttribute">
            <summary>
            Specifies that the data field value is required according to a regular expression.
            When the <see cref="P:Xpandables.Net.Validations.PatternRequiredOptionalAttribute.IsOptional"/> is <see langword="true"/>, the data field is only checked if there is a value.
            This is an <see langword="abstract"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Validations.PatternRequiredOptionalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Validations.PatternRequiredOptionalAttribute"/> with the regex pattern the value must match.
            </summary>
            <param name="regexPattern">The regex pattern to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="regexPattern"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.PatternRequiredOptionalAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validates the specified value with respect to the current pattern validation attribute.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="validationContext">The context information about the validation operation.</param>
            <returns>An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> class.</returns>
            <exception cref="T:System.InvalidOperationException">The current attribute is malformed.</exception>
        </member>
        <member name="P:Xpandables.Net.Validations.PatternRequiredOptionalAttribute.IsOptional">
            <summary>
            Gets or sets the value whether or not the decorated property/field/parameter can be null.
            If <see langword="true"/>, the data field will only be checked when there is a value. The default behavior is <see langword="false"/>.
            </summary>
        </member>
        <member name="P:Xpandables.Net.Validations.PatternRequiredOptionalAttribute.RegexPattern">
            <summary>
            Gets the Regex pattern the value must match.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Validations.QueryValidatorDecorator`2">
            <summary>
            This class allows the application author to add validation support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Validations.IValidationDecorator"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Validations.ICompositeValidation`1"/>
            and applies all validators found to the target query before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.Validations.IValidation`1"/>for validation.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.QueryValidatorDecorator`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.Validations.ICompositeValidation{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Validations.QueryValidatorDecorator`2"/>.
            </summary>
            <param name="decoratee">The query handler to decorate.</param>
            <param name="validator">The validator instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.QueryValidatorDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
        <member name="T:Xpandables.Net.Validations.RequiredOptionalAttribute">
            <summary>
            Specifies that a data field value is required.
            When the <see cref="P:Xpandables.Net.Validations.RequiredOptionalAttribute.IsOptional"/> is <see langword="true"/>, the data field is only checked if there is a value.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Validations.RequiredOptionalAttribute.IsValid(System.Object)">
            <summary>
            Checks that the value of the required data field is not empty if optional is <see langword="false"/>.
            </summary>
            <param name="value">The data field value to validate.</param>
            <returns> true if validation is successful; otherwise, false.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">The data field value was null.</exception>
        </member>
        <member name="P:Xpandables.Net.Validations.RequiredOptionalAttribute.IsOptional">
            <summary>
            Gets or sets the value whether or not the decorated property/field/parameter can be null.
            If <see langword="true"/>, the data field will only be checked when there is a value. The default behavior is <see langword="false"/>.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Validations.ValidationAttributeExtensions">
            <summary>
            Provides with helper methods for validation attributes.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Validations.ValidationAttributeExtensions.CreateValidationException(System.String,System.Object,System.String[])">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> using the specified arguments.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="value">The value of the object that caused the attribute to trigger the validation error.</param>
            <param name="memberNames">The list of member names that have validation errors.</param>
        </member>
        <member name="T:Xpandables.Net.Validations.ValidationBuilder`1">
            <summary>
            This helper class allows the application author to implement the <see cref="T:Xpandables.Net.Validations.IValidation`1"/>
            interface without dedicated class.
            </summary>
            <typeparam name="TArgument">Type of the argument.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Validations.ValidationBuilder`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Validations.ValidationBuilder`1"/> class with the delegate to be used
            as <see cref="T:Xpandables.Net.Validations.IValidation`1"/> implementation.
            </summary>
            <param name="validator">The delegate validator.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="validator"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Validations.ValidationBuilder`1.ValidateAsync(`0)">
            <summary>
            Asynchronously validates the argument and throws the <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> if necessary.
            </summary>
            <param name="argument">The target argument to be validated.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="argument"/> is null.</exception>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">Any validation exception.</exception>
        </member>
        <member name="T:Xpandables.Net.ValueObject">
            <summary>
            An object that represents a descriptive aspect of the domain with no conceptual identity.
            <para><see cref="T:Xpandables.Net.ValueObject"/> are instantiated to represent elements of the design that we care about only
            for what they are not who or which they are.” [Source : Evans 2003]</para>
            This is an <see langword="abstract"/> and <see langword="serializable"/> class.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueObject.GetEqualityComponents">
            <summary>
            When implemented in derived class, this method will provide with the list of components that comprise that class.
            </summary>
            <returns>An enumerable components of the derived class.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            The comparison is done by using SequenceEqual() on the two sets of components.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.EqualOperator(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.op_Equality(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares equality.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.op_Inequality(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares difference.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueObject.NotEqualOperator(Xpandables.Net.ValueObject,Xpandables.Net.ValueObject)">
            <summary>
            Compares difference.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>true if the specified objects are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Xpandables.Net.ValueRange`1">
            <summary>
            Defines a pair of values, representing a segment.
            This class uses <see cref="T:Xpandables.Net.ValueRangeTypeConverter"/> as type converter.
            </summary>
            <typeparam name="TValue">The Type of each of two values of range.</typeparam>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.ValueRange`1"/> with the specified pair of values.
            </summary>
            <param name="min">The minimal value of range.</param>
            <param name="max">The maximal value of range.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.#ctor(Xpandables.Net.ValueRange{`0})">
            <summary>
            Creates a copy of the specified range value.
            </summary>
            <param name="source">The range to be copied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Deconstruct(`0@,`0@)">
            <summary>
            Provides with deconstruction for <see cref="T:Xpandables.Net.ValueRange`1"/>.
            </summary>
            <param name="min">The output minimal value of range.</param>
            <param name="max">The output maximal value of range.</param>
        </member>
        <member name="P:Xpandables.Net.ValueRange`1.Min">
            <summary>
            Gets the minimal value of range.
            </summary>
        </member>
        <member name="P:Xpandables.Net.ValueRange`1.Max">
            <summary>
            Gets the maximal value of range.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.ToString">
            <summary>
            Creates a string representation of the <see cref="T:Xpandables.Net.ValueRange`1"/> separated by ":".
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.ToString(System.String,System.IFormatProvider)">
            <summary>
            Creates a string representation of the string <see cref="T:Xpandables.Net.ValueRange`1"/> using the specified format and provider.
            The format will received address properties in the following order : <see cref="P:Xpandables.Net.ValueRange`1.Min"/> and <see cref="P:Xpandables.Net.ValueRange`1.Max"/>.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="format"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="formatProvider"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="format"/> is invalid or
            the index of a format item is not zero or one.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Equals(System.Object)">
            <summary>
            Compares the <see cref="T:Xpandables.Net.ValueRange`1"/> with other object.
            </summary>
            <param name="obj">Object to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.GetHashCode">
            <summary>
            Computes the hash-code for the <see cref="T:Xpandables.Net.ValueRange`1"/> instance.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.op_Equality(Xpandables.Net.ValueRange{`0},Xpandables.Net.ValueRange{`0})">
            <summary>
            Applies equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.op_Inequality(Xpandables.Net.ValueRange{`0},Xpandables.Net.ValueRange{`0})">
            <summary>
            Applies non equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.Equals(Xpandables.Net.ValueRange{`0})">
            <summary>
            Compares <see cref="T:Xpandables.Net.ValueRange`1"/> with the value of type <typeparamref name="TValue"/>.
            </summary>
            <param name="other">Option to compare with.</param>
        </member>
        <member name="M:Xpandables.Net.ValueRange`1.IsEmpty">
            <summary>
            Determines whether this range is empty or not.
            </summary>
            <returns>Returns <see langword="true"/> if so, otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="T:Xpandables.Net.ValueRangeTypeConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Xpandables.Net.ValueRange`1"/> objects to <see cref="T:System.String"/> and from <see cref="T:System.String"/> representations.
            </summary>
        </member>
        <member name="M:Xpandables.Net.ValueRangeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object in the given source type
            to a range value object using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"></see> that represents the type you wish to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueRangeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can convert an object to the given destination type
            using the context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"></see> that represents the type you wish to convert to.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Xpandables.Net.ValueRangeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified value object to a range value object.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            .</returns>
            <exception cref="T:System.FormatException"><paramref name="value">value</paramref> is not a valid value
            for the target type.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="M:Xpandables.Net.ValueRangeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given range value object to the specified destination type string.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo"></see>. If not supplied, the current
            culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"></see> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"></see> to convert the value to.</param>
            <returns>An <see cref="T:System.Object"></see> that represents the converted <paramref name="value">value</paramref>
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="destinationType">destinationType</paramref> is null.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="value">value</paramref> is not a valid value
            for the enumeration.</exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed.</exception>
        </member>
        <member name="T:Xpandables.Net.Visitors.AsyncCommandVisitorDecorator`1">
            <summary>
            This class allows the application author to add visitor support to command control flow.
            The target command should implement the <see cref="T:Xpandables.Net.Visitors.IVisitable`1"/> interface in order to activate the behavior.
            The class decorates the target command handler with an implementation of <see cref="T:Xpandables.Net.Visitors.ICompositeVisitor`1"/>
            and applies all visitors found to the target command before the command get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.Visitors.IVisitor`1"/>.
            </summary>
            <typeparam name="TCommand">Type of the command.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Visitors.AsyncCommandVisitorDecorator`1.#ctor(Xpandables.Net.Commands.IAsyncCommandHandler{`0},Xpandables.Net.Visitors.ICompositeVisitor{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Visitors.AsyncCommandVisitorDecorator`1"/>.
            </summary>
            <param name="decoratee">the decorated command handler.</param>
            <param name="visitor">the visitor to be applied.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Visitors.AsyncCommandVisitorDecorator`1.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handle the specified command.
            </summary>
            <param name="command">The command instance to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="command" /> is null.</exception>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:Xpandables.Net.Visitors.AsyncQueryVisitorDecorator`2">
            <summary>
            This class allows the application author to add visitor support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Visitors.IVisitable`1"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Visitors.ICompositeVisitor`1"/>
            and applies all visitors found to the target query before the query get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.Visitors.IVisitor`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Visitors.AsyncQueryVisitorDecorator`2.#ctor(Xpandables.Net.Queries.IAsyncQueryHandler{`0,`1},Xpandables.Net.Visitors.ICompositeVisitor{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Visitors.AsyncQueryVisitorDecorator`2"/>.
            </summary>
            <param name="decoratee">The query to be decorated.</param>
            <param name="visitor">The composite visitor to apply</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Visitors.AsyncQueryVisitorDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns an asynchronous result type.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>An enumerator of <typeparamref name="TResult"/> that can be asynchronously enumerable.</returns>
        </member>
        <member name="T:Xpandables.Net.Visitors.CompositeVisitorRule`1">
            <summary>
            The composite visitor used to wrap all visitors for a specific visitable type.
            </summary>
            <typeparam name="TElement">Type of the element to be visited</typeparam>
        </member>
        <member name="M:Xpandables.Net.Visitors.CompositeVisitorRule`1.#ctor(System.Collections.Generic.IEnumerable{Xpandables.Net.Visitors.IVisitor{`0}})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Visitors.CompositeVisitorRule`1"/> with a collection of visitors.
            </summary>
            <param name="visitors">The collection of visitors for a specific type.</param>
        </member>
        <member name="T:Xpandables.Net.Visitors.ICompositeVisitor`1">
            <summary>
            Allows an application author to apply the visitor pattern by composition using a decorator.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Visitors.ICompositeVisitor`1.VisitAsync(`0)">
            <summary>
            Asynchronously applies all found visitors to the element according to the visitor order.
            </summary>
            <param name="element">The element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="element"/> does not implement <see cref="T:Xpandables.Net.Visitors.IVisitable`1"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Visitors.IVisitable`1">
            <summary>
            Defines an Accept operation that takes a visitor as an argument.
            Visitor design pattern allows you to add new behaviors to an existing object without changing the object structure.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Visitors.IVisitable`1.AcceptAsync(Xpandables.Net.Visitors.IVisitor{`0})">
            <summary>
            Defines the Accept operation.
            When overridden in derived class, this method will accept the specified visitor.
            The default behavior just call the visit method of the visitor on the current instance.
            </summary>
            <param name="visitor">The visitor to be applied on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="M:Xpandables.Net.Visitors.IVisitable`1.AcceptAsync(Xpandables.Net.Visitors.ICompositeVisitor{`0})">
            <summary>
            Defines the Accept operation with <see cref="T:Xpandables.Net.Visitors.ICompositeVisitor`1"/>.
            </summary>
            <param name="visitor">The composite visitor to be applied on.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Visitors.IVisitor`1">
            <summary>
            Allows an application author to apply the visitor pattern : The generic Visitor definition.
            The implementation must be thread-safe when working in a multi-threaded environment.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="P:Xpandables.Net.Visitors.IVisitor`1.Order">
            <summary>
            Gets the zero-base order in which the visitor will be applied.
            The default value is zero.
            </summary>
        </member>
        <member name="M:Xpandables.Net.Visitors.IVisitor`1.VisitAsync(`0)">
            <summary>
            Declares a Visit operation.
            When overridden in derived class, this method will do the actual job of visiting the specified element.
            The default behavior checks that the argument is not null.
            </summary>
            <param name="element">Element to be visited.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="element"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
        </member>
        <member name="T:Xpandables.Net.Visitors.NullVisitor`1">
            <summary>
            Visitor when no explicit registration exist for a given type.
            </summary>
            <typeparam name="TElement">Type of element to be visited.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Visitors.NullVisitor`1.VisitAsync(`0)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Xpandables.Net.Visitors.QueryVisitorDecorator`2">
            <summary>
            This class allows the application author to add visitor support to query control flow.
            The target query should implement the <see cref="T:Xpandables.Net.Visitors.IVisitable`1"/> interface in order to activate the behavior.
            The class decorates the target query handler with an implementation of <see cref="T:Xpandables.Net.Visitors.ICompositeVisitor`1"/>
            and applies all visitors found to the target query before the query get handled. You should provide with implementation
            of <see cref="T:Xpandables.Net.Visitors.IVisitor`1"/>.
            </summary>
            <typeparam name="TQuery">Type of query.</typeparam>
            <typeparam name="TResult">Type of result.</typeparam>
        </member>
        <member name="M:Xpandables.Net.Visitors.QueryVisitorDecorator`2.#ctor(Xpandables.Net.Queries.IQueryHandler{`0,`1},Xpandables.Net.Visitors.ICompositeVisitor{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Xpandables.Net.Visitors.QueryVisitorDecorator`2"/>.
            </summary>
            <param name="decoratee">The query to be decorated.</param>
            <param name="visitor">The composite visitor to apply</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="decoratee"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="visitor"/> is null.</exception>
        </member>
        <member name="M:Xpandables.Net.Visitors.QueryVisitorDecorator`2.HandleAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously handles the specified query and returns the expected result.
            </summary>
            <param name="query">The query to act on.</param>
            <param name="cancellationToken">A CancellationToken to observe while waiting for the task to complete.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="query"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The operation failed. See inner exception.</exception>
            <exception cref="T:System.OperationCanceledException">The operation has been canceled.</exception>
            <returns>A task that represents an object <typeparamref name="TResult"/> or not.</returns>
        </member>
    </members>
</doc>
