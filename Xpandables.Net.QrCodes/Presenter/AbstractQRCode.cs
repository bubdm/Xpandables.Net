/************************************************************************************************************
 * Copyright (C) 2020 Francis-Black EWANE
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
************************************************************************************************************/

using System;

namespace Xpandables.Net.QrCodes.Presenter
{
    /// <summary>
    /// The QrCode base class definition
    /// </summary>
    public abstract class AbstractQrCode : IDisposable
    {
        /// <summary>
        /// Gets the QrCode content data.
        /// </summary>
        protected QrCodeData QrCodeData { get; private set; }

        /// <summary>
        /// Initializes a new instance of <see cref="QrCodeData"/> class with the QrCode data content.
        /// </summary>
        /// <param name="data">The QrCode data content.</param>
        /// <exception cref="ArgumentNullException">The <paramref name="data"/> is null.</exception>
        protected AbstractQrCode(QrCodeData data) => QrCodeData = data ?? throw new ArgumentNullException(nameof(data));

        /// <summary>
        /// Set a QRCodeData object that will be used to generate QR code. Used in COM Objects connections
        /// </summary>
        /// <param name="data">Need a QRCodeData object generated by QRCodeGenerator.CreateQrCode()</param>
        virtual public void SetQRCodeData(QrCodeData data) => QrCodeData = data;

        private bool _isDisposed;

        /// <summary>
        /// Public Implementation of Dispose according to .NET Framework Design Guidelines
        /// callable by consumers.
        /// Do not make this method virtual.
        /// A derived class should not be able to override this method.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This object will be cleaned up by the Dispose method.
        /// Therefore, you should call GC.SuppressFinalize to take this object off the finalization queue
        /// and prevent finalization code for this object from executing a second time.
        /// </para>
        /// <para>Always use SuppressFinalize() in case a subclass of this type implements a finalizer.</para>
        /// </remarks>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Protected implementation of Dispose pattern.
        /// When overridden in derived classes, this method get called when the instance will be disposed.
        /// </summary>
        /// <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources;
        /// <see langword="false"/> to release only unmanaged resources.
        /// </param>
        /// <remarks>
        /// <list type="bulle ted">
        /// <see cref="Dispose(bool)"/> executes in two distinct scenarios.
        /// <item>If <paramref name="disposing"/> equals <c>true</c>, the method has been called directly
        /// or indirectly by a user's code. Managed and unmanaged resources can be disposed.</item>
        /// <item>If <paramref name="disposing"/> equals <c>false</c>, the method has been called
        /// by the runtime from inside the finalizer and you should not reference other objects.
        /// Only unmanaged resources can be disposed.</item></list>
        /// </remarks>
        protected virtual void Dispose(bool disposing)
        {
            if (_isDisposed)
                return;

            if (disposing)
            {
                // Release all managed resources here
                // Need to unregister/detach yourself from the events. Always make sure
                // the object is not null first before trying to unregister/detach them!
                // Failure to unregister can be a BIG source of memory leaks
                QrCodeData?.Dispose();
            }

            // Release all unmanaged resources here and override a finalizer below.
            // Set large fields to null.

            // Dispose has been called.
            _isDisposed = true;

            // If it is available, make the call to the
            // base class's Dispose(boolean) method
        }
    }
}
